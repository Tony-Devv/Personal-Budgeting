### YamlMime:ManagedReference
items:
- uid: Model.Handlers.UserHandler
  commentId: T:Model.Handlers.UserHandler
  id: UserHandler
  parent: Model.Handlers
  children:
  - Model.Handlers.UserHandler.#ctor
  - Model.Handlers.UserHandler.ChangeUserPassword(System.String,Model.Entities.User)
  - Model.Handlers.UserHandler.EditUserDetails(Model.Entities.User)
  - Model.Handlers.UserHandler.GetTotalAmountSpentOnBudget(System.Int32,System.Int32)
  - Model.Handlers.UserHandler.GetTotalUserIncomes(System.Int32)
  - Model.Handlers.UserHandler.GetTotalUserSpentExpenses(System.Int32)
  - Model.Handlers.UserHandler.GetUserBudgets(Model.Entities.User)
  - Model.Handlers.UserHandler.GetUserByEmail(System.String)
  - Model.Handlers.UserHandler.GetUserById(System.Int32)
  - Model.Handlers.UserHandler.GetUserExpenses(Model.Entities.User)
  - Model.Handlers.UserHandler.GetUserIncomes(Model.Entities.User)
  - Model.Handlers.UserHandler.LoginUser(Model.Entities.User)
  - Model.Handlers.UserHandler.RegisterNewUser(Model.Entities.User)
  langs:
  - csharp
  - vb
  name: UserHandler
  nameWithType: UserHandler
  fullName: Model.Handlers.UserHandler
  type: Class
  source:
    remote:
      path: Model/Handlers/UserHandler.cs
      branch: ConsoleApplication
      repo: https://github.com/Tony-Devv/Personal-Budgeting.git
    id: UserHandler
    path: ../Model/Handlers/UserHandler.cs
    startLine: 10
  assemblies:
  - Model
  namespace: Model.Handlers
  summary: >-
    Handler class responsible for managing user-related operations such as registration, login,

    password change, and retrieving user details.
  example: []
  syntax:
    content: public class UserHandler
    content.vb: Public Class UserHandler
  inheritance:
  - System.Object
  inheritedMembers:
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.ToString
- uid: Model.Handlers.UserHandler.#ctor
  commentId: M:Model.Handlers.UserHandler.#ctor
  id: '#ctor'
  parent: Model.Handlers.UserHandler
  langs:
  - csharp
  - vb
  name: UserHandler()
  nameWithType: UserHandler.UserHandler()
  fullName: Model.Handlers.UserHandler.UserHandler()
  type: Constructor
  source:
    remote:
      path: Model/Handlers/UserHandler.cs
      branch: ConsoleApplication
      repo: https://github.com/Tony-Devv/Personal-Budgeting.git
    id: .ctor
    path: ../Model/Handlers/UserHandler.cs
    startLine: 18
  assemblies:
  - Model
  namespace: Model.Handlers
  summary: Initializes a new instance of the <xref href="Model.Handlers.UserHandler" data-throw-if-not-resolved="false"></xref> class.
  example: []
  syntax:
    content: public UserHandler()
    content.vb: Public Sub New()
  overload: Model.Handlers.UserHandler.#ctor*
  nameWithType.vb: UserHandler.New()
  fullName.vb: Model.Handlers.UserHandler.New()
  name.vb: New()
- uid: Model.Handlers.UserHandler.RegisterNewUser(Model.Entities.User)
  commentId: M:Model.Handlers.UserHandler.RegisterNewUser(Model.Entities.User)
  id: RegisterNewUser(Model.Entities.User)
  parent: Model.Handlers.UserHandler
  langs:
  - csharp
  - vb
  name: RegisterNewUser(User)
  nameWithType: UserHandler.RegisterNewUser(User)
  fullName: Model.Handlers.UserHandler.RegisterNewUser(Model.Entities.User)
  type: Method
  source:
    remote:
      path: Model/Handlers/UserHandler.cs
      branch: ConsoleApplication
      repo: https://github.com/Tony-Devv/Personal-Budgeting.git
    id: RegisterNewUser
    path: ../Model/Handlers/UserHandler.cs
    startLine: 32
  assemblies:
  - Model
  namespace: Model.Handlers
  summary: Registers a new user by checking if the user already exists, hashing the password, and saving the user to the repository.
  example: []
  syntax:
    content: public Task<User?> RegisterNewUser(User user)
    parameters:
    - id: user
      type: Model.Entities.User
      description: The user to be registered.
    return:
      type: System.Threading.Tasks.Task{Model.Entities.User}
      description: >-
        A Task&lt;User?&gt; representing the asynchronous operation. The task result is the created <xref href="Model.Entities.User" data-throw-if-not-resolved="false"></xref> 

        if the registration is successful, or <code>null</code> if the user already exists.
    content.vb: Public Function RegisterNewUser(user As User) As Task(Of User)
  overload: Model.Handlers.UserHandler.RegisterNewUser*
- uid: Model.Handlers.UserHandler.LoginUser(Model.Entities.User)
  commentId: M:Model.Handlers.UserHandler.LoginUser(Model.Entities.User)
  id: LoginUser(Model.Entities.User)
  parent: Model.Handlers.UserHandler
  langs:
  - csharp
  - vb
  name: LoginUser(User)
  nameWithType: UserHandler.LoginUser(User)
  fullName: Model.Handlers.UserHandler.LoginUser(Model.Entities.User)
  type: Method
  source:
    remote:
      path: Model/Handlers/UserHandler.cs
      branch: ConsoleApplication
      repo: https://github.com/Tony-Devv/Personal-Budgeting.git
    id: LoginUser
    path: ../Model/Handlers/UserHandler.cs
    startLine: 58
  assemblies:
  - Model
  namespace: Model.Handlers
  summary: Logs in a user by verifying the email and password, returning the corresponding user if credentials are valid.
  example: []
  syntax:
    content: public Task<User?> LoginUser(User user)
    parameters:
    - id: user
      type: Model.Entities.User
      description: The user attempting to log in.
    return:
      type: System.Threading.Tasks.Task{Model.Entities.User}
      description: >-
        A Task&lt;User?&gt; representing the asynchronous operation. The task result is the <xref href="Model.Entities.User" data-throw-if-not-resolved="false"></xref> 

        if the login is successful, or <code>null</code> if the credentials are invalid.
    content.vb: Public Function LoginUser(user As User) As Task(Of User)
  overload: Model.Handlers.UserHandler.LoginUser*
- uid: Model.Handlers.UserHandler.EditUserDetails(Model.Entities.User)
  commentId: M:Model.Handlers.UserHandler.EditUserDetails(Model.Entities.User)
  id: EditUserDetails(Model.Entities.User)
  parent: Model.Handlers.UserHandler
  langs:
  - csharp
  - vb
  name: EditUserDetails(User)
  nameWithType: UserHandler.EditUserDetails(User)
  fullName: Model.Handlers.UserHandler.EditUserDetails(Model.Entities.User)
  type: Method
  source:
    remote:
      path: Model/Handlers/UserHandler.cs
      branch: ConsoleApplication
      repo: https://github.com/Tony-Devv/Personal-Budgeting.git
    id: EditUserDetails
    path: ../Model/Handlers/UserHandler.cs
    startLine: 86
  assemblies:
  - Model
  namespace: Model.Handlers
  summary: Edits the details of an existing user.
  example: []
  syntax:
    content: public Task<User?> EditUserDetails(User user)
    parameters:
    - id: user
      type: Model.Entities.User
      description: The user whose details need to be updated.
    return:
      type: System.Threading.Tasks.Task{Model.Entities.User}
      description: >-
        A Task&lt;User?&gt; representing the asynchronous operation. The task result is the updated <xref href="Model.Entities.User" data-throw-if-not-resolved="false"></xref>, 

        or <code>null</code> if the user does not exist.
    content.vb: Public Function EditUserDetails(user As User) As Task(Of User)
  overload: Model.Handlers.UserHandler.EditUserDetails*
- uid: Model.Handlers.UserHandler.GetUserById(System.Int32)
  commentId: M:Model.Handlers.UserHandler.GetUserById(System.Int32)
  id: GetUserById(System.Int32)
  parent: Model.Handlers.UserHandler
  langs:
  - csharp
  - vb
  name: GetUserById(int)
  nameWithType: UserHandler.GetUserById(int)
  fullName: Model.Handlers.UserHandler.GetUserById(int)
  type: Method
  source:
    remote:
      path: Model/Handlers/UserHandler.cs
      branch: ConsoleApplication
      repo: https://github.com/Tony-Devv/Personal-Budgeting.git
    id: GetUserById
    path: ../Model/Handlers/UserHandler.cs
    startLine: 111
  assemblies:
  - Model
  namespace: Model.Handlers
  summary: Retrieves a user by their ID.
  example: []
  syntax:
    content: public Task<User?> GetUserById(int id)
    parameters:
    - id: id
      type: System.Int32
      description: The ID of the user to retrieve.
    return:
      type: System.Threading.Tasks.Task{Model.Entities.User}
      description: >-
        A Task&lt;User?&gt; representing the asynchronous operation. The task result is the <xref href="Model.Entities.User" data-throw-if-not-resolved="false"></xref> 

        if found, or <code>null</code> if the user does not exist.
    content.vb: Public Function GetUserById(id As Integer) As Task(Of User)
  overload: Model.Handlers.UserHandler.GetUserById*
  nameWithType.vb: UserHandler.GetUserById(Integer)
  fullName.vb: Model.Handlers.UserHandler.GetUserById(Integer)
  name.vb: GetUserById(Integer)
- uid: Model.Handlers.UserHandler.GetUserByEmail(System.String)
  commentId: M:Model.Handlers.UserHandler.GetUserByEmail(System.String)
  id: GetUserByEmail(System.String)
  parent: Model.Handlers.UserHandler
  langs:
  - csharp
  - vb
  name: GetUserByEmail(string)
  nameWithType: UserHandler.GetUserByEmail(string)
  fullName: Model.Handlers.UserHandler.GetUserByEmail(string)
  type: Method
  source:
    remote:
      path: Model/Handlers/UserHandler.cs
      branch: ConsoleApplication
      repo: https://github.com/Tony-Devv/Personal-Budgeting.git
    id: GetUserByEmail
    path: ../Model/Handlers/UserHandler.cs
    startLine: 136
  assemblies:
  - Model
  namespace: Model.Handlers
  summary: Retrieves a user by their email.
  example: []
  syntax:
    content: public Task<User?> GetUserByEmail(string email)
    parameters:
    - id: email
      type: System.String
      description: The email of the user to retrieve.
    return:
      type: System.Threading.Tasks.Task{Model.Entities.User}
      description: >-
        A Task&lt;User?&gt; representing the asynchronous operation. The task result is the <xref href="Model.Entities.User" data-throw-if-not-resolved="false"></xref> 

        if found, or <code>null</code> if the user does not exist.
    content.vb: Public Function GetUserByEmail(email As String) As Task(Of User)
  overload: Model.Handlers.UserHandler.GetUserByEmail*
  nameWithType.vb: UserHandler.GetUserByEmail(String)
  fullName.vb: Model.Handlers.UserHandler.GetUserByEmail(String)
  name.vb: GetUserByEmail(String)
- uid: Model.Handlers.UserHandler.ChangeUserPassword(System.String,Model.Entities.User)
  commentId: M:Model.Handlers.UserHandler.ChangeUserPassword(System.String,Model.Entities.User)
  id: ChangeUserPassword(System.String,Model.Entities.User)
  parent: Model.Handlers.UserHandler
  langs:
  - csharp
  - vb
  name: ChangeUserPassword(string, User)
  nameWithType: UserHandler.ChangeUserPassword(string, User)
  fullName: Model.Handlers.UserHandler.ChangeUserPassword(string, Model.Entities.User)
  type: Method
  source:
    remote:
      path: Model/Handlers/UserHandler.cs
      branch: ConsoleApplication
      repo: https://github.com/Tony-Devv/Personal-Budgeting.git
    id: ChangeUserPassword
    path: ../Model/Handlers/UserHandler.cs
    startLine: 162
  assemblies:
  - Model
  namespace: Model.Handlers
  summary: Changes the password for a user after verifying the current password.
  example: []
  syntax:
    content: public Task<User?> ChangeUserPassword(string newPassword, User user)
    parameters:
    - id: newPassword
      type: System.String
      description: The new password to set.
    - id: user
      type: Model.Entities.User
      description: The user whose password is to be changed.
    return:
      type: System.Threading.Tasks.Task{Model.Entities.User}
      description: >-
        A Task&lt;User?&gt; representing the asynchronous operation. The task result is the <xref href="Model.Entities.User" data-throw-if-not-resolved="false"></xref> 

        if the password change is successful, or <code>null</code> if the old password is incorrect or the user does not exist.
    content.vb: Public Function ChangeUserPassword(newPassword As String, user As User) As Task(Of User)
  overload: Model.Handlers.UserHandler.ChangeUserPassword*
  nameWithType.vb: UserHandler.ChangeUserPassword(String, User)
  fullName.vb: Model.Handlers.UserHandler.ChangeUserPassword(String, Model.Entities.User)
  name.vb: ChangeUserPassword(String, User)
- uid: Model.Handlers.UserHandler.GetUserIncomes(Model.Entities.User)
  commentId: M:Model.Handlers.UserHandler.GetUserIncomes(Model.Entities.User)
  id: GetUserIncomes(Model.Entities.User)
  parent: Model.Handlers.UserHandler
  langs:
  - csharp
  - vb
  name: GetUserIncomes(User)
  nameWithType: UserHandler.GetUserIncomes(User)
  fullName: Model.Handlers.UserHandler.GetUserIncomes(Model.Entities.User)
  type: Method
  source:
    remote:
      path: Model/Handlers/UserHandler.cs
      branch: ConsoleApplication
      repo: https://github.com/Tony-Devv/Personal-Budgeting.git
    id: GetUserIncomes
    path: ../Model/Handlers/UserHandler.cs
    startLine: 193
  assemblies:
  - Model
  namespace: Model.Handlers
  summary: Retrieves all incomes for a user.
  example: []
  syntax:
    content: public Task<List<Income>> GetUserIncomes(User user)
    parameters:
    - id: user
      type: Model.Entities.User
      description: The user whose incomes are to be retrieved.
    return:
      type: System.Threading.Tasks.Task{System.Collections.Generic.List{Model.Entities.Income}}
      description: >-
        A Task&lt;List&lt;Income&gt;&gt; representing the asynchronous operation. The task result is a list of <xref href="Model.Entities.Income" data-throw-if-not-resolved="false"></xref> 

        if the user exists, or an empty list if the user does not have any incomes.
    content.vb: Public Function GetUserIncomes(user As User) As Task(Of List(Of Income))
  overload: Model.Handlers.UserHandler.GetUserIncomes*
- uid: Model.Handlers.UserHandler.GetUserBudgets(Model.Entities.User)
  commentId: M:Model.Handlers.UserHandler.GetUserBudgets(Model.Entities.User)
  id: GetUserBudgets(Model.Entities.User)
  parent: Model.Handlers.UserHandler
  langs:
  - csharp
  - vb
  name: GetUserBudgets(User)
  nameWithType: UserHandler.GetUserBudgets(User)
  fullName: Model.Handlers.UserHandler.GetUserBudgets(Model.Entities.User)
  type: Method
  source:
    remote:
      path: Model/Handlers/UserHandler.cs
      branch: ConsoleApplication
      repo: https://github.com/Tony-Devv/Personal-Budgeting.git
    id: GetUserBudgets
    path: ../Model/Handlers/UserHandler.cs
    startLine: 220
  assemblies:
  - Model
  namespace: Model.Handlers
  summary: Retrieves all budgets for a user.
  example: []
  syntax:
    content: public Task<List<Budget>> GetUserBudgets(User user)
    parameters:
    - id: user
      type: Model.Entities.User
      description: The user whose budgets are to be retrieved.
    return:
      type: System.Threading.Tasks.Task{System.Collections.Generic.List{Model.Entities.Budget}}
      description: >-
        A Task&lt;List&lt;Budget&gt;&gt; representing the asynchronous operation. The task result is a list of <xref href="Model.Entities.Budget" data-throw-if-not-resolved="false"></xref> 

        if the user exists, or an empty list if the user does not have any budgets.
    content.vb: Public Function GetUserBudgets(user As User) As Task(Of List(Of Budget))
  overload: Model.Handlers.UserHandler.GetUserBudgets*
- uid: Model.Handlers.UserHandler.GetUserExpenses(Model.Entities.User)
  commentId: M:Model.Handlers.UserHandler.GetUserExpenses(Model.Entities.User)
  id: GetUserExpenses(Model.Entities.User)
  parent: Model.Handlers.UserHandler
  langs:
  - csharp
  - vb
  name: GetUserExpenses(User)
  nameWithType: UserHandler.GetUserExpenses(User)
  fullName: Model.Handlers.UserHandler.GetUserExpenses(Model.Entities.User)
  type: Method
  source:
    remote:
      path: Model/Handlers/UserHandler.cs
      branch: ConsoleApplication
      repo: https://github.com/Tony-Devv/Personal-Budgeting.git
    id: GetUserExpenses
    path: ../Model/Handlers/UserHandler.cs
    startLine: 247
  assemblies:
  - Model
  namespace: Model.Handlers
  summary: Retrieves all expenses for a user.
  example: []
  syntax:
    content: public Task<List<Expense>> GetUserExpenses(User user)
    parameters:
    - id: user
      type: Model.Entities.User
      description: The user whose expenses are to be retrieved.
    return:
      type: System.Threading.Tasks.Task{System.Collections.Generic.List{Model.Entities.Expense}}
      description: >-
        A Task&lt;List&lt;Expense&gt;&gt; representing the asynchronous operation. The task result is a list of <xref href="Model.Entities.Expense" data-throw-if-not-resolved="false"></xref> 

        if the user exists, or an empty list if the user does not have any expenses.
    content.vb: Public Function GetUserExpenses(user As User) As Task(Of List(Of Expense))
  overload: Model.Handlers.UserHandler.GetUserExpenses*
- uid: Model.Handlers.UserHandler.GetTotalUserIncomes(System.Int32)
  commentId: M:Model.Handlers.UserHandler.GetTotalUserIncomes(System.Int32)
  id: GetTotalUserIncomes(System.Int32)
  parent: Model.Handlers.UserHandler
  langs:
  - csharp
  - vb
  name: GetTotalUserIncomes(int)
  nameWithType: UserHandler.GetTotalUserIncomes(int)
  fullName: Model.Handlers.UserHandler.GetTotalUserIncomes(int)
  type: Method
  source:
    remote:
      path: Model/Handlers/UserHandler.cs
      branch: ConsoleApplication
      repo: https://github.com/Tony-Devv/Personal-Budgeting.git
    id: GetTotalUserIncomes
    path: ../Model/Handlers/UserHandler.cs
    startLine: 274
  assemblies:
  - Model
  namespace: Model.Handlers
  summary: Retrieves the total income for a user.
  example: []
  syntax:
    content: public Task<decimal> GetTotalUserIncomes(int id)
    parameters:
    - id: id
      type: System.Int32
      description: The user ID.
    return:
      type: System.Threading.Tasks.Task{System.Decimal}
      description: >-
        A Task&lt;decimal&gt; representing the asynchronous operation. The task result is the total income 

        for the user, or <code>-1</code> if the user does not exist.
    content.vb: Public Function GetTotalUserIncomes(id As Integer) As Task(Of Decimal)
  overload: Model.Handlers.UserHandler.GetTotalUserIncomes*
  nameWithType.vb: UserHandler.GetTotalUserIncomes(Integer)
  fullName.vb: Model.Handlers.UserHandler.GetTotalUserIncomes(Integer)
  name.vb: GetTotalUserIncomes(Integer)
- uid: Model.Handlers.UserHandler.GetTotalUserSpentExpenses(System.Int32)
  commentId: M:Model.Handlers.UserHandler.GetTotalUserSpentExpenses(System.Int32)
  id: GetTotalUserSpentExpenses(System.Int32)
  parent: Model.Handlers.UserHandler
  langs:
  - csharp
  - vb
  name: GetTotalUserSpentExpenses(int)
  nameWithType: UserHandler.GetTotalUserSpentExpenses(int)
  fullName: Model.Handlers.UserHandler.GetTotalUserSpentExpenses(int)
  type: Method
  source:
    remote:
      path: Model/Handlers/UserHandler.cs
      branch: ConsoleApplication
      repo: https://github.com/Tony-Devv/Personal-Budgeting.git
    id: GetTotalUserSpentExpenses
    path: ../Model/Handlers/UserHandler.cs
    startLine: 299
  assemblies:
  - Model
  namespace: Model.Handlers
  summary: Retrieves the total expenses for a user.
  example: []
  syntax:
    content: public Task<decimal> GetTotalUserSpentExpenses(int id)
    parameters:
    - id: id
      type: System.Int32
      description: The user ID.
    return:
      type: System.Threading.Tasks.Task{System.Decimal}
      description: >-
        A Task&lt;decimal&gt; representing the asynchronous operation. The task result is the total expenses 

        for the user, or <code>-1</code> if the user does not exist.
    content.vb: Public Function GetTotalUserSpentExpenses(id As Integer) As Task(Of Decimal)
  overload: Model.Handlers.UserHandler.GetTotalUserSpentExpenses*
  nameWithType.vb: UserHandler.GetTotalUserSpentExpenses(Integer)
  fullName.vb: Model.Handlers.UserHandler.GetTotalUserSpentExpenses(Integer)
  name.vb: GetTotalUserSpentExpenses(Integer)
- uid: Model.Handlers.UserHandler.GetTotalAmountSpentOnBudget(System.Int32,System.Int32)
  commentId: M:Model.Handlers.UserHandler.GetTotalAmountSpentOnBudget(System.Int32,System.Int32)
  id: GetTotalAmountSpentOnBudget(System.Int32,System.Int32)
  parent: Model.Handlers.UserHandler
  langs:
  - csharp
  - vb
  name: GetTotalAmountSpentOnBudget(int, int)
  nameWithType: UserHandler.GetTotalAmountSpentOnBudget(int, int)
  fullName: Model.Handlers.UserHandler.GetTotalAmountSpentOnBudget(int, int)
  type: Method
  source:
    remote:
      path: Model/Handlers/UserHandler.cs
      branch: ConsoleApplication
      repo: https://github.com/Tony-Devv/Personal-Budgeting.git
    id: GetTotalAmountSpentOnBudget
    path: ../Model/Handlers/UserHandler.cs
    startLine: 325
  assemblies:
  - Model
  namespace: Model.Handlers
  summary: Retrieves the total amount spent on a specific budget by a user.
  example: []
  syntax:
    content: public Task<decimal> GetTotalAmountSpentOnBudget(int id, int budgetId)
    parameters:
    - id: id
      type: System.Int32
      description: The user ID.
    - id: budgetId
      type: System.Int32
      description: The ID of the budget.
    return:
      type: System.Threading.Tasks.Task{System.Decimal}
      description: >-
        A Task&lt;decimal&gt; representing the asynchronous operation. The task result is the total amount spent 

        on the budget, or <code>-1</code> if the user does not exist.
    content.vb: Public Function GetTotalAmountSpentOnBudget(id As Integer, budgetId As Integer) As Task(Of Decimal)
  overload: Model.Handlers.UserHandler.GetTotalAmountSpentOnBudget*
  nameWithType.vb: UserHandler.GetTotalAmountSpentOnBudget(Integer, Integer)
  fullName.vb: Model.Handlers.UserHandler.GetTotalAmountSpentOnBudget(Integer, Integer)
  name.vb: GetTotalAmountSpentOnBudget(Integer, Integer)
references:
- uid: Model.Handlers
  commentId: N:Model.Handlers
  href: Model.html
  name: Model.Handlers
  nameWithType: Model.Handlers
  fullName: Model.Handlers
  spec.csharp:
  - uid: Model
    name: Model
    href: Model.html
  - name: .
  - uid: Model.Handlers
    name: Handlers
    href: Model.Handlers.html
  spec.vb:
  - uid: Model
    name: Model
    href: Model.html
  - name: .
  - uid: Model.Handlers
    name: Handlers
    href: Model.Handlers.html
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object
  name: object
  nameWithType: object
  fullName: object
  nameWithType.vb: Object
  fullName.vb: Object
  name.vb: Object
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object)
  name: Equals(object)
  nameWithType: object.Equals(object)
  fullName: object.Equals(object)
  nameWithType.vb: Object.Equals(Object)
  fullName.vb: Object.Equals(Object)
  name.vb: Equals(Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object)
  - name: (
  - uid: System.Object
    name: object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object)
  - name: (
  - uid: System.Object
    name: Object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object-system-object)
  name: Equals(object, object)
  nameWithType: object.Equals(object, object)
  fullName: object.Equals(object, object)
  nameWithType.vb: Object.Equals(Object, Object)
  fullName.vb: Object.Equals(Object, Object)
  name.vb: Equals(Object, Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object-system-object)
  - name: (
  - uid: System.Object
    name: object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: ','
  - name: " "
  - uid: System.Object
    name: object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object-system-object)
  - name: (
  - uid: System.Object
    name: Object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: ','
  - name: " "
  - uid: System.Object
    name: Object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.gethashcode
  name: GetHashCode()
  nameWithType: object.GetHashCode()
  fullName: object.GetHashCode()
  nameWithType.vb: Object.GetHashCode()
  fullName.vb: Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.gethashcode
  - name: (
  - name: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.gethashcode
  - name: (
  - name: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.gettype
  name: GetType()
  nameWithType: object.GetType()
  fullName: object.GetType()
  nameWithType.vb: Object.GetType()
  fullName.vb: Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.gettype
  - name: (
  - name: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.gettype
  - name: (
  - name: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.memberwiseclone
  name: MemberwiseClone()
  nameWithType: object.MemberwiseClone()
  fullName: object.MemberwiseClone()
  nameWithType.vb: Object.MemberwiseClone()
  fullName.vb: Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.memberwiseclone
  - name: (
  - name: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.memberwiseclone
  - name: (
  - name: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.referenceequals
  name: ReferenceEquals(object, object)
  nameWithType: object.ReferenceEquals(object, object)
  fullName: object.ReferenceEquals(object, object)
  nameWithType.vb: Object.ReferenceEquals(Object, Object)
  fullName.vb: Object.ReferenceEquals(Object, Object)
  name.vb: ReferenceEquals(Object, Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.referenceequals
  - name: (
  - uid: System.Object
    name: object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: ','
  - name: " "
  - uid: System.Object
    name: object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.referenceequals
  - name: (
  - uid: System.Object
    name: Object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: ','
  - name: " "
  - uid: System.Object
    name: Object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: )
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.tostring
  name: ToString()
  nameWithType: object.ToString()
  fullName: object.ToString()
  nameWithType.vb: Object.ToString()
  fullName.vb: Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.tostring
  - name: (
  - name: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.tostring
  - name: (
  - name: )
- uid: System
  commentId: N:System
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system
  name: System
  nameWithType: System
  fullName: System
- uid: Model.Handlers.UserHandler
  commentId: T:Model.Handlers.UserHandler
  href: Model.Handlers.UserHandler.html
  name: UserHandler
  nameWithType: UserHandler
  fullName: Model.Handlers.UserHandler
- uid: Model.Handlers.UserHandler.#ctor*
  commentId: Overload:Model.Handlers.UserHandler.#ctor
  href: Model.Handlers.UserHandler.html#Model_Handlers_UserHandler__ctor
  name: UserHandler
  nameWithType: UserHandler.UserHandler
  fullName: Model.Handlers.UserHandler.UserHandler
  nameWithType.vb: UserHandler.New
  fullName.vb: Model.Handlers.UserHandler.New
  name.vb: New
- uid: Model.Entities.User
  commentId: T:Model.Entities.User
  parent: Model.Entities
  href: Model.Entities.User.html
  name: User
  nameWithType: User
  fullName: Model.Entities.User
- uid: Model.Handlers.UserHandler.RegisterNewUser*
  commentId: Overload:Model.Handlers.UserHandler.RegisterNewUser
  href: Model.Handlers.UserHandler.html#Model_Handlers_UserHandler_RegisterNewUser_Model_Entities_User_
  name: RegisterNewUser
  nameWithType: UserHandler.RegisterNewUser
  fullName: Model.Handlers.UserHandler.RegisterNewUser
- uid: System.Threading.Tasks.Task{Model.Entities.User}
  commentId: T:System.Threading.Tasks.Task{Model.Entities.User}
  parent: System.Threading.Tasks
  definition: System.Threading.Tasks.Task`1
  href: https://learn.microsoft.com/dotnet/api/system.threading.tasks.task-1
  name: Task<User>
  nameWithType: Task<User>
  fullName: System.Threading.Tasks.Task<Model.Entities.User>
  nameWithType.vb: Task(Of User)
  fullName.vb: System.Threading.Tasks.Task(Of Model.Entities.User)
  name.vb: Task(Of User)
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.threading.tasks.task-1
  - name: <
  - uid: Model.Entities.User
    name: User
    href: Model.Entities.User.html
  - name: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.threading.tasks.task-1
  - name: (
  - name: Of
  - name: " "
  - uid: Model.Entities.User
    name: User
    href: Model.Entities.User.html
  - name: )
- uid: Model.Entities
  commentId: N:Model.Entities
  href: Model.html
  name: Model.Entities
  nameWithType: Model.Entities
  fullName: Model.Entities
  spec.csharp:
  - uid: Model
    name: Model
    href: Model.html
  - name: .
  - uid: Model.Entities
    name: Entities
    href: Model.Entities.html
  spec.vb:
  - uid: Model
    name: Model
    href: Model.html
  - name: .
  - uid: Model.Entities
    name: Entities
    href: Model.Entities.html
- uid: System.Threading.Tasks.Task`1
  commentId: T:System.Threading.Tasks.Task`1
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.threading.tasks.task-1
  name: Task<TResult>
  nameWithType: Task<TResult>
  fullName: System.Threading.Tasks.Task<TResult>
  nameWithType.vb: Task(Of TResult)
  fullName.vb: System.Threading.Tasks.Task(Of TResult)
  name.vb: Task(Of TResult)
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.threading.tasks.task-1
  - name: <
  - name: TResult
  - name: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.threading.tasks.task-1
  - name: (
  - name: Of
  - name: " "
  - name: TResult
  - name: )
- uid: System.Threading.Tasks
  commentId: N:System.Threading.Tasks
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system
  name: System.Threading.Tasks
  nameWithType: System.Threading.Tasks
  fullName: System.Threading.Tasks
  spec.csharp:
  - uid: System
    name: System
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system
  - name: .
  - uid: System.Threading
    name: Threading
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.threading
  - name: .
  - uid: System.Threading.Tasks
    name: Tasks
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.threading.tasks
  spec.vb:
  - uid: System
    name: System
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system
  - name: .
  - uid: System.Threading
    name: Threading
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.threading
  - name: .
  - uid: System.Threading.Tasks
    name: Tasks
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.threading.tasks
- uid: Model.Handlers.UserHandler.LoginUser*
  commentId: Overload:Model.Handlers.UserHandler.LoginUser
  href: Model.Handlers.UserHandler.html#Model_Handlers_UserHandler_LoginUser_Model_Entities_User_
  name: LoginUser
  nameWithType: UserHandler.LoginUser
  fullName: Model.Handlers.UserHandler.LoginUser
- uid: Model.Handlers.UserHandler.EditUserDetails*
  commentId: Overload:Model.Handlers.UserHandler.EditUserDetails
  href: Model.Handlers.UserHandler.html#Model_Handlers_UserHandler_EditUserDetails_Model_Entities_User_
  name: EditUserDetails
  nameWithType: UserHandler.EditUserDetails
  fullName: Model.Handlers.UserHandler.EditUserDetails
- uid: Model.Handlers.UserHandler.GetUserById*
  commentId: Overload:Model.Handlers.UserHandler.GetUserById
  href: Model.Handlers.UserHandler.html#Model_Handlers_UserHandler_GetUserById_System_Int32_
  name: GetUserById
  nameWithType: UserHandler.GetUserById
  fullName: Model.Handlers.UserHandler.GetUserById
- uid: System.Int32
  commentId: T:System.Int32
  parent: System
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.int32
  name: int
  nameWithType: int
  fullName: int
  nameWithType.vb: Integer
  fullName.vb: Integer
  name.vb: Integer
- uid: Model.Handlers.UserHandler.GetUserByEmail*
  commentId: Overload:Model.Handlers.UserHandler.GetUserByEmail
  href: Model.Handlers.UserHandler.html#Model_Handlers_UserHandler_GetUserByEmail_System_String_
  name: GetUserByEmail
  nameWithType: UserHandler.GetUserByEmail
  fullName: Model.Handlers.UserHandler.GetUserByEmail
- uid: System.String
  commentId: T:System.String
  parent: System
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.string
  name: string
  nameWithType: string
  fullName: string
  nameWithType.vb: String
  fullName.vb: String
  name.vb: String
- uid: Model.Handlers.UserHandler.ChangeUserPassword*
  commentId: Overload:Model.Handlers.UserHandler.ChangeUserPassword
  href: Model.Handlers.UserHandler.html#Model_Handlers_UserHandler_ChangeUserPassword_System_String_Model_Entities_User_
  name: ChangeUserPassword
  nameWithType: UserHandler.ChangeUserPassword
  fullName: Model.Handlers.UserHandler.ChangeUserPassword
- uid: Model.Entities.Income
  commentId: T:Model.Entities.Income
  parent: Model.Entities
  href: Model.Entities.Income.html
  name: Income
  nameWithType: Income
  fullName: Model.Entities.Income
- uid: Model.Handlers.UserHandler.GetUserIncomes*
  commentId: Overload:Model.Handlers.UserHandler.GetUserIncomes
  href: Model.Handlers.UserHandler.html#Model_Handlers_UserHandler_GetUserIncomes_Model_Entities_User_
  name: GetUserIncomes
  nameWithType: UserHandler.GetUserIncomes
  fullName: Model.Handlers.UserHandler.GetUserIncomes
- uid: System.Threading.Tasks.Task{System.Collections.Generic.List{Model.Entities.Income}}
  commentId: T:System.Threading.Tasks.Task{System.Collections.Generic.List{Model.Entities.Income}}
  parent: System.Threading.Tasks
  definition: System.Threading.Tasks.Task`1
  href: https://learn.microsoft.com/dotnet/api/system.threading.tasks.task-1
  name: Task<List<Income>>
  nameWithType: Task<List<Income>>
  fullName: System.Threading.Tasks.Task<System.Collections.Generic.List<Model.Entities.Income>>
  nameWithType.vb: Task(Of List(Of Income))
  fullName.vb: System.Threading.Tasks.Task(Of System.Collections.Generic.List(Of Model.Entities.Income))
  name.vb: Task(Of List(Of Income))
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.threading.tasks.task-1
  - name: <
  - uid: System.Collections.Generic.List`1
    name: List
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.list-1
  - name: <
  - uid: Model.Entities.Income
    name: Income
    href: Model.Entities.Income.html
  - name: '>'
  - name: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.threading.tasks.task-1
  - name: (
  - name: Of
  - name: " "
  - uid: System.Collections.Generic.List`1
    name: List
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.list-1
  - name: (
  - name: Of
  - name: " "
  - uid: Model.Entities.Income
    name: Income
    href: Model.Entities.Income.html
  - name: )
  - name: )
- uid: Model.Entities.Budget
  commentId: T:Model.Entities.Budget
  parent: Model.Entities
  href: Model.Entities.Budget.html
  name: Budget
  nameWithType: Budget
  fullName: Model.Entities.Budget
- uid: Model.Handlers.UserHandler.GetUserBudgets*
  commentId: Overload:Model.Handlers.UserHandler.GetUserBudgets
  href: Model.Handlers.UserHandler.html#Model_Handlers_UserHandler_GetUserBudgets_Model_Entities_User_
  name: GetUserBudgets
  nameWithType: UserHandler.GetUserBudgets
  fullName: Model.Handlers.UserHandler.GetUserBudgets
- uid: System.Threading.Tasks.Task{System.Collections.Generic.List{Model.Entities.Budget}}
  commentId: T:System.Threading.Tasks.Task{System.Collections.Generic.List{Model.Entities.Budget}}
  parent: System.Threading.Tasks
  definition: System.Threading.Tasks.Task`1
  href: https://learn.microsoft.com/dotnet/api/system.threading.tasks.task-1
  name: Task<List<Budget>>
  nameWithType: Task<List<Budget>>
  fullName: System.Threading.Tasks.Task<System.Collections.Generic.List<Model.Entities.Budget>>
  nameWithType.vb: Task(Of List(Of Budget))
  fullName.vb: System.Threading.Tasks.Task(Of System.Collections.Generic.List(Of Model.Entities.Budget))
  name.vb: Task(Of List(Of Budget))
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.threading.tasks.task-1
  - name: <
  - uid: System.Collections.Generic.List`1
    name: List
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.list-1
  - name: <
  - uid: Model.Entities.Budget
    name: Budget
    href: Model.Entities.Budget.html
  - name: '>'
  - name: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.threading.tasks.task-1
  - name: (
  - name: Of
  - name: " "
  - uid: System.Collections.Generic.List`1
    name: List
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.list-1
  - name: (
  - name: Of
  - name: " "
  - uid: Model.Entities.Budget
    name: Budget
    href: Model.Entities.Budget.html
  - name: )
  - name: )
- uid: Model.Entities.Expense
  commentId: T:Model.Entities.Expense
  parent: Model.Entities
  href: Model.Entities.Expense.html
  name: Expense
  nameWithType: Expense
  fullName: Model.Entities.Expense
- uid: Model.Handlers.UserHandler.GetUserExpenses*
  commentId: Overload:Model.Handlers.UserHandler.GetUserExpenses
  href: Model.Handlers.UserHandler.html#Model_Handlers_UserHandler_GetUserExpenses_Model_Entities_User_
  name: GetUserExpenses
  nameWithType: UserHandler.GetUserExpenses
  fullName: Model.Handlers.UserHandler.GetUserExpenses
- uid: System.Threading.Tasks.Task{System.Collections.Generic.List{Model.Entities.Expense}}
  commentId: T:System.Threading.Tasks.Task{System.Collections.Generic.List{Model.Entities.Expense}}
  parent: System.Threading.Tasks
  definition: System.Threading.Tasks.Task`1
  href: https://learn.microsoft.com/dotnet/api/system.threading.tasks.task-1
  name: Task<List<Expense>>
  nameWithType: Task<List<Expense>>
  fullName: System.Threading.Tasks.Task<System.Collections.Generic.List<Model.Entities.Expense>>
  nameWithType.vb: Task(Of List(Of Expense))
  fullName.vb: System.Threading.Tasks.Task(Of System.Collections.Generic.List(Of Model.Entities.Expense))
  name.vb: Task(Of List(Of Expense))
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.threading.tasks.task-1
  - name: <
  - uid: System.Collections.Generic.List`1
    name: List
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.list-1
  - name: <
  - uid: Model.Entities.Expense
    name: Expense
    href: Model.Entities.Expense.html
  - name: '>'
  - name: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.threading.tasks.task-1
  - name: (
  - name: Of
  - name: " "
  - uid: System.Collections.Generic.List`1
    name: List
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.list-1
  - name: (
  - name: Of
  - name: " "
  - uid: Model.Entities.Expense
    name: Expense
    href: Model.Entities.Expense.html
  - name: )
  - name: )
- uid: Model.Handlers.UserHandler.GetTotalUserIncomes*
  commentId: Overload:Model.Handlers.UserHandler.GetTotalUserIncomes
  href: Model.Handlers.UserHandler.html#Model_Handlers_UserHandler_GetTotalUserIncomes_System_Int32_
  name: GetTotalUserIncomes
  nameWithType: UserHandler.GetTotalUserIncomes
  fullName: Model.Handlers.UserHandler.GetTotalUserIncomes
- uid: System.Threading.Tasks.Task{System.Decimal}
  commentId: T:System.Threading.Tasks.Task{System.Decimal}
  parent: System.Threading.Tasks
  definition: System.Threading.Tasks.Task`1
  href: https://learn.microsoft.com/dotnet/api/system.threading.tasks.task-1
  name: Task<decimal>
  nameWithType: Task<decimal>
  fullName: System.Threading.Tasks.Task<decimal>
  nameWithType.vb: Task(Of Decimal)
  fullName.vb: System.Threading.Tasks.Task(Of Decimal)
  name.vb: Task(Of Decimal)
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.threading.tasks.task-1
  - name: <
  - uid: System.Decimal
    name: decimal
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.decimal
  - name: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.threading.tasks.task-1
  - name: (
  - name: Of
  - name: " "
  - uid: System.Decimal
    name: Decimal
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.decimal
  - name: )
- uid: Model.Handlers.UserHandler.GetTotalUserSpentExpenses*
  commentId: Overload:Model.Handlers.UserHandler.GetTotalUserSpentExpenses
  href: Model.Handlers.UserHandler.html#Model_Handlers_UserHandler_GetTotalUserSpentExpenses_System_Int32_
  name: GetTotalUserSpentExpenses
  nameWithType: UserHandler.GetTotalUserSpentExpenses
  fullName: Model.Handlers.UserHandler.GetTotalUserSpentExpenses
- uid: Model.Handlers.UserHandler.GetTotalAmountSpentOnBudget*
  commentId: Overload:Model.Handlers.UserHandler.GetTotalAmountSpentOnBudget
  href: Model.Handlers.UserHandler.html#Model_Handlers_UserHandler_GetTotalAmountSpentOnBudget_System_Int32_System_Int32_
  name: GetTotalAmountSpentOnBudget
  nameWithType: UserHandler.GetTotalAmountSpentOnBudget
  fullName: Model.Handlers.UserHandler.GetTotalAmountSpentOnBudget
shouldSkipMarkup: true
