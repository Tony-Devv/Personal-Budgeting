{
  "api/Controller.Validators.BudgetInputValidator.html": {
    "href": "api/Controller.Validators.BudgetInputValidator.html",
    "title": "Class BudgetInputValidator | PersonalBudgeting_BackendDocs",
    "summary": "Class BudgetInputValidator Namespace Controller.Validators Assembly Controller.dll Validator class for validating `Budget` objects based on different rules for adding, updating, and deleting. public class BudgetInputValidator : AbstractValidator<Budget>, IValidator<Budget>, IValidator, IEnumerable<IValidationRule>, IEnumerable Inheritance object AbstractValidator<Budget> BudgetInputValidator Implements IValidator<Budget> IValidator IEnumerable<IValidationRule> IEnumerable Inherited Members AbstractValidator<Budget>.Validate(Budget) AbstractValidator<Budget>.ValidateAsync(Budget, CancellationToken) AbstractValidator<Budget>.Validate(ValidationContext<Budget>) AbstractValidator<Budget>.ValidateAsync(ValidationContext<Budget>, CancellationToken) AbstractValidator<Budget>.CreateDescriptor() AbstractValidator<Budget>.RuleFor<TProperty>(Expression<Func<Budget, TProperty>>) AbstractValidator<Budget>.RuleForEach<TElement>(Expression<Func<Budget, IEnumerable<TElement>>>) AbstractValidator<Budget>.RuleSet(string, Action) AbstractValidator<Budget>.When(Func<Budget, bool>, Action) AbstractValidator<Budget>.When(Func<Budget, ValidationContext<Budget>, bool>, Action) AbstractValidator<Budget>.Unless(Func<Budget, bool>, Action) AbstractValidator<Budget>.Unless(Func<Budget, ValidationContext<Budget>, bool>, Action) AbstractValidator<Budget>.WhenAsync(Func<Budget, CancellationToken, Task<bool>>, Action) AbstractValidator<Budget>.WhenAsync(Func<Budget, ValidationContext<Budget>, CancellationToken, Task<bool>>, Action) AbstractValidator<Budget>.UnlessAsync(Func<Budget, CancellationToken, Task<bool>>, Action) AbstractValidator<Budget>.UnlessAsync(Func<Budget, ValidationContext<Budget>, CancellationToken, Task<bool>>, Action) AbstractValidator<Budget>.Include(IValidator<Budget>) AbstractValidator<Budget>.Include<TValidator>(Func<Budget, TValidator>) AbstractValidator<Budget>.GetEnumerator() AbstractValidator<Budget>.PreValidate(ValidationContext<Budget>, ValidationResult) AbstractValidator<Budget>.RaiseValidationException(ValidationContext<Budget>, ValidationResult) AbstractValidator<Budget>.OnRuleAdded(IValidationRule<Budget>) AbstractValidator<Budget>.ClassLevelCascadeMode AbstractValidator<Budget>.RuleLevelCascadeMode object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors BudgetInputValidator() public BudgetInputValidator() Methods ValidateForSearch(int, string) Validates the input for searching a budget by user ID and budget name. public (bool Success, List<string> errors) ValidateForSearch(int userId, string budgetName) Parameters userId int The ID of the user searching for the budget. budgetName string The name of the budget being searched for. Returns (bool Success, List<string> errors) A tuple indicating whether the validation was successful and any error messages."
  },
  "api/Controller.Validators.ExpenseInputValidator.html": {
    "href": "api/Controller.Validators.ExpenseInputValidator.html",
    "title": "Class ExpenseInputValidator | PersonalBudgeting_BackendDocs",
    "summary": "Class ExpenseInputValidator Namespace Controller.Validators Assembly Controller.dll Validator class for validating inputs related to expense management. This class uses FluentValidation to define validation rules for various expense operations such as add, update, delete, and setting reminders. public class ExpenseInputValidator : AbstractValidator<Expense>, IValidator<Expense>, IValidator, IEnumerable<IValidationRule>, IEnumerable Inheritance object AbstractValidator<Expense> ExpenseInputValidator Implements IValidator<Expense> IValidator IEnumerable<IValidationRule> IEnumerable Inherited Members AbstractValidator<Expense>.Validate(Expense) AbstractValidator<Expense>.ValidateAsync(Expense, CancellationToken) AbstractValidator<Expense>.Validate(ValidationContext<Expense>) AbstractValidator<Expense>.ValidateAsync(ValidationContext<Expense>, CancellationToken) AbstractValidator<Expense>.CreateDescriptor() AbstractValidator<Expense>.RuleFor<TProperty>(Expression<Func<Expense, TProperty>>) AbstractValidator<Expense>.RuleForEach<TElement>(Expression<Func<Expense, IEnumerable<TElement>>>) AbstractValidator<Expense>.RuleSet(string, Action) AbstractValidator<Expense>.When(Func<Expense, bool>, Action) AbstractValidator<Expense>.When(Func<Expense, ValidationContext<Expense>, bool>, Action) AbstractValidator<Expense>.Unless(Func<Expense, bool>, Action) AbstractValidator<Expense>.Unless(Func<Expense, ValidationContext<Expense>, bool>, Action) AbstractValidator<Expense>.WhenAsync(Func<Expense, CancellationToken, Task<bool>>, Action) AbstractValidator<Expense>.WhenAsync(Func<Expense, ValidationContext<Expense>, CancellationToken, Task<bool>>, Action) AbstractValidator<Expense>.UnlessAsync(Func<Expense, CancellationToken, Task<bool>>, Action) AbstractValidator<Expense>.UnlessAsync(Func<Expense, ValidationContext<Expense>, CancellationToken, Task<bool>>, Action) AbstractValidator<Expense>.Include(IValidator<Expense>) AbstractValidator<Expense>.Include<TValidator>(Func<Expense, TValidator>) AbstractValidator<Expense>.GetEnumerator() AbstractValidator<Expense>.PreValidate(ValidationContext<Expense>, ValidationResult) AbstractValidator<Expense>.RaiseValidationException(ValidationContext<Expense>, ValidationResult) AbstractValidator<Expense>.OnRuleAdded(IValidationRule<Expense>) AbstractValidator<Expense>.ClassLevelCascadeMode AbstractValidator<Expense>.RuleLevelCascadeMode object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors ExpenseInputValidator() public ExpenseInputValidator() Methods ValidateForSearch(int, string) Validates the inputs for searching an expense based on user ID and budget name. public (bool Success, List<string> errors) ValidateForSearch(int userId, string budgetName) Parameters userId int The user ID to validate. budgetName string The budget name to validate. Returns (bool Success, List<string> errors) A tuple containing a success flag and a list of error messages if validation fails."
  },
  "api/Controller.Validators.IncomeValidator.html": {
    "href": "api/Controller.Validators.IncomeValidator.html",
    "title": "Class IncomeValidator | PersonalBudgeting_BackendDocs",
    "summary": "Class IncomeValidator Namespace Controller.Validators Assembly Controller.dll Validates Income entities for various operations like Add, Update, Delete, and Search. public class IncomeValidator : AbstractValidator<Income>, IValidator<Income>, IValidator, IEnumerable<IValidationRule>, IEnumerable Inheritance object AbstractValidator<Income> IncomeValidator Implements IValidator<Income> IValidator IEnumerable<IValidationRule> IEnumerable Inherited Members AbstractValidator<Income>.Validate(Income) AbstractValidator<Income>.ValidateAsync(Income, CancellationToken) AbstractValidator<Income>.Validate(ValidationContext<Income>) AbstractValidator<Income>.ValidateAsync(ValidationContext<Income>, CancellationToken) AbstractValidator<Income>.CreateDescriptor() AbstractValidator<Income>.RuleFor<TProperty>(Expression<Func<Income, TProperty>>) AbstractValidator<Income>.RuleForEach<TElement>(Expression<Func<Income, IEnumerable<TElement>>>) AbstractValidator<Income>.RuleSet(string, Action) AbstractValidator<Income>.When(Func<Income, bool>, Action) AbstractValidator<Income>.When(Func<Income, ValidationContext<Income>, bool>, Action) AbstractValidator<Income>.Unless(Func<Income, bool>, Action) AbstractValidator<Income>.Unless(Func<Income, ValidationContext<Income>, bool>, Action) AbstractValidator<Income>.WhenAsync(Func<Income, CancellationToken, Task<bool>>, Action) AbstractValidator<Income>.WhenAsync(Func<Income, ValidationContext<Income>, CancellationToken, Task<bool>>, Action) AbstractValidator<Income>.UnlessAsync(Func<Income, CancellationToken, Task<bool>>, Action) AbstractValidator<Income>.UnlessAsync(Func<Income, ValidationContext<Income>, CancellationToken, Task<bool>>, Action) AbstractValidator<Income>.Include(IValidator<Income>) AbstractValidator<Income>.Include<TValidator>(Func<Income, TValidator>) AbstractValidator<Income>.GetEnumerator() AbstractValidator<Income>.PreValidate(ValidationContext<Income>, ValidationResult) AbstractValidator<Income>.RaiseValidationException(ValidationContext<Income>, ValidationResult) AbstractValidator<Income>.OnRuleAdded(IValidationRule<Income>) AbstractValidator<Income>.ClassLevelCascadeMode AbstractValidator<Income>.RuleLevelCascadeMode object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors IncomeValidator() Initializes validation rules for adding, updating, and deleting income records. public IncomeValidator() Methods ValidateForSearch(int, string) Validates the parameters for searching income records by user ID and income source name. public (bool Success, List<string> Errors) ValidateForSearch(int userId, string incomeSourceName) Parameters userId int The user's unique identifier. incomeSourceName string The name of the income source to search for. Returns (bool Success, List<string> errors) A tuple containing a success flag and a list of error messages (if any)."
  },
  "api/Controller.Validators.UserInputValidator.html": {
    "href": "api/Controller.Validators.UserInputValidator.html",
    "title": "Class UserInputValidator | PersonalBudgeting_BackendDocs",
    "summary": "Class UserInputValidator Namespace Controller.Validators Assembly Controller.dll Validator class for validating user input data for various user-related operations such as registration, login, and profile editing. Uses FluentValidation to define validation rules for different user actions. public class UserInputValidator : AbstractValidator<User>, IValidator<User>, IValidator, IEnumerable<IValidationRule>, IEnumerable Inheritance object AbstractValidator<User> UserInputValidator Implements IValidator<User> IValidator IEnumerable<IValidationRule> IEnumerable Inherited Members AbstractValidator<User>.Validate(User) AbstractValidator<User>.ValidateAsync(User, CancellationToken) AbstractValidator<User>.Validate(ValidationContext<User>) AbstractValidator<User>.ValidateAsync(ValidationContext<User>, CancellationToken) AbstractValidator<User>.CreateDescriptor() AbstractValidator<User>.RuleFor<TProperty>(Expression<Func<User, TProperty>>) AbstractValidator<User>.RuleForEach<TElement>(Expression<Func<User, IEnumerable<TElement>>>) AbstractValidator<User>.RuleSet(string, Action) AbstractValidator<User>.When(Func<User, bool>, Action) AbstractValidator<User>.When(Func<User, ValidationContext<User>, bool>, Action) AbstractValidator<User>.Unless(Func<User, bool>, Action) AbstractValidator<User>.Unless(Func<User, ValidationContext<User>, bool>, Action) AbstractValidator<User>.WhenAsync(Func<User, CancellationToken, Task<bool>>, Action) AbstractValidator<User>.WhenAsync(Func<User, ValidationContext<User>, CancellationToken, Task<bool>>, Action) AbstractValidator<User>.UnlessAsync(Func<User, CancellationToken, Task<bool>>, Action) AbstractValidator<User>.UnlessAsync(Func<User, ValidationContext<User>, CancellationToken, Task<bool>>, Action) AbstractValidator<User>.Include(IValidator<User>) AbstractValidator<User>.Include<TValidator>(Func<User, TValidator>) AbstractValidator<User>.GetEnumerator() AbstractValidator<User>.PreValidate(ValidationContext<User>, ValidationResult) AbstractValidator<User>.RaiseValidationException(ValidationContext<User>, ValidationResult) AbstractValidator<User>.OnRuleAdded(IValidationRule<User>) AbstractValidator<User>.ClassLevelCascadeMode AbstractValidator<User>.RuleLevelCascadeMode object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors UserInputValidator() Initializes a new instance of the UserInputValidator class. Defines validation rules for various user actions such as registration, login, profile editing, password change, and data retrieval. public UserInputValidator() Methods ValidateSingleString_ForPassword(string) Validates a single string (e.g., a password) for certain conditions. public (bool Success, List<string> Errors) ValidateSingleString_ForPassword(string input) Parameters input string The string input to validate. Returns (bool Success, List<string> errors) A tuple containing a boolean indicating whether the validation was successful, and a list of error messages if validation failed."
  },
  "api/Controller.Validators.html": {
    "href": "api/Controller.Validators.html",
    "title": "Namespace Controller.Validators | PersonalBudgeting_BackendDocs",
    "summary": "Namespace Controller.Validators Classes BudgetInputValidator Validator class for validating `Budget` objects based on different rules for adding, updating, and deleting. ExpenseInputValidator Validator class for validating inputs related to expense management. This class uses FluentValidation to define validation rules for various expense operations such as add, update, delete, and setting reminders. IncomeValidator Validates Income entities for various operations like Add, Update, Delete, and Search. UserInputValidator Validator class for validating user input data for various user-related operations such as registration, login, and profile editing. Uses FluentValidation to define validation rules for different user actions."
  },
  "api/Model.ApplicationDbContext.html": {
    "href": "api/Model.ApplicationDbContext.html",
    "title": "Class ApplicationDbContext | PersonalBudgeting_BackendDocs",
    "summary": "Class ApplicationDbContext Namespace Model Assembly Model.dll Represents the database context for the Personal Budgeting application. public class ApplicationDbContext : DbContext, IInfrastructure<IServiceProvider>, IDbContextDependencies, IDbSetCache, IDbContextPoolable, IResettableService, IDisposable, IAsyncDisposable Inheritance object DbContext ApplicationDbContext Implements IInfrastructure<IServiceProvider> IDbContextDependencies IDbSetCache IDbContextPoolable IResettableService IDisposable IAsyncDisposable Inherited Members DbContext.Set<TEntity>() DbContext.Set<TEntity>(string) DbContext.ConfigureConventions(ModelConfigurationBuilder) DbContext.OnModelCreating(ModelBuilder) DbContext.SaveChanges() DbContext.SaveChanges(bool) DbContext.SaveChangesAsync(CancellationToken) DbContext.SaveChangesAsync(bool, CancellationToken) DbContext.Dispose() DbContext.DisposeAsync() DbContext.Entry<TEntity>(TEntity) DbContext.Entry(object) DbContext.Add<TEntity>(TEntity) DbContext.AddAsync<TEntity>(TEntity, CancellationToken) DbContext.Attach<TEntity>(TEntity) DbContext.Update<TEntity>(TEntity) DbContext.Remove<TEntity>(TEntity) DbContext.Add(object) DbContext.AddAsync(object, CancellationToken) DbContext.Attach(object) DbContext.Update(object) DbContext.Remove(object) DbContext.AddRange(params object[]) DbContext.AddRangeAsync(params object[]) DbContext.AttachRange(params object[]) DbContext.UpdateRange(params object[]) DbContext.RemoveRange(params object[]) DbContext.AddRange(IEnumerable<object>) DbContext.AddRangeAsync(IEnumerable<object>, CancellationToken) DbContext.AttachRange(IEnumerable<object>) DbContext.UpdateRange(IEnumerable<object>) DbContext.RemoveRange(IEnumerable<object>) DbContext.Find(Type, params object[]) DbContext.FindAsync(Type, params object[]) DbContext.FindAsync(Type, object[], CancellationToken) DbContext.Find<TEntity>(params object[]) DbContext.FindAsync<TEntity>(params object[]) DbContext.FindAsync<TEntity>(object[], CancellationToken) DbContext.FromExpression<TResult>(Expression<Func<IQueryable<TResult>>>) DbContext.Database DbContext.ChangeTracker DbContext.Model DbContext.ContextId DbContext.SavingChanges DbContext.SavedChanges DbContext.SaveChangesFailed object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Remarks This class serves as the primary point of interaction with the underlying SQL Server database. It manages the connection to the database and provides access to entity sets for all application entities. Properties Budgets Gets or sets the DbSet of Budget entities. public DbSet<Budget> Budgets { get; set; } Property Value DbSet<Budget> A DbSet that can be used to query and save instances of Budget. Remarks Represents the \"Budget\" table in the database. This property enables CRUD operations on Budget entities. Expenses Gets or sets the DbSet of Expense entities. public DbSet<Expense> Expenses { get; set; } Property Value DbSet<Expense> A DbSet that can be used to query and save instances of Expense. Remarks Represents the \"Expense\" table in the database. This property enables CRUD operations on Expense entities. Incomes Gets or sets the DbSet of Income entities. public DbSet<Income> Incomes { get; set; } Property Value DbSet<Income> A DbSet that can be used to query and save instances of Income. Remarks Represents the \"Income\" table in the database. This property enables CRUD operations on Income entities. Users Gets or sets the DbSet of User entities. public DbSet<User> Users { get; set; } Property Value DbSet<User> A DbSet that can be used to query and save instances of User. Remarks Represents the \"User\" table in the database. This property enables CRUD operations on User entities. Methods OnConfiguring(DbContextOptionsBuilder) Configures the database connection to be used for this context. protected override void OnConfiguring(DbContextOptionsBuilder optionsBuilder) Parameters optionsBuilder DbContextOptionsBuilder A builder used to create or modify options for this context. Remarks This method is called for each instance of the context that is created. The SQL Server provider is configured with the connection string defined in this class."
  },
  "api/Model.DbContextFactory.html": {
    "href": "api/Model.DbContextFactory.html",
    "title": "Class DbContextFactory | PersonalBudgeting_BackendDocs",
    "summary": "Class DbContextFactory Namespace Model Assembly Model.dll Factory Pattern to Create ApplicationDbContext Variable public class DbContextFactory Inheritance object DbContextFactory Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Remarks Work as a way to facilitate the async operations since the dbcotnext itself is not thread safe its being used in the repositories, almost any operation will create a DbContext to ensure that its thread safe Methods CreateDbContext() public ApplicationDbContext CreateDbContext() Returns ApplicationDbContext returns a specific DbContext which is the ApplicationDbContext"
  },
  "api/Model.Entities.Budget.html": {
    "href": "api/Model.Entities.Budget.html",
    "title": "Class Budget | PersonalBudgeting_BackendDocs",
    "summary": "Class Budget Namespace Model.Entities Assembly Model.dll Represents a budget entity in the system. it's being used by the entityFramework to represent the budgets records [Table(\"Budget\")] public class Budget Inheritance object Budget Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Remarks This class maps to the \"Budget\" table in the database and maintains relationship with the User entity through a foreign key. Properties BudgetName Gets or sets the name of the budget. public string BudgetName { get; set; } Property Value string The budget name. Maximum length is 100 characters. Remarks Maximum Length is 100 chars, more than this will make an overflow Id Gets or sets the unique identifier for the budget. [Key] public int Id { get; set; } Property Value int An integer that uniquely identifies the budget. Remarks Can't Be 0 or Negative if your performing update,delete,read operations TotalAmountRequired Gets or sets the total amount required for this budget. public decimal TotalAmountRequired { get; set; } Property Value decimal The total amount required. Can have up to 10 digits. Remarks Maximum digits allowed is 6 User Gets or sets the associated user entity. [ForeignKey(\"UserId\")] public User? User { get; set; } Property Value User The user who owns this budget. Can be null. Remarks Navigation Property that acts as many-to-one relationship in the database, facilitate the operations, not loaded for all times UserId Gets or sets the identifier of the user who owns this budget. public int UserId { get; set; } Property Value int The user ID. This field is required and cannot be empty. Remarks Can't Be 0 or Negative if your performing update,delete,read operations Methods ToString() Returns a string representation of the Budget object. public override string ToString() Returns string A string containing the Budget's properties and their values."
  },
  "api/Model.Entities.Expense.html": {
    "href": "api/Model.Entities.Expense.html",
    "title": "Class Expense | PersonalBudgeting_BackendDocs",
    "summary": "Class Expense Namespace Model.Entities Assembly Model.dll Represents an expense entity in the system. It's being used by EntityFramework to represent the expenses records. [Table(\"Expense\")] public class Expense Inheritance object Expense Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Remarks This class maps to the \"Expense\" table in the database and maintains relationships with both User and Budget entities through foreign keys. Properties Budget Gets or sets the associated budget entity. [ForeignKey(\"BudgetId\")] public Budget Budget { get; set; } Property Value Budget The budget associated with this expense. Remarks Navigation property that acts as many-to-one relationship in the database, facilitates the operations, not loaded for all times. BudgetId Gets or sets the identifier of the budget associated with this expense. public int BudgetId { get; set; } Property Value int The budget ID. This field is required and cannot be empty. Remarks Can't be 0 or negative if you're performing update, delete, or read operations. DateCycle Gets or sets the date cycle for this expense. public DateTime DateCycle { get; set; } Property Value DateTime The date cycle when this expense occurs. ExpenseName Gets or sets the name of the expense. public string ExpenseName { get; set; } Property Value string The expense name. Remarks Maximum length is 100 chars, more than this will make an overflow. Id Gets or sets the unique identifier for the expense. [Key] public int Id { get; set; } Property Value int An integer that uniquely identifies the expense. Remarks Can't be 0 or negative if you're performing update, delete, or read operations. ReminderTime Gets or sets the reminder time for this expense. public DateTime? ReminderTime { get; set; } Property Value DateTime? The reminder time. Can be null if no reminder is set. RequiredAmount Gets or sets the amount required for this expense. public decimal RequiredAmount { get; set; } Property Value decimal The required amount for this expense. Remarks Maximum digits allowed is 6. SpentAmount Gets or sets the amount that has been spent for this expense. public decimal SpentAmount { get; set; } Property Value decimal The amount that has been spent. Remarks Maximum digits allowed is 6. User Gets or sets the associated user entity. [ForeignKey(\"UserId\")] public User User { get; set; } Property Value User The user who owns this expense. Remarks Navigation property that acts as many-to-one relationship in the database, facilitates the operations, not loaded for all times. UserId Gets or sets the identifier of the user who owns this expense. public int UserId { get; set; } Property Value int The user ID. This field is required and cannot be empty. Remarks Can't be 0 or negative if you're performing update, delete, or read operations. Methods ToString() Returns a string representation of the Expense object. public override string ToString() Returns string A string containing the Expense's properties and their values."
  },
  "api/Model.Entities.Income.html": {
    "href": "api/Model.Entities.Income.html",
    "title": "Class Income | PersonalBudgeting_BackendDocs",
    "summary": "Class Income Namespace Model.Entities Assembly Model.dll Represents an income entity in the system. It's being used by EntityFramework to represent the income records. [Table(\"Income\")] public class Income Inheritance object Income Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Remarks This class maps to the \"Income\" table in the database and maintains relationship with the User entity through a foreign key. Properties Amount Gets or sets the amount of the income. public decimal Amount { get; set; } Property Value decimal The monetary amount of this income. Remarks Maximum digits allowed is 6. Id Gets or sets the unique identifier for the income. [Key] public int Id { get; set; } Property Value int An integer that uniquely identifies the income. Remarks Can't be 0 or negative if you're performing update, delete, or read operations. IncomeDate Gets or sets the date when this income was received. public DateTime IncomeDate { get; set; } Property Value DateTime The date when this income was received or recorded. IncomeSourceName Gets or sets the name of the income source. public string IncomeSourceName { get; set; } Property Value string The name of the source from which this income was received. Remarks Maximum length is 100 chars, more than this will make an overflow. User Gets or sets the associated user entity. [ForeignKey(\"UserId\")] public User User { get; set; } Property Value User The user who owns this income. Remarks Navigation property that acts as many-to-one relationship in the database, facilitates the operations, not loaded for all times. UserId Gets or sets the identifier of the user who owns this income. public int UserId { get; set; } Property Value int The user ID. This field is required and cannot be empty. Remarks Can't be 0 or negative if you're performing update, delete, or read operations. Methods ToString() Returns a string representation of the Income object. public override string ToString() Returns string A string containing the Income's properties and their values, with the Amount formatted as currency and Date formatted as yyyy-MM-dd."
  },
  "api/Model.Entities.User.html": {
    "href": "api/Model.Entities.User.html",
    "title": "Class User | PersonalBudgeting_BackendDocs",
    "summary": "Class User Namespace Model.Entities Assembly Model.dll Represents a user entity in the system. It's being used by EntityFramework to represent the user records. [Table(\"User\")] public class User Inheritance object User Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Remarks This class maps to the \"User\" table in the database and maintains relationships with Budget, Expense, and Income entities. Properties Budgets Gets or sets the collection of budgets associated with this user. public ICollection<Budget> Budgets { get; set; } Property Value ICollection<Budget> A collection of Budget entities owned by this user. Remarks Navigation property that acts as one-to-many relationship in the database, facilitates the operations, not loaded for all times. Email Gets or sets the email address of the user. public string Email { get; set; } Property Value string The email address used for communication and account recovery. Remarks Maximum length is 100 chars, more than this will make an overflow. Expenses Gets or sets the collection of expenses associated with this user. public ICollection<Expense> Expenses { get; set; } Property Value ICollection<Expense> A collection of Expense entities owned by this user. Remarks Navigation property that acts as one-to-many relationship in the database, facilitates the operations, not loaded for all times. Id Gets or sets the unique identifier for the user. [Key] public int Id { get; set; } Property Value int An integer that uniquely identifies the user. Remarks Can't be 0 or negative if you're performing update, delete, or read operations. Incomes Gets or sets the collection of incomes associated with this user. public ICollection<Income> Incomes { get; set; } Property Value ICollection<Income> A collection of Income entities owned by this user. Remarks Navigation property that acts as one-to-many relationship in the database, facilitates the operations, not loaded for all times. Password Gets or sets the password for the user account. public string Password { get; set; } Property Value string The hashed password for user authentication. Remarks Maximum length is 100 chars, more than this will make an overflow. This should store a securely hashed version of the password, not plain text. PhoneNumber Gets or sets the phone number of the user. public string PhoneNumber { get; set; } Property Value string The phone number used for communication and account verification. Remarks Maximum length is 100 chars, more than this will make an overflow. UserName Gets or sets the username of the user. public string UserName { get; set; } Property Value string The username used for identification and login. Remarks Maximum length is 100 chars, more than this will make an overflow. Methods ToString() Returns a string representation of the User object. public override string ToString() Returns string A string containing the User's properties and their values."
  },
  "api/Model.Entities.html": {
    "href": "api/Model.Entities.html",
    "title": "Namespace Model.Entities | PersonalBudgeting_BackendDocs",
    "summary": "Namespace Model.Entities Classes Budget Represents a budget entity in the system. it's being used by the entityFramework to represent the budgets records Expense Represents an expense entity in the system. It's being used by EntityFramework to represent the expenses records. Income Represents an income entity in the system. It's being used by EntityFramework to represent the income records. User Represents a user entity in the system. It's being used by EntityFramework to represent the user records."
  },
  "api/Model.Handlers.BudgetHandler.html": {
    "href": "api/Model.Handlers.BudgetHandler.html",
    "title": "Class BudgetHandler | PersonalBudgeting_BackendDocs",
    "summary": "Class BudgetHandler Namespace Model.Handlers Assembly Model.dll Handler class responsible for managing budget-related operations such as adding, deleting, updating, and retrieving budgets. public class BudgetHandler Inheritance object BudgetHandler Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors BudgetHandler() Initializes a new instance of the BudgetHandler class. public BudgetHandler() Methods AddNewBudget(Budget) Adds a new budget record to the repository. public Task<int> AddNewBudget(Budget budget) Parameters budget Budget The budget to be added. Returns Task<int> A Task<int> representing the asynchronous operation. The task result is the ID of the added budget. DeleteBudget(Budget) Deletes a budget record from the repository. public Task<int> DeleteBudget(Budget budget) Parameters budget Budget The budget to be deleted. Returns Task<int> A Task<int> representing the asynchronous operation. The task result is the ID of the deleted budget, or -1 if the budget does not exist. GetBudgetByName(int, string) Retrieves a budget record by its name. public Task<Budget?> GetBudgetByName(int userId, string budgetName) Parameters userId int The user ID whose budget is being retrieved. budgetName string The name of the budget to retrieve. Returns Task<Budget> A Task<Budget?> representing the asynchronous operation. The task result is the budget found, or null if no budget with the specified name exists. UpdateBudget(Budget) Updates an existing budget record with new values. public Task<Budget?> UpdateBudget(Budget newValues) Parameters newValues Budget The new values for the budget. Returns Task<Budget> A Task<Budget?> representing the asynchronous operation. The task result is the updated budget, or null if the budget could not be found or updated."
  },
  "api/Model.Handlers.ExpenseHandler.html": {
    "href": "api/Model.Handlers.ExpenseHandler.html",
    "title": "Class ExpenseHandler | PersonalBudgeting_BackendDocs",
    "summary": "Class ExpenseHandler Namespace Model.Handlers Assembly Model.dll Handler class responsible for managing expense-related operations such as adding, deleting, updating, searching, and setting reminders for expenses. public class ExpenseHandler Inheritance object ExpenseHandler Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors ExpenseHandler() Initializes a new instance of the ExpenseHandler class. public ExpenseHandler() Methods AddNewExpense(Expense) Adds a new expense record to the repository. public Task<int> AddNewExpense(Expense expense) Parameters expense Expense The expense to be added. Returns Task<int> A Task<int> representing the asynchronous operation. The task result is the ID of the added expense. DeleteExpense(Expense) Deletes an expense record from the repository. public Task<int> DeleteExpense(Expense expense) Parameters expense Expense The expense to be deleted. Returns Task<int> A Task<int> representing the asynchronous operation. The task result is the ID of the deleted expense, or -1 if the expense does not exist. GetExpensesThatHasReminders(int) Retrieves all expenses that have reminders set. public Task<List<Expense>> GetExpensesThatHasReminders(int userId) Parameters userId int The user ID whose expenses with reminders are being retrieved. Returns Task<List<Expense>> A Task<List<Expense>> representing the asynchronous operation. The task result is a list of expenses that have reminders set, or an empty list if no such expenses exist. SearchExpenseByName(int, string) Searches for an expense record by its name. public Task<Expense?> SearchExpenseByName(int userId, string expenseName) Parameters userId int The user ID whose expense is being searched. expenseName string The name of the expense to search for. Returns Task<Expense> A Task<Expense?> representing the asynchronous operation. The task result is the expense found, or null if no expense with the specified name exists. SetExpenseWithReminder(Expense, DateTime) Sets a reminder for a specific expense. public Task<bool> SetExpenseWithReminder(Expense expense, DateTime time) Parameters expense Expense The expense for which the reminder is being set. time DateTime The time when the reminder should be triggered. Returns Task<bool> A Task<bool> representing the asynchronous operation. The task result is true if the reminder was successfully set, or false if there was an error. UpdateExpense(Expense) Updates an existing expense record with new values. public Task<Expense?> UpdateExpense(Expense newValues) Parameters newValues Expense The new values for the expense. Returns Task<Expense> A Task<Expense?> representing the asynchronous operation. The task result is the updated expense, or null if the expense could not be found or updated."
  },
  "api/Model.Handlers.IncomeHandler.html": {
    "href": "api/Model.Handlers.IncomeHandler.html",
    "title": "Class IncomeHandler | PersonalBudgeting_BackendDocs",
    "summary": "Class IncomeHandler Namespace Model.Handlers Assembly Model.dll Handler class responsible for managing income-related operations such as adding, deleting, updating, and searching incomes. public class IncomeHandler Inheritance object IncomeHandler Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors IncomeHandler() Initializes a new instance of the IncomeHandler class. public IncomeHandler() Methods AddNewIncome(Income) Adds a new income record to the repository. public Task<int> AddNewIncome(Income income) Parameters income Income The income to be added. Returns Task<int> A Task<int> representing the asynchronous operation. The task result is the ID of the added income. DeleteIncome(Income) Deletes an income record from the repository. public Task<int> DeleteIncome(Income income) Parameters income Income The income to be deleted. Returns Task<int> A Task<int> representing the asynchronous operation. The task result is the ID of the deleted income, or -1 if the income does not exist. SearchIncomeBySourceName(int, string) Searches for an income record by its source name. public Task<Income?> SearchIncomeBySourceName(int userId, string incomeSource) Parameters userId int The user ID whose income is being searched. incomeSource string The source name of the income to search for. Returns Task<Income> A Task<Income?> representing the asynchronous operation. The task result is the income found, or null if no income with the specified source name exists. UpdateIncome(Income) Updates an existing income record with new values. public Task<Income?> UpdateIncome(Income newValues) Parameters newValues Income The new values for the income. Returns Task<Income> A Task<Income?> representing the asynchronous operation. The task result is the updated income, or null if the income could not be found or updated."
  },
  "api/Model.Handlers.UserHandler.html": {
    "href": "api/Model.Handlers.UserHandler.html",
    "title": "Class UserHandler | PersonalBudgeting_BackendDocs",
    "summary": "Class UserHandler Namespace Model.Handlers Assembly Model.dll Handler class responsible for managing user-related operations such as registration, login, password change, and retrieving user details. public class UserHandler Inheritance object UserHandler Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors UserHandler() Initializes a new instance of the UserHandler class. public UserHandler() Methods ChangeUserPassword(string, User) Changes the password for a user after verifying the current password. public Task<User?> ChangeUserPassword(string newPassword, User user) Parameters newPassword string The new password to set. user User The user whose password is to be changed. Returns Task<User> A Task<User?> representing the asynchronous operation. The task result is the User if the password change is successful, or null if the old password is incorrect or the user does not exist. EditUserDetails(User) Edits the details of an existing user. public Task<User?> EditUserDetails(User user) Parameters user User The user whose details need to be updated. Returns Task<User> A Task<User?> representing the asynchronous operation. The task result is the updated User, or null if the user does not exist. GetTotalAmountSpentOnBudget(int, int) Retrieves the total amount spent on a specific budget by a user. public Task<decimal> GetTotalAmountSpentOnBudget(int id, int budgetId) Parameters id int The user ID. budgetId int The ID of the budget. Returns Task<decimal> A Task<decimal> representing the asynchronous operation. The task result is the total amount spent on the budget, or -1 if the user does not exist. GetTotalUserIncomes(int) Retrieves the total income for a user. public Task<decimal> GetTotalUserIncomes(int id) Parameters id int The user ID. Returns Task<decimal> A Task<decimal> representing the asynchronous operation. The task result is the total income for the user, or -1 if the user does not exist. GetTotalUserSpentExpenses(int) Retrieves the total expenses for a user. public Task<decimal> GetTotalUserSpentExpenses(int id) Parameters id int The user ID. Returns Task<decimal> A Task<decimal> representing the asynchronous operation. The task result is the total expenses for the user, or -1 if the user does not exist. GetUserBudgets(User) Retrieves all budgets for a user. public Task<List<Budget>> GetUserBudgets(User user) Parameters user User The user whose budgets are to be retrieved. Returns Task<List<Budget>> A Task<List<Budget>> representing the asynchronous operation. The task result is a list of Budget if the user exists, or an empty list if the user does not have any budgets. GetUserByEmail(string) Retrieves a user by their email. public Task<User?> GetUserByEmail(string email) Parameters email string The email of the user to retrieve. Returns Task<User> A Task<User?> representing the asynchronous operation. The task result is the User if found, or null if the user does not exist. GetUserById(int) Retrieves a user by their ID. public Task<User?> GetUserById(int id) Parameters id int The ID of the user to retrieve. Returns Task<User> A Task<User?> representing the asynchronous operation. The task result is the User if found, or null if the user does not exist. GetUserExpenses(User) Retrieves all expenses for a user. public Task<List<Expense>> GetUserExpenses(User user) Parameters user User The user whose expenses are to be retrieved. Returns Task<List<Expense>> A Task<List<Expense>> representing the asynchronous operation. The task result is a list of Expense if the user exists, or an empty list if the user does not have any expenses. GetUserIncomes(User) Retrieves all incomes for a user. public Task<List<Income>> GetUserIncomes(User user) Parameters user User The user whose incomes are to be retrieved. Returns Task<List<Income>> A Task<List<Income>> representing the asynchronous operation. The task result is a list of Income if the user exists, or an empty list if the user does not have any incomes. LoginUser(User) Logs in a user by verifying the email and password, returning the corresponding user if credentials are valid. public Task<User?> LoginUser(User user) Parameters user User The user attempting to log in. Returns Task<User> A Task<User?> representing the asynchronous operation. The task result is the User if the login is successful, or null if the credentials are invalid. RegisterNewUser(User) Registers a new user by checking if the user already exists, hashing the password, and saving the user to the repository. public Task<User?> RegisterNewUser(User user) Parameters user User The user to be registered. Returns Task<User> A Task<User?> representing the asynchronous operation. The task result is the created User if the registration is successful, or null if the user already exists."
  },
  "api/Model.Handlers.html": {
    "href": "api/Model.Handlers.html",
    "title": "Namespace Model.Handlers | PersonalBudgeting_BackendDocs",
    "summary": "Namespace Model.Handlers Classes BudgetHandler Handler class responsible for managing budget-related operations such as adding, deleting, updating, and retrieving budgets. ExpenseHandler Handler class responsible for managing expense-related operations such as adding, deleting, updating, searching, and setting reminders for expenses. IncomeHandler Handler class responsible for managing income-related operations such as adding, deleting, updating, and searching incomes. UserHandler Handler class responsible for managing user-related operations such as registration, login, password change, and retrieving user details."
  },
  "api/Model.Interfaces.IBudgetRepository.html": {
    "href": "api/Model.Interfaces.IBudgetRepository.html",
    "title": "Interface IBudgetRepository | PersonalBudgeting_BackendDocs",
    "summary": "Interface IBudgetRepository Namespace Model.Interfaces Assembly Model.dll Provides data access methods specific to budgets, extending the generic repository for Budget. public interface IBudgetRepository : IRepository<Budget> Inherited Members IRepository<Budget>.Add(Budget) IRepository<Budget>.Update(Budget) IRepository<Budget>.Delete(Budget) IRepository<Budget>.GetById(int) IRepository<Budget>.GetAll() IRepository<Budget>.CheckExist(int) Methods GetBudgetByName(int, string) Retrieves a budget by its name for a specific user. Task<Budget?> GetBudgetByName(int userId, string budgetName) Parameters userId int The ID of the user who owns the budget. budgetName string The name of the budget to retrieve. Returns Task<Budget> A task that returns the Budget if found; otherwise, null."
  },
  "api/Model.Interfaces.IExpenseRepository.html": {
    "href": "api/Model.Interfaces.IExpenseRepository.html",
    "title": "Interface IExpenseRepository | PersonalBudgeting_BackendDocs",
    "summary": "Interface IExpenseRepository Namespace Model.Interfaces Assembly Model.dll Provides data access methods specific to expenses, extending the generic repository for Expense. public interface IExpenseRepository : IRepository<Expense> Inherited Members IRepository<Expense>.Add(Expense) IRepository<Expense>.Update(Expense) IRepository<Expense>.Delete(Expense) IRepository<Expense>.GetById(int) IRepository<Expense>.GetAll() IRepository<Expense>.CheckExist(int) Methods GetAllThatHasReminder(int) Retrieves all expenses that have an active reminder set for a specific user. Task<List<Expense>> GetAllThatHasReminder(int userId) Parameters userId int The ID of the user whose expenses to retrieve. Returns Task<List<Expense>> A task that returns a list of expenses with reminders set. GetExpenseByName(int, string) Retrieves an expense by its name for a specific user. Task<Expense?> GetExpenseByName(int userId, string expenseName) Parameters userId int The ID of the user who owns the expense. expenseName string The name of the expense to retrieve. Returns Task<Expense> A task that returns the Expense if found; otherwise, null. SetReminderTime(Expense, DateTime) Sets a reminder time for a specific expense. Task<bool> SetReminderTime(Expense expense, DateTime time) Parameters expense Expense The expense to set the reminder for. time DateTime The time at which the reminder should trigger. Returns Task<bool> A task that returns true if the reminder was successfully set; otherwise, false."
  },
  "api/Model.Interfaces.IIncomeRepository.html": {
    "href": "api/Model.Interfaces.IIncomeRepository.html",
    "title": "Interface IIncomeRepository | PersonalBudgeting_BackendDocs",
    "summary": "Interface IIncomeRepository Namespace Model.Interfaces Assembly Model.dll Provides data access methods specific to incomes, extending the generic repository for Income. public interface IIncomeRepository : IRepository<Income> Inherited Members IRepository<Income>.Add(Income) IRepository<Income>.Update(Income) IRepository<Income>.Delete(Income) IRepository<Income>.GetById(int) IRepository<Income>.GetAll() IRepository<Income>.CheckExist(int) Methods GetIncomeBySourceName(int, string) Retrieves an income by its source name for a specific user. Task<Income?> GetIncomeBySourceName(int userId, string sourceName) Parameters userId int The ID of the user who owns the income. sourceName string The name of the income source to retrieve. Returns Task<Income> A task that returns the Income if found; otherwise, null."
  },
  "api/Model.Interfaces.IPasswordHasher.html": {
    "href": "api/Model.Interfaces.IPasswordHasher.html",
    "title": "Interface IPasswordHasher | PersonalBudgeting_BackendDocs",
    "summary": "Interface IPasswordHasher Namespace Model.Interfaces Assembly Model.dll Defines methods for hashing and verifying passwords. public interface IPasswordHasher Methods Hash(string) Hashes the provided plain text password. Task<string> Hash(string plainText) Parameters plainText string The plain text password to hash. Returns Task<string> A task that returns the hashed password as a string. Verify(string, string) Verifies if the provided plain text password matches the hashed password. Task<bool> Verify(string hashedPassword, string plainTextPassword) Parameters hashedPassword string The hashed password to compare against. plainTextPassword string The plain text password to verify. Returns Task<bool> A task that returns true if the passwords match; otherwise, false."
  },
  "api/Model.Interfaces.IRepository-1.html": {
    "href": "api/Model.Interfaces.IRepository-1.html",
    "title": "Interface IRepository<TObject> | PersonalBudgeting_BackendDocs",
    "summary": "Interface IRepository<TObject> Namespace Model.Interfaces Assembly Model.dll Defines a generic repository interface that provides basic Create, Read, Update, and Delete (CRUD) operations. public interface IRepository<TObject> where TObject : class Type Parameters TObject The type of the entity the repository will manage. Must be a reference type. Methods Add(TObject) Adds a new object to the underlying data store. Task<int> Add(TObject obj) Parameters obj TObject The object to add. Returns Task<int> A task that represents the asynchronous operation. The task result contains the number of records affected. CheckExist(int) Checks whether an object with the specified ID exists in the data store. Task<bool> CheckExist(int id) Parameters id int The identifier of the object to check for existence. Returns Task<bool> A task that represents the asynchronous operation. The task result is true if the object exists; otherwise, false. Delete(TObject) Deletes an object from the data store. Task<int> Delete(TObject obj) Parameters obj TObject The object to delete. Returns Task<int> A task that represents the asynchronous operation. The task result contains the number of records affected. GetAll() Retrieves all objects from the data store. Task<IEnumerable<TObject>> GetAll() Returns Task<IEnumerable<TObject>> A task that represents the asynchronous operation. The task result contains a collection of all objects. GetById(int) Retrieves an object by its unique identifier. Task<TObject?> GetById(int id) Parameters id int The identifier of the object to retrieve. Returns Task<TObject> A task that represents the asynchronous operation. The task result contains the object if found; otherwise, null. Update(TObject) Updates an existing object in the data store. Task<int> Update(TObject obj) Parameters obj TObject The object to update. Returns Task<int> A task that represents the asynchronous operation. The task result contains the number of records affected."
  },
  "api/Model.Interfaces.IUserRepository.html": {
    "href": "api/Model.Interfaces.IUserRepository.html",
    "title": "Interface IUserRepository | PersonalBudgeting_BackendDocs",
    "summary": "Interface IUserRepository Namespace Model.Interfaces Assembly Model.dll Provides data access methods specific to user-related operations, extending the generic repository for User. public interface IUserRepository : IRepository<User> Inherited Members IRepository<User>.Add(User) IRepository<User>.Update(User) IRepository<User>.Delete(User) IRepository<User>.GetById(int) IRepository<User>.GetAll() IRepository<User>.CheckExist(int) Methods CheckUserExistsByEmail(string) Checks whether a user exists with the specified email address. Task<bool> CheckUserExistsByEmail(string email) Parameters email string The email address to check. Returns Task<bool> A task that returns true if the user exists; otherwise, false. GetTotalBudgetSpentAmount(int, int) Retrieves the total spent amount from a specific budget for a user. Task<decimal> GetTotalBudgetSpentAmount(int userId, int budgetId) Parameters userId int The ID of the user. budgetId int The ID of the budget. Returns Task<decimal> A task that returns the total spent amount from the specified budget. GetTotalUserExpenses(int) Calculates the total expenses amount for the specified user. Task<decimal> GetTotalUserExpenses(int userId) Parameters userId int The ID of the user. Returns Task<decimal> A task that returns the total expense amount. GetTotalUserIncomes(int) Calculates the total income amount for the specified user. Task<decimal> GetTotalUserIncomes(int userId) Parameters userId int The ID of the user. Returns Task<decimal> A task that returns the total income amount. GetUserBudgets(User) Retrieves the list of budgets associated with a given user. Task<ICollection<Budget>> GetUserBudgets(User user) Parameters user User The user whose budgets to retrieve. Returns Task<ICollection<Budget>> A task that returns a collection of the user's budgets. GetUserById(int) Retrieves a user by their unique identifier. Task<User?> GetUserById(int id) Parameters id int The ID of the user. Returns Task<User> A task that returns the User if found; otherwise, null. GetUserExpenses(User) Retrieves the list of expenses associated with a given user. Task<ICollection<Expense>> GetUserExpenses(User user) Parameters user User The user whose expenses to retrieve. Returns Task<ICollection<Expense>> A task that returns a collection of the user's expenses. GetUserIncomes(User) Retrieves the list of incomes associated with a given user. Task<ICollection<Income>> GetUserIncomes(User user) Parameters user User The user whose incomes to retrieve. Returns Task<ICollection<Income>> A task that returns a collection of the user's incomes. RetrieveUserByEmail(string) Retrieves a user entity by their email address. Task<User?> RetrieveUserByEmail(string email) Parameters email string The email address of the user. Returns Task<User> A task that returns the User if found; otherwise, null."
  },
  "api/Model.Interfaces.html": {
    "href": "api/Model.Interfaces.html",
    "title": "Namespace Model.Interfaces | PersonalBudgeting_BackendDocs",
    "summary": "Namespace Model.Interfaces Interfaces IBudgetRepository Provides data access methods specific to budgets, extending the generic repository for Budget. IExpenseRepository Provides data access methods specific to expenses, extending the generic repository for Expense. IIncomeRepository Provides data access methods specific to incomes, extending the generic repository for Income. IPasswordHasher Defines methods for hashing and verifying passwords. IRepository<TObject> Defines a generic repository interface that provides basic Create, Read, Update, and Delete (CRUD) operations. IUserRepository Provides data access methods specific to user-related operations, extending the generic repository for User."
  },
  "api/Model.Repositories.BudgetRepository.html": {
    "href": "api/Model.Repositories.BudgetRepository.html",
    "title": "Class BudgetRepository | PersonalBudgeting_BackendDocs",
    "summary": "Class BudgetRepository Namespace Model.Repositories Assembly Model.dll Repository class responsible for performing CRUD operations on Budget entities. Inherits from GenericRepository<TObject> and implements IBudgetRepository. public class BudgetRepository : GenericRepository<Budget>, IBudgetRepository, IRepository<Budget> Inheritance object GenericRepository<Budget> BudgetRepository Implements IBudgetRepository IRepository<Budget> Inherited Members GenericRepository<Budget>._dbContextFactory GenericRepository<Budget>.Add(Budget) GenericRepository<Budget>.Update(Budget) GenericRepository<Budget>.Delete(Budget) GenericRepository<Budget>.GetById(int) GenericRepository<Budget>.GetAll() GenericRepository<Budget>.CheckExist(int) object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods GetBudgetByName(int, string) Provides data access methods specific to budgets, extending the generic repository for Budget. public Task<Budget?> GetBudgetByName(int userId, string budgetName) Parameters userId int budgetName string Returns Task<Budget>"
  },
  "api/Model.Repositories.ExpenseRepository.html": {
    "href": "api/Model.Repositories.ExpenseRepository.html",
    "title": "Class ExpenseRepository | PersonalBudgeting_BackendDocs",
    "summary": "Class ExpenseRepository Namespace Model.Repositories Assembly Model.dll Repository class responsible for performing CRUD operations on Expense entities. Inherits from GenericRepository<TObject> and implements IExpenseRepository. public class ExpenseRepository : GenericRepository<Expense>, IExpenseRepository, IRepository<Expense> Inheritance object GenericRepository<Expense> ExpenseRepository Implements IExpenseRepository IRepository<Expense> Inherited Members GenericRepository<Expense>._dbContextFactory GenericRepository<Expense>.Add(Expense) GenericRepository<Expense>.Update(Expense) GenericRepository<Expense>.Delete(Expense) GenericRepository<Expense>.GetById(int) GenericRepository<Expense>.GetAll() GenericRepository<Expense>.CheckExist(int) object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods GetAllThatHasReminder(int) Provides data access methods specific to expenses, extending the generic repository for Expense. public Task<List<Expense>> GetAllThatHasReminder(int userId) Parameters userId int Returns Task<List<Expense>> GetExpenseByName(int, string) Provides data access methods specific to expenses, extending the generic repository for Expense. public Task<Expense?> GetExpenseByName(int userId, string expenseName) Parameters userId int expenseName string Returns Task<Expense> SetReminderTime(Expense, DateTime) Provides data access methods specific to expenses, extending the generic repository for Expense. public Task<bool> SetReminderTime(Expense expense, DateTime time) Parameters expense Expense time DateTime Returns Task<bool>"
  },
  "api/Model.Repositories.GenericRepository-1.html": {
    "href": "api/Model.Repositories.GenericRepository-1.html",
    "title": "Class GenericRepository<TObject> | PersonalBudgeting_BackendDocs",
    "summary": "Class GenericRepository<TObject> Namespace Model.Repositories Assembly Model.dll A generic repository that provides CRUD operations for entities of type TObject. Implements IRepository<TObject> for all entities of type TObject. public class GenericRepository<TObject> : IRepository<TObject> where TObject : class Type Parameters TObject The type of the entity to be handled by the repository. Must be a class. Inheritance object GenericRepository<TObject> Implements IRepository<TObject> Derived BudgetRepository ExpenseRepository IncomeRepository UserRepository Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors GenericRepository() Initializes a new instance of the GenericRepository<TObject> class. public GenericRepository() Fields _dbContextFactory Factory used to create DbContext instances for database operations. protected readonly DbContextFactory _dbContextFactory Field Value DbContextFactory Methods Add(TObject) Adds a new object to the underlying data store. public Task<int> Add(TObject obj) Parameters obj TObject The object to add. Returns Task<int> A task that represents the asynchronous operation. The task result contains the number of records affected. CheckExist(int) Checks whether an object with the specified ID exists in the data store. public Task<bool> CheckExist(int id) Parameters id int The identifier of the object to check for existence. Returns Task<bool> A task that represents the asynchronous operation. The task result is true if the object exists; otherwise, false. Delete(TObject) Deletes an object from the data store. public Task<int> Delete(TObject obj) Parameters obj TObject The object to delete. Returns Task<int> A task that represents the asynchronous operation. The task result contains the number of records affected. GetAll() Retrieves all objects from the data store. public Task<IEnumerable<TObject>>? GetAll() Returns Task<IEnumerable<TObject>> A task that represents the asynchronous operation. The task result contains a collection of all objects. GetById(int) Retrieves an object by its unique identifier. public Task<TObject?> GetById(int id) Parameters id int The identifier of the object to retrieve. Returns Task<TObject> A task that represents the asynchronous operation. The task result contains the object if found; otherwise, null. Update(TObject) Updates an existing object in the data store. public Task<int> Update(TObject obj) Parameters obj TObject The object to update. Returns Task<int> A task that represents the asynchronous operation. The task result contains the number of records affected."
  },
  "api/Model.Repositories.IncomeRepository.html": {
    "href": "api/Model.Repositories.IncomeRepository.html",
    "title": "Class IncomeRepository | PersonalBudgeting_BackendDocs",
    "summary": "Class IncomeRepository Namespace Model.Repositories Assembly Model.dll Repository class responsible for performing CRUD operations on Income entities. Inherits from GenericRepository<TObject> and implements IIncomeRepository. public class IncomeRepository : GenericRepository<Income>, IIncomeRepository, IRepository<Income> Inheritance object GenericRepository<Income> IncomeRepository Implements IIncomeRepository IRepository<Income> Inherited Members GenericRepository<Income>._dbContextFactory GenericRepository<Income>.Add(Income) GenericRepository<Income>.Update(Income) GenericRepository<Income>.Delete(Income) GenericRepository<Income>.GetById(int) GenericRepository<Income>.GetAll() GenericRepository<Income>.CheckExist(int) object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods GetIncomeBySourceName(int, string) Retrieves an income by its source name for a specific user. public Task<Income?> GetIncomeBySourceName(int userId, string sourceName) Parameters userId int The ID of the user who owns the income. sourceName string The name of the income source to retrieve. Returns Task<Income> A task that returns the Income if found; otherwise, null."
  },
  "api/Model.Repositories.UserRepository.html": {
    "href": "api/Model.Repositories.UserRepository.html",
    "title": "Class UserRepository | PersonalBudgeting_BackendDocs",
    "summary": "Class UserRepository Namespace Model.Repositories Assembly Model.dll Repository for handling User entities, implementing IUserRepository. Provides data access methods for retrieving, adding, updating, and deleting users, as well as related data such as incomes, expenses, and budgets. public class UserRepository : GenericRepository<User>, IUserRepository, IRepository<User> Inheritance object GenericRepository<User> UserRepository Implements IUserRepository IRepository<User> Inherited Members GenericRepository<User>._dbContextFactory GenericRepository<User>.Add(User) GenericRepository<User>.Update(User) GenericRepository<User>.Delete(User) GenericRepository<User>.GetById(int) GenericRepository<User>.GetAll() GenericRepository<User>.CheckExist(int) object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods CheckUserExistsByEmail(string) Checks whether a user exists with the specified email address. public Task<bool> CheckUserExistsByEmail(string email) Parameters email string The email address to check. Returns Task<bool> A task that returns true if the user exists; otherwise, false. GetTotalBudgetSpentAmount(int, int) Retrieves the total spent amount from a specific budget for a user. public Task<decimal> GetTotalBudgetSpentAmount(int userId, int budgetId) Parameters userId int The ID of the user. budgetId int The ID of the budget. Returns Task<decimal> A task that returns the total spent amount from the specified budget. GetTotalUserExpenses(int) Calculates the total expenses amount for the specified user. public Task<decimal> GetTotalUserExpenses(int userId) Parameters userId int The ID of the user. Returns Task<decimal> A task that returns the total expense amount. GetTotalUserIncomes(int) Calculates the total income amount for the specified user. public Task<decimal> GetTotalUserIncomes(int userId) Parameters userId int The ID of the user. Returns Task<decimal> A task that returns the total income amount. GetUserBudgets(User) Retrieves the list of budgets associated with a given user. public Task<ICollection<Budget>> GetUserBudgets(User user) Parameters user User The user whose budgets to retrieve. Returns Task<ICollection<Budget>> A task that returns a collection of the user's budgets. GetUserById(int) Retrieves a user by their unique identifier. public Task<User?> GetUserById(int id) Parameters id int The ID of the user. Returns Task<User> A task that returns the User if found; otherwise, null. GetUserExpenses(User) Retrieves the list of expenses associated with a given user. public Task<ICollection<Expense>> GetUserExpenses(User user) Parameters user User The user whose expenses to retrieve. Returns Task<ICollection<Expense>> A task that returns a collection of the user's expenses. GetUserIncomes(User) Retrieves the list of incomes associated with a given user. public Task<ICollection<Income>> GetUserIncomes(User user) Parameters user User The user whose incomes to retrieve. Returns Task<ICollection<Income>> A task that returns a collection of the user's incomes. RetrieveUserByEmail(string) Retrieves a user entity by their email address. public Task<User?> RetrieveUserByEmail(string email) Parameters email string The email address of the user. Returns Task<User> A task that returns the User if found; otherwise, null."
  },
  "api/Model.Repositories.html": {
    "href": "api/Model.Repositories.html",
    "title": "Namespace Model.Repositories | PersonalBudgeting_BackendDocs",
    "summary": "Namespace Model.Repositories Classes BudgetRepository Repository class responsible for performing CRUD operations on Budget entities. Inherits from GenericRepository<TObject> and implements IBudgetRepository. ExpenseRepository Repository class responsible for performing CRUD operations on Expense entities. Inherits from GenericRepository<TObject> and implements IExpenseRepository. GenericRepository<TObject> A generic repository that provides CRUD operations for entities of type TObject. Implements IRepository<TObject> for all entities of type TObject. IncomeRepository Repository class responsible for performing CRUD operations on Income entities. Inherits from GenericRepository<TObject> and implements IIncomeRepository. UserRepository Repository for handling User entities, implementing IUserRepository. Provides data access methods for retrieving, adding, updating, and deleting users, as well as related data such as incomes, expenses, and budgets."
  },
  "api/Model.Utilities.ServicesContainer.html": {
    "href": "api/Model.Utilities.ServicesContainer.html",
    "title": "Class ServicesContainer | PersonalBudgeting_BackendDocs",
    "summary": "Class ServicesContainer Namespace Model.Utilities Assembly Model.dll Provides a centralized service locator pattern implementation for dependency management. public class ServicesContainer Inheritance object ServicesContainer Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Remarks This class serves as an alternative to traditional dependency injection frameworks, implementing the dependency inversion principle by decoupling service instantiation from service usage. It acts as a lightweight IoC container that registers and provides access to various application services. The container is implemented as a thread-safe singleton, ensuring only one instance exists throughout the application lifecycle. Services are lazily instantiated when first requested. Properties Instance Gets the singleton instance of the services container. public static ServicesContainer Instance { get; } Property Value ServicesContainer The single instance of ServicesContainer that exists in the application. Methods GetService<TService>() Retrieves a service instance of the specified type. public TService GetService<TService>() where TService : class Returns TService A new instance of the requested service. Type Parameters TService The type of service to retrieve. Remarks This method creates a new instance of the requested service each time it's called. If the service is not registered, an exception is thrown with a clear error message. Note that this implementation doesn't handle dependency relationships between services; each service is instantiated independently. For services that require other services, those dependencies would need to be resolved manually within the service constructors by calling GetService again. Exceptions InvalidOperationException Thrown when the requested service type is not registered in the container."
  },
  "api/Model.Utilities.Sha512PasswordHasher.html": {
    "href": "api/Model.Utilities.Sha512PasswordHasher.html",
    "title": "Class Sha512PasswordHasher | PersonalBudgeting_BackendDocs",
    "summary": "Class Sha512PasswordHasher Namespace Model.Utilities Assembly Model.dll Implements a password hashing and verification mechanism using PBKDF2 and SHA-512. This provides a secure way to store and verify passwords. public class Sha512PasswordHasher : IPasswordHasher Inheritance object Sha512PasswordHasher Implements IPasswordHasher Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods Hash(string) Asynchronously generates a secure hash for the given plain text password. The process includes generating a random salt, deriving a key using PBKDF2, then hashing it with SHA-512. public Task<string> Hash(string plainText) Parameters plainText string The plaintext password to hash. Returns Task<string> A task that returns a string containing the Base64-encoded SHA-512 hash and salt, separated by a hyphen. Verify(string, string) Asynchronously verifies whether a plaintext password matches the given hashed password. public Task<bool> Verify(string hashedPassword, string plainTextPassword) Parameters hashedPassword string The hashed password with salt, in the format 'hash-salt'. plainTextPassword string The plaintext password to verify. Returns Task<bool> A task that returns true if the password matches the hash; otherwise, false."
  },
  "api/Model.Utilities.html": {
    "href": "api/Model.Utilities.html",
    "title": "Namespace Model.Utilities | PersonalBudgeting_BackendDocs",
    "summary": "Namespace Model.Utilities Classes ServicesContainer Provides a centralized service locator pattern implementation for dependency management. Sha512PasswordHasher Implements a password hashing and verification mechanism using PBKDF2 and SHA-512. This provides a secure way to store and verify passwords."
  },
  "api/Model.html": {
    "href": "api/Model.html",
    "title": "Namespace Model | PersonalBudgeting_BackendDocs",
    "summary": "Namespace Model Classes ApplicationDbContext Represents the database context for the Personal Budgeting application. DbContextFactory Factory Pattern to Create ApplicationDbContext Variable"
  },
  "api/PersonalBudgeting.App.html": {
    "href": "api/PersonalBudgeting.App.html",
    "title": "Class App | PersonalBudgeting_BackendDocs",
    "summary": "Class App Namespace PersonalBudgeting Assembly PersonalBudgeting.dll public class App : Application, INotifyPropertyChanged, IDataContextProvider, IGlobalDataTemplates, IDataTemplateHost, IGlobalStyles, IStyleHost, IThemeVariantHost, IResourceHost, IResourceNode, IApplicationPlatformEvents, IOptionalFeatureProvider Inheritance object AvaloniaObject Application App Implements INotifyPropertyChanged IDataContextProvider IGlobalDataTemplates IDataTemplateHost IGlobalStyles IStyleHost IThemeVariantHost IResourceHost IResourceNode IApplicationPlatformEvents IOptionalFeatureProvider Inherited Members Application.DataContextProperty Application.ActualThemeVariantProperty Application.RequestedThemeVariantProperty Application.NameProperty Application.TryGetResource(object, ThemeVariant, out object) Application.RegisterServices() Application.TryGetFeature(Type) Application.OnPropertyChanged(AvaloniaPropertyChangedEventArgs) Application.DataContext Application.RequestedThemeVariant Application.ActualThemeVariant Application.Current Application.DataTemplates Application.Resources Application.Styles Application.ApplicationLifetime Application.PlatformSettings Application.Name Application.ResourcesChanged Application.UrlsOpened Application.ActualThemeVariantChanged AvaloniaObject.CheckAccess() AvaloniaObject.VerifyAccess() AvaloniaObject.ClearValue(AvaloniaProperty) AvaloniaObject.ClearValue<T>(AvaloniaProperty<T>) AvaloniaObject.ClearValue<T>(StyledProperty<T>) AvaloniaObject.ClearValue<T>(DirectPropertyBase<T>) AvaloniaObject.Equals(object) AvaloniaObject.GetHashCode() AvaloniaObject.GetValue(AvaloniaProperty) AvaloniaObject.GetValue<T>(StyledProperty<T>) AvaloniaObject.GetValue<T>(DirectPropertyBase<T>) AvaloniaObject.GetBaseValue<T>(StyledProperty<T>) AvaloniaObject.IsAnimating(AvaloniaProperty) AvaloniaObject.IsSet(AvaloniaProperty) AvaloniaObject.SetValue(AvaloniaProperty, object, BindingPriority) AvaloniaObject.SetValue<T>(StyledProperty<T>, T, BindingPriority) AvaloniaObject.SetValue<T>(DirectPropertyBase<T>, T) AvaloniaObject.SetCurrentValue(AvaloniaProperty, object) AvaloniaObject.SetCurrentValue<T>(StyledProperty<T>, T) AvaloniaObject.Bind(AvaloniaProperty, IBinding) AvaloniaObject.Bind(AvaloniaProperty, IObservable<object>, BindingPriority) AvaloniaObject.Bind<T>(StyledProperty<T>, IObservable<object>, BindingPriority) AvaloniaObject.Bind<T>(StyledProperty<T>, IObservable<T>, BindingPriority) AvaloniaObject.Bind<T>(StyledProperty<T>, IObservable<BindingValue<T>>, BindingPriority) AvaloniaObject.Bind<T>(DirectPropertyBase<T>, IObservable<object>) AvaloniaObject.Bind<T>(DirectPropertyBase<T>, IObservable<T>) AvaloniaObject.Bind<T>(DirectPropertyBase<T>, IObservable<BindingValue<T>>) AvaloniaObject.CoerceValue(AvaloniaProperty) AvaloniaObject.UpdateDataValidation(AvaloniaProperty, BindingValueType, Exception) AvaloniaObject.OnPropertyChangedCore(AvaloniaPropertyChangedEventArgs) AvaloniaObject.RaisePropertyChanged<T>(DirectPropertyBase<T>, T, T) AvaloniaObject.SetAndRaise<T>(DirectPropertyBase<T>, ref T, T) AvaloniaObject.InheritanceParent AvaloniaObject.this[AvaloniaProperty] AvaloniaObject.this[IndexerDescriptor] AvaloniaObject.PropertyChanged object.Equals(object, object) object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods Initialize() Initializes the application by loading XAML etc. public override void Initialize() OnFrameworkInitializationCompleted() public override void OnFrameworkInitializationCompleted()"
  },
  "api/PersonalBudgeting.ViewLocator.html": {
    "href": "api/PersonalBudgeting.ViewLocator.html",
    "title": "Class ViewLocator | PersonalBudgeting_BackendDocs",
    "summary": "Class ViewLocator Namespace PersonalBudgeting Assembly PersonalBudgeting.dll public class ViewLocator : IDataTemplate, ITemplate<object?, Control?> Inheritance object ViewLocator Implements IDataTemplate ITemplate<object, Control> Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods Build(object?) Creates the control. public Control? Build(object? param) Parameters param object The parameter. Returns Control The created control. Match(object?) Checks to see if this data template matches the specified data. public bool Match(object? data) Parameters data object The data. Returns bool True if the data template can build a control for the data, otherwise false."
  },
  "api/PersonalBudgeting.ViewModels.MainWindowViewModel.html": {
    "href": "api/PersonalBudgeting.ViewModels.MainWindowViewModel.html",
    "title": "Class MainWindowViewModel | PersonalBudgeting_BackendDocs",
    "summary": "Class MainWindowViewModel Namespace PersonalBudgeting.ViewModels Assembly PersonalBudgeting.dll public class MainWindowViewModel : ViewModelBase, INotifyPropertyChanged, INotifyPropertyChanging Inheritance object ObservableObject ViewModelBase MainWindowViewModel Implements INotifyPropertyChanged INotifyPropertyChanging Inherited Members ObservableObject.OnPropertyChanged(PropertyChangedEventArgs) ObservableObject.OnPropertyChanging(PropertyChangingEventArgs) ObservableObject.OnPropertyChanged(string) ObservableObject.OnPropertyChanging(string) ObservableObject.SetProperty<T>(ref T, T, string) ObservableObject.SetProperty<T>(ref T, T, IEqualityComparer<T>, string) ObservableObject.SetProperty<T>(T, T, Action<T>, string) ObservableObject.SetProperty<T>(T, T, IEqualityComparer<T>, Action<T>, string) ObservableObject.SetProperty<TModel, T>(T, T, TModel, Action<TModel, T>, string) ObservableObject.SetProperty<TModel, T>(T, T, IEqualityComparer<T>, TModel, Action<TModel, T>, string) ObservableObject.SetPropertyAndNotifyOnCompletion(ref ObservableObject.TaskNotifier, Task, string) ObservableObject.SetPropertyAndNotifyOnCompletion(ref ObservableObject.TaskNotifier, Task, Action<Task>, string) ObservableObject.SetPropertyAndNotifyOnCompletion<T>(ref ObservableObject.TaskNotifier<T>, Task<T>, string) ObservableObject.SetPropertyAndNotifyOnCompletion<T>(ref ObservableObject.TaskNotifier<T>, Task<T>, Action<Task<T>>, string) ObservableObject.PropertyChanged ObservableObject.PropertyChanging object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Properties Greeting public string Greeting { get; } Property Value string"
  },
  "api/PersonalBudgeting.ViewModels.ReminderViewModel.html": {
    "href": "api/PersonalBudgeting.ViewModels.ReminderViewModel.html",
    "title": "Class ReminderViewModel | PersonalBudgeting_BackendDocs",
    "summary": "Class ReminderViewModel Namespace PersonalBudgeting.ViewModels Assembly PersonalBudgeting.dll A base class for objects of which the properties must be observable. public class ReminderViewModel : ObservableObject, INotifyPropertyChanged, INotifyPropertyChanging Inheritance object ObservableObject ReminderViewModel Implements INotifyPropertyChanged INotifyPropertyChanging Inherited Members ObservableObject.OnPropertyChanged(PropertyChangedEventArgs) ObservableObject.OnPropertyChanging(PropertyChangingEventArgs) ObservableObject.OnPropertyChanged(string) ObservableObject.OnPropertyChanging(string) ObservableObject.SetProperty<T>(ref T, T, string) ObservableObject.SetProperty<T>(ref T, T, IEqualityComparer<T>, string) ObservableObject.SetProperty<T>(T, T, Action<T>, string) ObservableObject.SetProperty<T>(T, T, IEqualityComparer<T>, Action<T>, string) ObservableObject.SetProperty<TModel, T>(T, T, TModel, Action<TModel, T>, string) ObservableObject.SetProperty<TModel, T>(T, T, IEqualityComparer<T>, TModel, Action<TModel, T>, string) ObservableObject.SetPropertyAndNotifyOnCompletion(ref ObservableObject.TaskNotifier, Task, string) ObservableObject.SetPropertyAndNotifyOnCompletion(ref ObservableObject.TaskNotifier, Task, Action<Task>, string) ObservableObject.SetPropertyAndNotifyOnCompletion<T>(ref ObservableObject.TaskNotifier<T>, Task<T>, string) ObservableObject.SetPropertyAndNotifyOnCompletion<T>(ref ObservableObject.TaskNotifier<T>, Task<T>, Action<Task<T>>, string) ObservableObject.PropertyChanged ObservableObject.PropertyChanging object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Properties Amount public decimal Amount { get; set; } Property Value decimal BillName public string BillName { get; set; } Property Value string DueDate public DateTime DueDate { get; set; } Property Value DateTime Status public string Status { get; set; } Property Value string"
  },
  "api/PersonalBudgeting.ViewModels.ViewModelBase.html": {
    "href": "api/PersonalBudgeting.ViewModels.ViewModelBase.html",
    "title": "Class ViewModelBase | PersonalBudgeting_BackendDocs",
    "summary": "Class ViewModelBase Namespace PersonalBudgeting.ViewModels Assembly PersonalBudgeting.dll public class ViewModelBase : ObservableObject, INotifyPropertyChanged, INotifyPropertyChanging Inheritance object ObservableObject ViewModelBase Implements INotifyPropertyChanged INotifyPropertyChanging Derived MainWindowViewModel Inherited Members ObservableObject.OnPropertyChanged(PropertyChangedEventArgs) ObservableObject.OnPropertyChanging(PropertyChangingEventArgs) ObservableObject.OnPropertyChanged(string) ObservableObject.OnPropertyChanging(string) ObservableObject.SetProperty<T>(ref T, T, string) ObservableObject.SetProperty<T>(ref T, T, IEqualityComparer<T>, string) ObservableObject.SetProperty<T>(T, T, Action<T>, string) ObservableObject.SetProperty<T>(T, T, IEqualityComparer<T>, Action<T>, string) ObservableObject.SetProperty<TModel, T>(T, T, TModel, Action<TModel, T>, string) ObservableObject.SetProperty<TModel, T>(T, T, IEqualityComparer<T>, TModel, Action<TModel, T>, string) ObservableObject.SetPropertyAndNotifyOnCompletion(ref ObservableObject.TaskNotifier, Task, string) ObservableObject.SetPropertyAndNotifyOnCompletion(ref ObservableObject.TaskNotifier, Task, Action<Task>, string) ObservableObject.SetPropertyAndNotifyOnCompletion<T>(ref ObservableObject.TaskNotifier<T>, Task<T>, string) ObservableObject.SetPropertyAndNotifyOnCompletion<T>(ref ObservableObject.TaskNotifier<T>, Task<T>, Action<Task<T>>, string) ObservableObject.PropertyChanged ObservableObject.PropertyChanging object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString()"
  },
  "api/PersonalBudgeting.ViewModels.html": {
    "href": "api/PersonalBudgeting.ViewModels.html",
    "title": "Namespace PersonalBudgeting.ViewModels | PersonalBudgeting_BackendDocs",
    "summary": "Namespace PersonalBudgeting.ViewModels Classes MainWindowViewModel ReminderViewModel A base class for objects of which the properties must be observable. ViewModelBase"
  },
  "api/PersonalBudgeting.Views.MainWindow.html": {
    "href": "api/PersonalBudgeting.Views.MainWindow.html",
    "title": "Class MainWindow | PersonalBudgeting_BackendDocs",
    "summary": "Class MainWindow Namespace PersonalBudgeting.Views Assembly PersonalBudgeting.dll public class MainWindow : Window, INotifyPropertyChanged, IDataContextProvider, IThemeVariantHost, IResourceHost, IResourceNode, ISetLogicalParent, ISetInheritanceParent, ISupportInitialize, IStyleable, INamed, IDataTemplateHost, ISetterValue, IRenderRoot, ICloseable, IStyleHost, ILogicalRoot, ILogical, ITextInputMethodRoot, IInputRoot, IInputElement, IFocusScope, ILayoutRoot Inheritance object AvaloniaObject Animatable StyledElement Visual Layoutable Interactive InputElement Control TemplatedControl ContentControl TopLevel WindowBase Window MainWindow Implements INotifyPropertyChanged IDataContextProvider IThemeVariantHost IResourceHost IResourceNode ISetLogicalParent ISetInheritanceParent ISupportInitialize IStyleable INamed IDataTemplateHost ISetterValue IRenderRoot ICloseable IStyleHost ILogicalRoot ILogical ITextInputMethodRoot IInputRoot IInputElement IFocusScope ILayoutRoot Inherited Members Window.SizeToContentProperty Window.ExtendClientAreaToDecorationsHintProperty Window.ExtendClientAreaChromeHintsProperty Window.ExtendClientAreaTitleBarHeightHintProperty Window.IsExtendedIntoWindowDecorationsProperty Window.WindowDecorationMarginProperty Window.OffScreenMarginProperty Window.SystemDecorationsProperty Window.ShowActivatedProperty Window.ShowInTaskbarProperty Window.ClosingBehaviorProperty Window.WindowStateProperty Window.TitleProperty Window.IconProperty Window.WindowStartupLocationProperty Window.CanResizeProperty Window.WindowClosedEvent Window.WindowOpenedEvent Window.BeginMoveDrag(PointerPressedEventArgs) Window.BeginResizeDrag(WindowEdge, PointerPressedEventArgs) Window.Close() Window.Close(object) Window.ExtendClientAreaToDecorationsChanged(bool) Window.Hide() Window.Show() Window.IsVisibleChanged(AvaloniaPropertyChangedEventArgs) Window.Show(Window) Window.ShowDialog(Window) Window.ShowDialog<TResult>(Window) Window.SortWindowsByZOrder(Window[]) Window.MeasureOverride(Size) Window.ArrangeSetBounds(Size) Window.OnClosing(WindowClosingEventArgs) Window.OnPropertyChanged(AvaloniaPropertyChangedEventArgs) Window.OnCreateAutomationPeer() Window.PlatformImpl Window.OwnedWindows Window.SizeToContent Window.Title Window.ExtendClientAreaToDecorationsHint Window.ExtendClientAreaChromeHints Window.ExtendClientAreaTitleBarHeightHint Window.IsExtendedIntoWindowDecorations Window.WindowDecorationMargin Window.OffScreenMargin Window.SystemDecorations Window.ShowActivated Window.ShowInTaskbar Window.ClosingBehavior Window.WindowState Window.CanResize Window.Icon Window.WindowStartupLocation Window.Position Window.StyleKeyOverride Window.Closing WindowBase.IsActiveProperty WindowBase.OwnerProperty WindowBase.TopmostProperty WindowBase.Activate() WindowBase.EnsureInitialized() WindowBase.OnClosed(EventArgs) WindowBase.OnOpened(EventArgs) WindowBase.OnResized(WindowResizedEventArgs) WindowBase.MeasureCore(Size) WindowBase.ArrangeCore(Rect) WindowBase.IgnoreVisibilityChanges WindowBase.IsActive WindowBase.Screens WindowBase.Owner WindowBase.Topmost WindowBase.DesktopScaling WindowBase.Activated WindowBase.Deactivated WindowBase.PositionChanged WindowBase.Resized TopLevel.ClientSizeProperty TopLevel.FrameSizeProperty TopLevel.PointerOverElementProperty TopLevel.TransparencyLevelHintProperty TopLevel.ActualTransparencyLevelProperty TopLevel.TransparencyBackgroundFallbackProperty TopLevel.ActualThemeVariantProperty TopLevel.RequestedThemeVariantProperty TopLevel.SystemBarColorProperty TopLevel.AutoSafeAreaPaddingProperty TopLevel.BackRequestedEvent TopLevel.TryGetPlatformHandle() TopLevel.SetSystemBarColor(Control, SolidColorBrush) TopLevel.GetSystemBarColor(Control) TopLevel.SetAutoSafeAreaPadding(Control, bool) TopLevel.GetAutoSafeAreaPadding(Control) TopLevel.GetTopLevel(Visual) TopLevel.RequestPlatformInhibition(PlatformInhibitionType, string) TopLevel.RequestAnimationFrame(Action<TimeSpan>) TopLevel.StartRendering() TopLevel.StopRendering() TopLevel.OnAttachedToVisualTree(VisualTreeAttachmentEventArgs) TopLevel.OnApplyTemplate(TemplateAppliedEventArgs) TopLevel.InvalidateMirrorTransform() TopLevel.ClientSize TopLevel.FrameSize TopLevel.TransparencyLevelHint TopLevel.ActualTransparencyLevel TopLevel.TransparencyBackgroundFallback TopLevel.RequestedThemeVariant TopLevel.RendererDiagnostics TopLevel.RenderScaling TopLevel.StorageProvider TopLevel.InsetsManager TopLevel.InputPane TopLevel.Launcher TopLevel.Clipboard TopLevel.FocusManager TopLevel.PlatformSettings TopLevel.BypassFlowDirectionPolicies TopLevel.Opened TopLevel.Closed TopLevel.ScalingChanged TopLevel.BackRequested ContentControl.ContentProperty ContentControl.ContentTemplateProperty ContentControl.HorizontalContentAlignmentProperty ContentControl.VerticalContentAlignmentProperty ContentControl.RegisterContentPresenter(ContentPresenter) ContentControl.Content ContentControl.ContentTemplate ContentControl.Presenter ContentControl.HorizontalContentAlignment ContentControl.VerticalContentAlignment TemplatedControl.BackgroundProperty TemplatedControl.BackgroundSizingProperty TemplatedControl.BorderBrushProperty TemplatedControl.BorderThicknessProperty TemplatedControl.CornerRadiusProperty TemplatedControl.FontFamilyProperty TemplatedControl.FontFeaturesProperty TemplatedControl.FontSizeProperty TemplatedControl.FontStyleProperty TemplatedControl.FontWeightProperty TemplatedControl.FontStretchProperty TemplatedControl.ForegroundProperty TemplatedControl.PaddingProperty TemplatedControl.TemplateProperty TemplatedControl.IsTemplateFocusTargetProperty TemplatedControl.TemplateAppliedEvent TemplatedControl.GetIsTemplateFocusTarget(Control) TemplatedControl.SetIsTemplateFocusTarget(Control, bool) TemplatedControl.ApplyTemplate() TemplatedControl.GetTemplateFocusTarget() TemplatedControl.OnAttachedToLogicalTree(LogicalTreeAttachmentEventArgs) TemplatedControl.OnDetachedFromLogicalTree(LogicalTreeAttachmentEventArgs) TemplatedControl.OnTemplateChanged(AvaloniaPropertyChangedEventArgs) TemplatedControl.Background TemplatedControl.BackgroundSizing TemplatedControl.BorderBrush TemplatedControl.BorderThickness TemplatedControl.CornerRadius TemplatedControl.FontFamily TemplatedControl.FontFeatures TemplatedControl.FontSize TemplatedControl.FontStyle TemplatedControl.FontWeight TemplatedControl.FontStretch TemplatedControl.Foreground TemplatedControl.Padding TemplatedControl.Template TemplatedControl.TemplateApplied Control.FocusAdornerProperty Control.TagProperty Control.ContextMenuProperty Control.ContextFlyoutProperty Control.RequestBringIntoViewEvent Control.ContextRequestedEvent Control.LoadedEvent Control.UnloadedEvent Control.SizeChangedEvent Control.OnLoaded(RoutedEventArgs) Control.OnUnloaded(RoutedEventArgs) Control.OnSizeChanged(SizeChangedEventArgs) Control.OnAttachedToVisualTreeCore(VisualTreeAttachmentEventArgs) Control.OnDetachedFromVisualTreeCore(VisualTreeAttachmentEventArgs) Control.OnGotFocus(GotFocusEventArgs) Control.OnLostFocus(RoutedEventArgs) Control.OnPointerReleased(PointerReleasedEventArgs) Control.OnKeyUp(KeyEventArgs) Control.FocusAdorner Control.DataTemplates Control.ContextMenu Control.ContextFlyout Control.IsLoaded Control.Tag Control.ContextRequested Control.Loaded Control.Unloaded Control.SizeChanged InputElement.FocusableProperty InputElement.IsEnabledProperty InputElement.IsEffectivelyEnabledProperty InputElement.CursorProperty InputElement.IsKeyboardFocusWithinProperty InputElement.IsFocusedProperty InputElement.IsHitTestVisibleProperty InputElement.IsPointerOverProperty InputElement.IsTabStopProperty InputElement.GotFocusEvent InputElement.LostFocusEvent InputElement.KeyDownEvent InputElement.KeyUpEvent InputElement.TabIndexProperty InputElement.TextInputEvent InputElement.TextInputMethodClientRequestedEvent InputElement.PointerEnteredEvent InputElement.PointerExitedEvent InputElement.PointerMovedEvent InputElement.PointerPressedEvent InputElement.PointerReleasedEvent InputElement.PointerCaptureLostEvent InputElement.PointerWheelChangedEvent InputElement.TappedEvent InputElement.HoldingEvent InputElement.DoubleTappedEvent InputElement.Focus(NavigationMethod, KeyModifiers) InputElement.OnKeyDown(KeyEventArgs) InputElement.OnTextInput(TextInputEventArgs) InputElement.OnPointerEntered(PointerEventArgs) InputElement.OnPointerExited(PointerEventArgs) InputElement.OnPointerMoved(PointerEventArgs) InputElement.OnPointerPressed(PointerPressedEventArgs) InputElement.OnPointerCaptureLost(PointerCaptureLostEventArgs) InputElement.OnPointerWheelChanged(PointerWheelEventArgs) InputElement.UpdateIsEffectivelyEnabled() InputElement.Focusable InputElement.IsEnabled InputElement.Cursor InputElement.IsKeyboardFocusWithin InputElement.IsFocused InputElement.IsHitTestVisible InputElement.IsPointerOver InputElement.IsTabStop InputElement.IsEffectivelyEnabled InputElement.TabIndex InputElement.KeyBindings InputElement.IsEnabledCore InputElement.GestureRecognizers InputElement.GotFocus InputElement.LostFocus InputElement.KeyDown InputElement.KeyUp InputElement.TextInput InputElement.TextInputMethodClientRequested InputElement.PointerEntered InputElement.PointerExited InputElement.PointerMoved InputElement.PointerPressed InputElement.PointerReleased InputElement.PointerCaptureLost InputElement.PointerWheelChanged InputElement.Tapped InputElement.Holding InputElement.DoubleTapped Interactive.AddHandler(RoutedEvent, Delegate, RoutingStrategies, bool) Interactive.AddHandler<TEventArgs>(RoutedEvent<TEventArgs>, EventHandler<TEventArgs>, RoutingStrategies, bool) Interactive.RemoveHandler(RoutedEvent, Delegate) Interactive.RemoveHandler<TEventArgs>(RoutedEvent<TEventArgs>, EventHandler<TEventArgs>) Interactive.RaiseEvent(RoutedEventArgs) Interactive.BuildEventRoute(RoutedEvent) Layoutable.DesiredSizeProperty Layoutable.WidthProperty Layoutable.HeightProperty Layoutable.MinWidthProperty Layoutable.MaxWidthProperty Layoutable.MinHeightProperty Layoutable.MaxHeightProperty Layoutable.MarginProperty Layoutable.HorizontalAlignmentProperty Layoutable.VerticalAlignmentProperty Layoutable.UseLayoutRoundingProperty Layoutable.UpdateLayout() Layoutable.Measure(Size) Layoutable.Arrange(Rect) Layoutable.InvalidateMeasure() Layoutable.InvalidateArrange() Layoutable.AffectsMeasure<T>(params AvaloniaProperty[]) Layoutable.AffectsArrange<T>(params AvaloniaProperty[]) Layoutable.ArrangeOverride(Size) Layoutable.OnMeasureInvalidated() Layoutable.OnVisualParentChanged(Visual, Visual) Layoutable.Width Layoutable.Height Layoutable.MinWidth Layoutable.MaxWidth Layoutable.MinHeight Layoutable.MaxHeight Layoutable.Margin Layoutable.HorizontalAlignment Layoutable.VerticalAlignment Layoutable.DesiredSize Layoutable.IsMeasureValid Layoutable.IsArrangeValid Layoutable.UseLayoutRounding Layoutable.EffectiveViewportChanged Layoutable.LayoutUpdated Visual.BoundsProperty Visual.ClipToBoundsProperty Visual.ClipProperty Visual.IsVisibleProperty Visual.OpacityProperty Visual.OpacityMaskProperty Visual.EffectProperty Visual.HasMirrorTransformProperty Visual.RenderTransformProperty Visual.RenderTransformOriginProperty Visual.FlowDirectionProperty Visual.VisualParentProperty Visual.ZIndexProperty Visual.GetFlowDirection(Visual) Visual.SetFlowDirection(Visual, FlowDirection) Visual.InvalidateVisual() Visual.Render(DrawingContext) Visual.AffectsRender<T>(params AvaloniaProperty[]) Visual.LogicalChildrenCollectionChanged(object, NotifyCollectionChangedEventArgs) Visual.OnDetachedFromVisualTree(VisualTreeAttachmentEventArgs) Visual.Bounds Visual.ClipToBounds Visual.Clip Visual.IsEffectivelyVisible Visual.IsVisible Visual.Opacity Visual.OpacityMask Visual.Effect Visual.HasMirrorTransform Visual.RenderTransform Visual.RenderTransformOrigin Visual.FlowDirection Visual.ZIndex Visual.VisualChildren Visual.VisualRoot Visual.AttachedToVisualTree Visual.DetachedFromVisualTree StyledElement.DataContextProperty StyledElement.NameProperty StyledElement.ParentProperty StyledElement.TemplatedParentProperty StyledElement.ThemeProperty StyledElement.BeginInit() StyledElement.EndInit() StyledElement.ApplyStyling() StyledElement.InitializeIfNeeded() StyledElement.TryGetResource(object, ThemeVariant, out object) StyledElement.OnDataContextChanged(EventArgs) StyledElement.OnDataContextBeginUpdate() StyledElement.OnDataContextEndUpdate() StyledElement.OnInitialized() StyledElement.Name StyledElement.Classes StyledElement.DataContext StyledElement.IsInitialized StyledElement.Styles StyledElement.StyleKey StyledElement.Resources StyledElement.TemplatedParent StyledElement.Theme StyledElement.LogicalChildren StyledElement.PseudoClasses StyledElement.Parent StyledElement.ActualThemeVariant StyledElement.AttachedToLogicalTree StyledElement.DetachedFromLogicalTree StyledElement.DataContextChanged StyledElement.Initialized StyledElement.ResourcesChanged StyledElement.ActualThemeVariantChanged Animatable.TransitionsProperty Animatable.OnPropertyChangedCore(AvaloniaPropertyChangedEventArgs) Animatable.Transitions AvaloniaObject.CheckAccess() AvaloniaObject.VerifyAccess() AvaloniaObject.ClearValue(AvaloniaProperty) AvaloniaObject.ClearValue<T>(AvaloniaProperty<T>) AvaloniaObject.ClearValue<T>(StyledProperty<T>) AvaloniaObject.ClearValue<T>(DirectPropertyBase<T>) AvaloniaObject.Equals(object) AvaloniaObject.GetHashCode() AvaloniaObject.GetValue(AvaloniaProperty) AvaloniaObject.GetValue<T>(StyledProperty<T>) AvaloniaObject.GetValue<T>(DirectPropertyBase<T>) AvaloniaObject.GetBaseValue<T>(StyledProperty<T>) AvaloniaObject.IsAnimating(AvaloniaProperty) AvaloniaObject.IsSet(AvaloniaProperty) AvaloniaObject.SetValue(AvaloniaProperty, object, BindingPriority) AvaloniaObject.SetValue<T>(StyledProperty<T>, T, BindingPriority) AvaloniaObject.SetValue<T>(DirectPropertyBase<T>, T) AvaloniaObject.SetCurrentValue(AvaloniaProperty, object) AvaloniaObject.SetCurrentValue<T>(StyledProperty<T>, T) AvaloniaObject.Bind(AvaloniaProperty, IBinding) AvaloniaObject.Bind(AvaloniaProperty, IObservable<object>, BindingPriority) AvaloniaObject.Bind<T>(StyledProperty<T>, IObservable<object>, BindingPriority) AvaloniaObject.Bind<T>(StyledProperty<T>, IObservable<T>, BindingPriority) AvaloniaObject.Bind<T>(StyledProperty<T>, IObservable<BindingValue<T>>, BindingPriority) AvaloniaObject.Bind<T>(DirectPropertyBase<T>, IObservable<object>) AvaloniaObject.Bind<T>(DirectPropertyBase<T>, IObservable<T>) AvaloniaObject.Bind<T>(DirectPropertyBase<T>, IObservable<BindingValue<T>>) AvaloniaObject.CoerceValue(AvaloniaProperty) AvaloniaObject.UpdateDataValidation(AvaloniaProperty, BindingValueType, Exception) AvaloniaObject.RaisePropertyChanged<T>(DirectPropertyBase<T>, T, T) AvaloniaObject.SetAndRaise<T>(DirectPropertyBase<T>, ref T, T) AvaloniaObject.InheritanceParent AvaloniaObject.this[AvaloniaProperty] AvaloniaObject.this[IndexerDescriptor] AvaloniaObject.PropertyChanged object.Equals(object, object) object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors MainWindow() public MainWindow() Methods InitializeComponent(bool, bool) Wires up the controls and optionally loads XAML markup and attaches dev tools (if Avalonia.Diagnostics package is referenced). public void InitializeComponent(bool loadXaml = true, bool attachDevTools = true) Parameters loadXaml bool Should the XAML be loaded into the component. attachDevTools bool Should the dev tools be attached."
  },
  "api/PersonalBudgeting.Views.Pages.BudgetPage.html": {
    "href": "api/PersonalBudgeting.Views.Pages.BudgetPage.html",
    "title": "Class BudgetPage | PersonalBudgeting_BackendDocs",
    "summary": "Class BudgetPage Namespace PersonalBudgeting.Views.Pages Assembly PersonalBudgeting.dll public class BudgetPage : UserControl, INotifyPropertyChanged, IDataContextProvider, ILogical, IThemeVariantHost, IResourceHost, IResourceNode, IStyleHost, ISetLogicalParent, ISetInheritanceParent, ISupportInitialize, IStyleable, INamed, IInputElement, IDataTemplateHost, ISetterValue Inheritance object AvaloniaObject Animatable StyledElement Visual Layoutable Interactive InputElement Control TemplatedControl ContentControl UserControl BudgetPage Implements INotifyPropertyChanged IDataContextProvider ILogical IThemeVariantHost IResourceHost IResourceNode IStyleHost ISetLogicalParent ISetInheritanceParent ISupportInitialize IStyleable INamed IInputElement IDataTemplateHost ISetterValue Inherited Members ContentControl.ContentProperty ContentControl.ContentTemplateProperty ContentControl.HorizontalContentAlignmentProperty ContentControl.VerticalContentAlignmentProperty ContentControl.OnPropertyChanged(AvaloniaPropertyChangedEventArgs) ContentControl.RegisterContentPresenter(ContentPresenter) ContentControl.Content ContentControl.ContentTemplate ContentControl.Presenter ContentControl.HorizontalContentAlignment ContentControl.VerticalContentAlignment TemplatedControl.BackgroundProperty TemplatedControl.BackgroundSizingProperty TemplatedControl.BorderBrushProperty TemplatedControl.BorderThicknessProperty TemplatedControl.CornerRadiusProperty TemplatedControl.FontFamilyProperty TemplatedControl.FontFeaturesProperty TemplatedControl.FontSizeProperty TemplatedControl.FontStyleProperty TemplatedControl.FontWeightProperty TemplatedControl.FontStretchProperty TemplatedControl.ForegroundProperty TemplatedControl.PaddingProperty TemplatedControl.TemplateProperty TemplatedControl.IsTemplateFocusTargetProperty TemplatedControl.TemplateAppliedEvent TemplatedControl.GetIsTemplateFocusTarget(Control) TemplatedControl.SetIsTemplateFocusTarget(Control, bool) TemplatedControl.ApplyTemplate() TemplatedControl.GetTemplateFocusTarget() TemplatedControl.OnAttachedToLogicalTree(LogicalTreeAttachmentEventArgs) TemplatedControl.OnDetachedFromLogicalTree(LogicalTreeAttachmentEventArgs) TemplatedControl.OnApplyTemplate(TemplateAppliedEventArgs) TemplatedControl.OnTemplateChanged(AvaloniaPropertyChangedEventArgs) TemplatedControl.Background TemplatedControl.BackgroundSizing TemplatedControl.BorderBrush TemplatedControl.BorderThickness TemplatedControl.CornerRadius TemplatedControl.FontFamily TemplatedControl.FontFeatures TemplatedControl.FontSize TemplatedControl.FontStyle TemplatedControl.FontWeight TemplatedControl.FontStretch TemplatedControl.Foreground TemplatedControl.Padding TemplatedControl.Template TemplatedControl.TemplateApplied Control.FocusAdornerProperty Control.TagProperty Control.ContextMenuProperty Control.ContextFlyoutProperty Control.RequestBringIntoViewEvent Control.ContextRequestedEvent Control.LoadedEvent Control.UnloadedEvent Control.SizeChangedEvent Control.OnLoaded(RoutedEventArgs) Control.OnUnloaded(RoutedEventArgs) Control.OnSizeChanged(SizeChangedEventArgs) Control.OnAttachedToVisualTreeCore(VisualTreeAttachmentEventArgs) Control.OnDetachedFromVisualTreeCore(VisualTreeAttachmentEventArgs) Control.OnGotFocus(GotFocusEventArgs) Control.OnLostFocus(RoutedEventArgs) Control.OnCreateAutomationPeer() Control.OnPointerReleased(PointerReleasedEventArgs) Control.OnKeyUp(KeyEventArgs) Control.FocusAdorner Control.DataTemplates Control.ContextMenu Control.ContextFlyout Control.IsLoaded Control.Tag Control.ContextRequested Control.Loaded Control.Unloaded Control.SizeChanged InputElement.FocusableProperty InputElement.IsEnabledProperty InputElement.IsEffectivelyEnabledProperty InputElement.CursorProperty InputElement.IsKeyboardFocusWithinProperty InputElement.IsFocusedProperty InputElement.IsHitTestVisibleProperty InputElement.IsPointerOverProperty InputElement.IsTabStopProperty InputElement.GotFocusEvent InputElement.LostFocusEvent InputElement.KeyDownEvent InputElement.KeyUpEvent InputElement.TabIndexProperty InputElement.TextInputEvent InputElement.TextInputMethodClientRequestedEvent InputElement.PointerEnteredEvent InputElement.PointerExitedEvent InputElement.PointerMovedEvent InputElement.PointerPressedEvent InputElement.PointerReleasedEvent InputElement.PointerCaptureLostEvent InputElement.PointerWheelChangedEvent InputElement.TappedEvent InputElement.HoldingEvent InputElement.DoubleTappedEvent InputElement.Focus(NavigationMethod, KeyModifiers) InputElement.OnKeyDown(KeyEventArgs) InputElement.OnTextInput(TextInputEventArgs) InputElement.OnPointerEntered(PointerEventArgs) InputElement.OnPointerExited(PointerEventArgs) InputElement.OnPointerMoved(PointerEventArgs) InputElement.OnPointerPressed(PointerPressedEventArgs) InputElement.OnPointerCaptureLost(PointerCaptureLostEventArgs) InputElement.OnPointerWheelChanged(PointerWheelEventArgs) InputElement.UpdateIsEffectivelyEnabled() InputElement.Focusable InputElement.IsEnabled InputElement.Cursor InputElement.IsKeyboardFocusWithin InputElement.IsFocused InputElement.IsHitTestVisible InputElement.IsPointerOver InputElement.IsTabStop InputElement.IsEffectivelyEnabled InputElement.TabIndex InputElement.KeyBindings InputElement.IsEnabledCore InputElement.GestureRecognizers InputElement.GotFocus InputElement.LostFocus InputElement.KeyDown InputElement.KeyUp InputElement.TextInput InputElement.TextInputMethodClientRequested InputElement.PointerEntered InputElement.PointerExited InputElement.PointerMoved InputElement.PointerPressed InputElement.PointerReleased InputElement.PointerCaptureLost InputElement.PointerWheelChanged InputElement.Tapped InputElement.Holding InputElement.DoubleTapped Interactive.AddHandler(RoutedEvent, Delegate, RoutingStrategies, bool) Interactive.AddHandler<TEventArgs>(RoutedEvent<TEventArgs>, EventHandler<TEventArgs>, RoutingStrategies, bool) Interactive.RemoveHandler(RoutedEvent, Delegate) Interactive.RemoveHandler<TEventArgs>(RoutedEvent<TEventArgs>, EventHandler<TEventArgs>) Interactive.RaiseEvent(RoutedEventArgs) Interactive.BuildEventRoute(RoutedEvent) Layoutable.DesiredSizeProperty Layoutable.WidthProperty Layoutable.HeightProperty Layoutable.MinWidthProperty Layoutable.MaxWidthProperty Layoutable.MinHeightProperty Layoutable.MaxHeightProperty Layoutable.MarginProperty Layoutable.HorizontalAlignmentProperty Layoutable.VerticalAlignmentProperty Layoutable.UseLayoutRoundingProperty Layoutable.UpdateLayout() Layoutable.Measure(Size) Layoutable.Arrange(Rect) Layoutable.InvalidateMeasure() Layoutable.InvalidateArrange() Layoutable.AffectsMeasure<T>(params AvaloniaProperty[]) Layoutable.AffectsArrange<T>(params AvaloniaProperty[]) Layoutable.MeasureCore(Size) Layoutable.MeasureOverride(Size) Layoutable.ArrangeCore(Rect) Layoutable.ArrangeOverride(Size) Layoutable.OnMeasureInvalidated() Layoutable.OnVisualParentChanged(Visual, Visual) Layoutable.Width Layoutable.Height Layoutable.MinWidth Layoutable.MaxWidth Layoutable.MinHeight Layoutable.MaxHeight Layoutable.Margin Layoutable.HorizontalAlignment Layoutable.VerticalAlignment Layoutable.DesiredSize Layoutable.IsMeasureValid Layoutable.IsArrangeValid Layoutable.UseLayoutRounding Layoutable.EffectiveViewportChanged Layoutable.LayoutUpdated Visual.BoundsProperty Visual.ClipToBoundsProperty Visual.ClipProperty Visual.IsVisibleProperty Visual.OpacityProperty Visual.OpacityMaskProperty Visual.EffectProperty Visual.HasMirrorTransformProperty Visual.RenderTransformProperty Visual.RenderTransformOriginProperty Visual.FlowDirectionProperty Visual.VisualParentProperty Visual.ZIndexProperty Visual.GetFlowDirection(Visual) Visual.SetFlowDirection(Visual, FlowDirection) Visual.InvalidateVisual() Visual.Render(DrawingContext) Visual.AffectsRender<T>(params AvaloniaProperty[]) Visual.LogicalChildrenCollectionChanged(object, NotifyCollectionChangedEventArgs) Visual.OnAttachedToVisualTree(VisualTreeAttachmentEventArgs) Visual.OnDetachedFromVisualTree(VisualTreeAttachmentEventArgs) Visual.InvalidateMirrorTransform() Visual.Bounds Visual.ClipToBounds Visual.Clip Visual.IsEffectivelyVisible Visual.IsVisible Visual.Opacity Visual.OpacityMask Visual.Effect Visual.HasMirrorTransform Visual.RenderTransform Visual.RenderTransformOrigin Visual.FlowDirection Visual.ZIndex Visual.VisualChildren Visual.VisualRoot Visual.BypassFlowDirectionPolicies Visual.AttachedToVisualTree Visual.DetachedFromVisualTree StyledElement.DataContextProperty StyledElement.NameProperty StyledElement.ParentProperty StyledElement.TemplatedParentProperty StyledElement.ThemeProperty StyledElement.BeginInit() StyledElement.EndInit() StyledElement.ApplyStyling() StyledElement.InitializeIfNeeded() StyledElement.TryGetResource(object, ThemeVariant, out object) StyledElement.OnDataContextChanged(EventArgs) StyledElement.OnDataContextBeginUpdate() StyledElement.OnDataContextEndUpdate() StyledElement.OnInitialized() StyledElement.Name StyledElement.Classes StyledElement.DataContext StyledElement.IsInitialized StyledElement.Styles StyledElement.StyleKey StyledElement.Resources StyledElement.TemplatedParent StyledElement.Theme StyledElement.LogicalChildren StyledElement.PseudoClasses StyledElement.StyleKeyOverride StyledElement.Parent StyledElement.ActualThemeVariant StyledElement.AttachedToLogicalTree StyledElement.DetachedFromLogicalTree StyledElement.DataContextChanged StyledElement.Initialized StyledElement.ResourcesChanged StyledElement.ActualThemeVariantChanged Animatable.TransitionsProperty Animatable.OnPropertyChangedCore(AvaloniaPropertyChangedEventArgs) Animatable.Transitions AvaloniaObject.CheckAccess() AvaloniaObject.VerifyAccess() AvaloniaObject.ClearValue(AvaloniaProperty) AvaloniaObject.ClearValue<T>(AvaloniaProperty<T>) AvaloniaObject.ClearValue<T>(StyledProperty<T>) AvaloniaObject.ClearValue<T>(DirectPropertyBase<T>) AvaloniaObject.Equals(object) AvaloniaObject.GetHashCode() AvaloniaObject.GetValue(AvaloniaProperty) AvaloniaObject.GetValue<T>(StyledProperty<T>) AvaloniaObject.GetValue<T>(DirectPropertyBase<T>) AvaloniaObject.GetBaseValue<T>(StyledProperty<T>) AvaloniaObject.IsAnimating(AvaloniaProperty) AvaloniaObject.IsSet(AvaloniaProperty) AvaloniaObject.SetValue(AvaloniaProperty, object, BindingPriority) AvaloniaObject.SetValue<T>(StyledProperty<T>, T, BindingPriority) AvaloniaObject.SetValue<T>(DirectPropertyBase<T>, T) AvaloniaObject.SetCurrentValue(AvaloniaProperty, object) AvaloniaObject.SetCurrentValue<T>(StyledProperty<T>, T) AvaloniaObject.Bind(AvaloniaProperty, IBinding) AvaloniaObject.Bind(AvaloniaProperty, IObservable<object>, BindingPriority) AvaloniaObject.Bind<T>(StyledProperty<T>, IObservable<object>, BindingPriority) AvaloniaObject.Bind<T>(StyledProperty<T>, IObservable<T>, BindingPriority) AvaloniaObject.Bind<T>(StyledProperty<T>, IObservable<BindingValue<T>>, BindingPriority) AvaloniaObject.Bind<T>(DirectPropertyBase<T>, IObservable<object>) AvaloniaObject.Bind<T>(DirectPropertyBase<T>, IObservable<T>) AvaloniaObject.Bind<T>(DirectPropertyBase<T>, IObservable<BindingValue<T>>) AvaloniaObject.CoerceValue(AvaloniaProperty) AvaloniaObject.UpdateDataValidation(AvaloniaProperty, BindingValueType, Exception) AvaloniaObject.RaisePropertyChanged<T>(DirectPropertyBase<T>, T, T) AvaloniaObject.SetAndRaise<T>(DirectPropertyBase<T>, ref T, T) AvaloniaObject.InheritanceParent AvaloniaObject.this[AvaloniaProperty] AvaloniaObject.this[IndexerDescriptor] AvaloniaObject.PropertyChanged object.Equals(object, object) object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors BudgetPage() public BudgetPage() Methods InitializeComponent(bool) Wires up the controls and optionally loads XAML markup and attaches dev tools (if Avalonia.Diagnostics package is referenced). public void InitializeComponent(bool loadXaml = true) Parameters loadXaml bool Should the XAML be loaded into the component."
  },
  "api/PersonalBudgeting.Views.Pages.ExpensesPage.html": {
    "href": "api/PersonalBudgeting.Views.Pages.ExpensesPage.html",
    "title": "Class ExpensesPage | PersonalBudgeting_BackendDocs",
    "summary": "Class ExpensesPage Namespace PersonalBudgeting.Views.Pages Assembly PersonalBudgeting.dll public class ExpensesPage : UserControl, INotifyPropertyChanged, IDataContextProvider, ILogical, IThemeVariantHost, IResourceHost, IResourceNode, IStyleHost, ISetLogicalParent, ISetInheritanceParent, ISupportInitialize, IStyleable, INamed, IInputElement, IDataTemplateHost, ISetterValue Inheritance object AvaloniaObject Animatable StyledElement Visual Layoutable Interactive InputElement Control TemplatedControl ContentControl UserControl ExpensesPage Implements INotifyPropertyChanged IDataContextProvider ILogical IThemeVariantHost IResourceHost IResourceNode IStyleHost ISetLogicalParent ISetInheritanceParent ISupportInitialize IStyleable INamed IInputElement IDataTemplateHost ISetterValue Inherited Members ContentControl.ContentProperty ContentControl.ContentTemplateProperty ContentControl.HorizontalContentAlignmentProperty ContentControl.VerticalContentAlignmentProperty ContentControl.OnPropertyChanged(AvaloniaPropertyChangedEventArgs) ContentControl.RegisterContentPresenter(ContentPresenter) ContentControl.Content ContentControl.ContentTemplate ContentControl.Presenter ContentControl.HorizontalContentAlignment ContentControl.VerticalContentAlignment TemplatedControl.BackgroundProperty TemplatedControl.BackgroundSizingProperty TemplatedControl.BorderBrushProperty TemplatedControl.BorderThicknessProperty TemplatedControl.CornerRadiusProperty TemplatedControl.FontFamilyProperty TemplatedControl.FontFeaturesProperty TemplatedControl.FontSizeProperty TemplatedControl.FontStyleProperty TemplatedControl.FontWeightProperty TemplatedControl.FontStretchProperty TemplatedControl.ForegroundProperty TemplatedControl.PaddingProperty TemplatedControl.TemplateProperty TemplatedControl.IsTemplateFocusTargetProperty TemplatedControl.TemplateAppliedEvent TemplatedControl.GetIsTemplateFocusTarget(Control) TemplatedControl.SetIsTemplateFocusTarget(Control, bool) TemplatedControl.ApplyTemplate() TemplatedControl.GetTemplateFocusTarget() TemplatedControl.OnAttachedToLogicalTree(LogicalTreeAttachmentEventArgs) TemplatedControl.OnDetachedFromLogicalTree(LogicalTreeAttachmentEventArgs) TemplatedControl.OnApplyTemplate(TemplateAppliedEventArgs) TemplatedControl.OnTemplateChanged(AvaloniaPropertyChangedEventArgs) TemplatedControl.Background TemplatedControl.BackgroundSizing TemplatedControl.BorderBrush TemplatedControl.BorderThickness TemplatedControl.CornerRadius TemplatedControl.FontFamily TemplatedControl.FontFeatures TemplatedControl.FontSize TemplatedControl.FontStyle TemplatedControl.FontWeight TemplatedControl.FontStretch TemplatedControl.Foreground TemplatedControl.Padding TemplatedControl.Template TemplatedControl.TemplateApplied Control.FocusAdornerProperty Control.TagProperty Control.ContextMenuProperty Control.ContextFlyoutProperty Control.RequestBringIntoViewEvent Control.ContextRequestedEvent Control.LoadedEvent Control.UnloadedEvent Control.SizeChangedEvent Control.OnLoaded(RoutedEventArgs) Control.OnUnloaded(RoutedEventArgs) Control.OnSizeChanged(SizeChangedEventArgs) Control.OnAttachedToVisualTreeCore(VisualTreeAttachmentEventArgs) Control.OnDetachedFromVisualTreeCore(VisualTreeAttachmentEventArgs) Control.OnGotFocus(GotFocusEventArgs) Control.OnLostFocus(RoutedEventArgs) Control.OnCreateAutomationPeer() Control.OnPointerReleased(PointerReleasedEventArgs) Control.OnKeyUp(KeyEventArgs) Control.FocusAdorner Control.DataTemplates Control.ContextMenu Control.ContextFlyout Control.IsLoaded Control.Tag Control.ContextRequested Control.Loaded Control.Unloaded Control.SizeChanged InputElement.FocusableProperty InputElement.IsEnabledProperty InputElement.IsEffectivelyEnabledProperty InputElement.CursorProperty InputElement.IsKeyboardFocusWithinProperty InputElement.IsFocusedProperty InputElement.IsHitTestVisibleProperty InputElement.IsPointerOverProperty InputElement.IsTabStopProperty InputElement.GotFocusEvent InputElement.LostFocusEvent InputElement.KeyDownEvent InputElement.KeyUpEvent InputElement.TabIndexProperty InputElement.TextInputEvent InputElement.TextInputMethodClientRequestedEvent InputElement.PointerEnteredEvent InputElement.PointerExitedEvent InputElement.PointerMovedEvent InputElement.PointerPressedEvent InputElement.PointerReleasedEvent InputElement.PointerCaptureLostEvent InputElement.PointerWheelChangedEvent InputElement.TappedEvent InputElement.HoldingEvent InputElement.DoubleTappedEvent InputElement.Focus(NavigationMethod, KeyModifiers) InputElement.OnKeyDown(KeyEventArgs) InputElement.OnTextInput(TextInputEventArgs) InputElement.OnPointerEntered(PointerEventArgs) InputElement.OnPointerExited(PointerEventArgs) InputElement.OnPointerMoved(PointerEventArgs) InputElement.OnPointerPressed(PointerPressedEventArgs) InputElement.OnPointerCaptureLost(PointerCaptureLostEventArgs) InputElement.OnPointerWheelChanged(PointerWheelEventArgs) InputElement.UpdateIsEffectivelyEnabled() InputElement.Focusable InputElement.IsEnabled InputElement.Cursor InputElement.IsKeyboardFocusWithin InputElement.IsFocused InputElement.IsHitTestVisible InputElement.IsPointerOver InputElement.IsTabStop InputElement.IsEffectivelyEnabled InputElement.TabIndex InputElement.KeyBindings InputElement.IsEnabledCore InputElement.GestureRecognizers InputElement.GotFocus InputElement.LostFocus InputElement.KeyDown InputElement.KeyUp InputElement.TextInput InputElement.TextInputMethodClientRequested InputElement.PointerEntered InputElement.PointerExited InputElement.PointerMoved InputElement.PointerPressed InputElement.PointerReleased InputElement.PointerCaptureLost InputElement.PointerWheelChanged InputElement.Tapped InputElement.Holding InputElement.DoubleTapped Interactive.AddHandler(RoutedEvent, Delegate, RoutingStrategies, bool) Interactive.AddHandler<TEventArgs>(RoutedEvent<TEventArgs>, EventHandler<TEventArgs>, RoutingStrategies, bool) Interactive.RemoveHandler(RoutedEvent, Delegate) Interactive.RemoveHandler<TEventArgs>(RoutedEvent<TEventArgs>, EventHandler<TEventArgs>) Interactive.RaiseEvent(RoutedEventArgs) Interactive.BuildEventRoute(RoutedEvent) Layoutable.DesiredSizeProperty Layoutable.WidthProperty Layoutable.HeightProperty Layoutable.MinWidthProperty Layoutable.MaxWidthProperty Layoutable.MinHeightProperty Layoutable.MaxHeightProperty Layoutable.MarginProperty Layoutable.HorizontalAlignmentProperty Layoutable.VerticalAlignmentProperty Layoutable.UseLayoutRoundingProperty Layoutable.UpdateLayout() Layoutable.Measure(Size) Layoutable.Arrange(Rect) Layoutable.InvalidateMeasure() Layoutable.InvalidateArrange() Layoutable.AffectsMeasure<T>(params AvaloniaProperty[]) Layoutable.AffectsArrange<T>(params AvaloniaProperty[]) Layoutable.MeasureCore(Size) Layoutable.MeasureOverride(Size) Layoutable.ArrangeCore(Rect) Layoutable.ArrangeOverride(Size) Layoutable.OnMeasureInvalidated() Layoutable.OnVisualParentChanged(Visual, Visual) Layoutable.Width Layoutable.Height Layoutable.MinWidth Layoutable.MaxWidth Layoutable.MinHeight Layoutable.MaxHeight Layoutable.Margin Layoutable.HorizontalAlignment Layoutable.VerticalAlignment Layoutable.DesiredSize Layoutable.IsMeasureValid Layoutable.IsArrangeValid Layoutable.UseLayoutRounding Layoutable.EffectiveViewportChanged Layoutable.LayoutUpdated Visual.BoundsProperty Visual.ClipToBoundsProperty Visual.ClipProperty Visual.IsVisibleProperty Visual.OpacityProperty Visual.OpacityMaskProperty Visual.EffectProperty Visual.HasMirrorTransformProperty Visual.RenderTransformProperty Visual.RenderTransformOriginProperty Visual.FlowDirectionProperty Visual.VisualParentProperty Visual.ZIndexProperty Visual.GetFlowDirection(Visual) Visual.SetFlowDirection(Visual, FlowDirection) Visual.InvalidateVisual() Visual.Render(DrawingContext) Visual.AffectsRender<T>(params AvaloniaProperty[]) Visual.LogicalChildrenCollectionChanged(object, NotifyCollectionChangedEventArgs) Visual.OnAttachedToVisualTree(VisualTreeAttachmentEventArgs) Visual.OnDetachedFromVisualTree(VisualTreeAttachmentEventArgs) Visual.InvalidateMirrorTransform() Visual.Bounds Visual.ClipToBounds Visual.Clip Visual.IsEffectivelyVisible Visual.IsVisible Visual.Opacity Visual.OpacityMask Visual.Effect Visual.HasMirrorTransform Visual.RenderTransform Visual.RenderTransformOrigin Visual.FlowDirection Visual.ZIndex Visual.VisualChildren Visual.VisualRoot Visual.BypassFlowDirectionPolicies Visual.AttachedToVisualTree Visual.DetachedFromVisualTree StyledElement.DataContextProperty StyledElement.NameProperty StyledElement.ParentProperty StyledElement.TemplatedParentProperty StyledElement.ThemeProperty StyledElement.BeginInit() StyledElement.EndInit() StyledElement.ApplyStyling() StyledElement.InitializeIfNeeded() StyledElement.TryGetResource(object, ThemeVariant, out object) StyledElement.OnDataContextChanged(EventArgs) StyledElement.OnDataContextBeginUpdate() StyledElement.OnDataContextEndUpdate() StyledElement.OnInitialized() StyledElement.Name StyledElement.Classes StyledElement.DataContext StyledElement.IsInitialized StyledElement.Styles StyledElement.StyleKey StyledElement.Resources StyledElement.TemplatedParent StyledElement.Theme StyledElement.LogicalChildren StyledElement.PseudoClasses StyledElement.StyleKeyOverride StyledElement.Parent StyledElement.ActualThemeVariant StyledElement.AttachedToLogicalTree StyledElement.DetachedFromLogicalTree StyledElement.DataContextChanged StyledElement.Initialized StyledElement.ResourcesChanged StyledElement.ActualThemeVariantChanged Animatable.TransitionsProperty Animatable.OnPropertyChangedCore(AvaloniaPropertyChangedEventArgs) Animatable.Transitions AvaloniaObject.CheckAccess() AvaloniaObject.VerifyAccess() AvaloniaObject.ClearValue(AvaloniaProperty) AvaloniaObject.ClearValue<T>(AvaloniaProperty<T>) AvaloniaObject.ClearValue<T>(StyledProperty<T>) AvaloniaObject.ClearValue<T>(DirectPropertyBase<T>) AvaloniaObject.Equals(object) AvaloniaObject.GetHashCode() AvaloniaObject.GetValue(AvaloniaProperty) AvaloniaObject.GetValue<T>(StyledProperty<T>) AvaloniaObject.GetValue<T>(DirectPropertyBase<T>) AvaloniaObject.GetBaseValue<T>(StyledProperty<T>) AvaloniaObject.IsAnimating(AvaloniaProperty) AvaloniaObject.IsSet(AvaloniaProperty) AvaloniaObject.SetValue(AvaloniaProperty, object, BindingPriority) AvaloniaObject.SetValue<T>(StyledProperty<T>, T, BindingPriority) AvaloniaObject.SetValue<T>(DirectPropertyBase<T>, T) AvaloniaObject.SetCurrentValue(AvaloniaProperty, object) AvaloniaObject.SetCurrentValue<T>(StyledProperty<T>, T) AvaloniaObject.Bind(AvaloniaProperty, IBinding) AvaloniaObject.Bind(AvaloniaProperty, IObservable<object>, BindingPriority) AvaloniaObject.Bind<T>(StyledProperty<T>, IObservable<object>, BindingPriority) AvaloniaObject.Bind<T>(StyledProperty<T>, IObservable<T>, BindingPriority) AvaloniaObject.Bind<T>(StyledProperty<T>, IObservable<BindingValue<T>>, BindingPriority) AvaloniaObject.Bind<T>(DirectPropertyBase<T>, IObservable<object>) AvaloniaObject.Bind<T>(DirectPropertyBase<T>, IObservable<T>) AvaloniaObject.Bind<T>(DirectPropertyBase<T>, IObservable<BindingValue<T>>) AvaloniaObject.CoerceValue(AvaloniaProperty) AvaloniaObject.UpdateDataValidation(AvaloniaProperty, BindingValueType, Exception) AvaloniaObject.RaisePropertyChanged<T>(DirectPropertyBase<T>, T, T) AvaloniaObject.SetAndRaise<T>(DirectPropertyBase<T>, ref T, T) AvaloniaObject.InheritanceParent AvaloniaObject.this[AvaloniaProperty] AvaloniaObject.this[IndexerDescriptor] AvaloniaObject.PropertyChanged object.Equals(object, object) object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors ExpensesPage() public ExpensesPage() Methods InitializeComponent(bool) Wires up the controls and optionally loads XAML markup and attaches dev tools (if Avalonia.Diagnostics package is referenced). public void InitializeComponent(bool loadXaml = true) Parameters loadXaml bool Should the XAML be loaded into the component."
  },
  "api/PersonalBudgeting.Views.Pages.HomePage.html": {
    "href": "api/PersonalBudgeting.Views.Pages.HomePage.html",
    "title": "Class HomePage | PersonalBudgeting_BackendDocs",
    "summary": "Class HomePage Namespace PersonalBudgeting.Views.Pages Assembly PersonalBudgeting.dll public class HomePage : UserControl, INotifyPropertyChanged, IDataContextProvider, ILogical, IThemeVariantHost, IResourceHost, IResourceNode, IStyleHost, ISetLogicalParent, ISetInheritanceParent, ISupportInitialize, IStyleable, INamed, IInputElement, IDataTemplateHost, ISetterValue Inheritance object AvaloniaObject Animatable StyledElement Visual Layoutable Interactive InputElement Control TemplatedControl ContentControl UserControl HomePage Implements INotifyPropertyChanged IDataContextProvider ILogical IThemeVariantHost IResourceHost IResourceNode IStyleHost ISetLogicalParent ISetInheritanceParent ISupportInitialize IStyleable INamed IInputElement IDataTemplateHost ISetterValue Inherited Members ContentControl.ContentProperty ContentControl.ContentTemplateProperty ContentControl.HorizontalContentAlignmentProperty ContentControl.VerticalContentAlignmentProperty ContentControl.OnPropertyChanged(AvaloniaPropertyChangedEventArgs) ContentControl.RegisterContentPresenter(ContentPresenter) ContentControl.Content ContentControl.ContentTemplate ContentControl.Presenter ContentControl.HorizontalContentAlignment ContentControl.VerticalContentAlignment TemplatedControl.BackgroundProperty TemplatedControl.BackgroundSizingProperty TemplatedControl.BorderBrushProperty TemplatedControl.BorderThicknessProperty TemplatedControl.CornerRadiusProperty TemplatedControl.FontFamilyProperty TemplatedControl.FontFeaturesProperty TemplatedControl.FontSizeProperty TemplatedControl.FontStyleProperty TemplatedControl.FontWeightProperty TemplatedControl.FontStretchProperty TemplatedControl.ForegroundProperty TemplatedControl.PaddingProperty TemplatedControl.TemplateProperty TemplatedControl.IsTemplateFocusTargetProperty TemplatedControl.TemplateAppliedEvent TemplatedControl.GetIsTemplateFocusTarget(Control) TemplatedControl.SetIsTemplateFocusTarget(Control, bool) TemplatedControl.ApplyTemplate() TemplatedControl.GetTemplateFocusTarget() TemplatedControl.OnAttachedToLogicalTree(LogicalTreeAttachmentEventArgs) TemplatedControl.OnDetachedFromLogicalTree(LogicalTreeAttachmentEventArgs) TemplatedControl.OnApplyTemplate(TemplateAppliedEventArgs) TemplatedControl.OnTemplateChanged(AvaloniaPropertyChangedEventArgs) TemplatedControl.Background TemplatedControl.BackgroundSizing TemplatedControl.BorderBrush TemplatedControl.BorderThickness TemplatedControl.CornerRadius TemplatedControl.FontFamily TemplatedControl.FontFeatures TemplatedControl.FontSize TemplatedControl.FontStyle TemplatedControl.FontWeight TemplatedControl.FontStretch TemplatedControl.Foreground TemplatedControl.Padding TemplatedControl.Template TemplatedControl.TemplateApplied Control.FocusAdornerProperty Control.TagProperty Control.ContextMenuProperty Control.ContextFlyoutProperty Control.RequestBringIntoViewEvent Control.ContextRequestedEvent Control.LoadedEvent Control.UnloadedEvent Control.SizeChangedEvent Control.OnLoaded(RoutedEventArgs) Control.OnUnloaded(RoutedEventArgs) Control.OnSizeChanged(SizeChangedEventArgs) Control.OnAttachedToVisualTreeCore(VisualTreeAttachmentEventArgs) Control.OnDetachedFromVisualTreeCore(VisualTreeAttachmentEventArgs) Control.OnGotFocus(GotFocusEventArgs) Control.OnLostFocus(RoutedEventArgs) Control.OnCreateAutomationPeer() Control.OnPointerReleased(PointerReleasedEventArgs) Control.OnKeyUp(KeyEventArgs) Control.FocusAdorner Control.DataTemplates Control.ContextMenu Control.ContextFlyout Control.IsLoaded Control.Tag Control.ContextRequested Control.Loaded Control.Unloaded Control.SizeChanged InputElement.FocusableProperty InputElement.IsEnabledProperty InputElement.IsEffectivelyEnabledProperty InputElement.CursorProperty InputElement.IsKeyboardFocusWithinProperty InputElement.IsFocusedProperty InputElement.IsHitTestVisibleProperty InputElement.IsPointerOverProperty InputElement.IsTabStopProperty InputElement.GotFocusEvent InputElement.LostFocusEvent InputElement.KeyDownEvent InputElement.KeyUpEvent InputElement.TabIndexProperty InputElement.TextInputEvent InputElement.TextInputMethodClientRequestedEvent InputElement.PointerEnteredEvent InputElement.PointerExitedEvent InputElement.PointerMovedEvent InputElement.PointerPressedEvent InputElement.PointerReleasedEvent InputElement.PointerCaptureLostEvent InputElement.PointerWheelChangedEvent InputElement.TappedEvent InputElement.HoldingEvent InputElement.DoubleTappedEvent InputElement.Focus(NavigationMethod, KeyModifiers) InputElement.OnKeyDown(KeyEventArgs) InputElement.OnTextInput(TextInputEventArgs) InputElement.OnPointerEntered(PointerEventArgs) InputElement.OnPointerExited(PointerEventArgs) InputElement.OnPointerMoved(PointerEventArgs) InputElement.OnPointerPressed(PointerPressedEventArgs) InputElement.OnPointerCaptureLost(PointerCaptureLostEventArgs) InputElement.OnPointerWheelChanged(PointerWheelEventArgs) InputElement.UpdateIsEffectivelyEnabled() InputElement.Focusable InputElement.IsEnabled InputElement.Cursor InputElement.IsKeyboardFocusWithin InputElement.IsFocused InputElement.IsHitTestVisible InputElement.IsPointerOver InputElement.IsTabStop InputElement.IsEffectivelyEnabled InputElement.TabIndex InputElement.KeyBindings InputElement.IsEnabledCore InputElement.GestureRecognizers InputElement.GotFocus InputElement.LostFocus InputElement.KeyDown InputElement.KeyUp InputElement.TextInput InputElement.TextInputMethodClientRequested InputElement.PointerEntered InputElement.PointerExited InputElement.PointerMoved InputElement.PointerPressed InputElement.PointerReleased InputElement.PointerCaptureLost InputElement.PointerWheelChanged InputElement.Tapped InputElement.Holding InputElement.DoubleTapped Interactive.AddHandler(RoutedEvent, Delegate, RoutingStrategies, bool) Interactive.AddHandler<TEventArgs>(RoutedEvent<TEventArgs>, EventHandler<TEventArgs>, RoutingStrategies, bool) Interactive.RemoveHandler(RoutedEvent, Delegate) Interactive.RemoveHandler<TEventArgs>(RoutedEvent<TEventArgs>, EventHandler<TEventArgs>) Interactive.RaiseEvent(RoutedEventArgs) Interactive.BuildEventRoute(RoutedEvent) Layoutable.DesiredSizeProperty Layoutable.WidthProperty Layoutable.HeightProperty Layoutable.MinWidthProperty Layoutable.MaxWidthProperty Layoutable.MinHeightProperty Layoutable.MaxHeightProperty Layoutable.MarginProperty Layoutable.HorizontalAlignmentProperty Layoutable.VerticalAlignmentProperty Layoutable.UseLayoutRoundingProperty Layoutable.UpdateLayout() Layoutable.Measure(Size) Layoutable.Arrange(Rect) Layoutable.InvalidateMeasure() Layoutable.InvalidateArrange() Layoutable.AffectsMeasure<T>(params AvaloniaProperty[]) Layoutable.AffectsArrange<T>(params AvaloniaProperty[]) Layoutable.MeasureCore(Size) Layoutable.MeasureOverride(Size) Layoutable.ArrangeCore(Rect) Layoutable.ArrangeOverride(Size) Layoutable.OnMeasureInvalidated() Layoutable.OnVisualParentChanged(Visual, Visual) Layoutable.Width Layoutable.Height Layoutable.MinWidth Layoutable.MaxWidth Layoutable.MinHeight Layoutable.MaxHeight Layoutable.Margin Layoutable.HorizontalAlignment Layoutable.VerticalAlignment Layoutable.DesiredSize Layoutable.IsMeasureValid Layoutable.IsArrangeValid Layoutable.UseLayoutRounding Layoutable.EffectiveViewportChanged Layoutable.LayoutUpdated Visual.BoundsProperty Visual.ClipToBoundsProperty Visual.ClipProperty Visual.IsVisibleProperty Visual.OpacityProperty Visual.OpacityMaskProperty Visual.EffectProperty Visual.HasMirrorTransformProperty Visual.RenderTransformProperty Visual.RenderTransformOriginProperty Visual.FlowDirectionProperty Visual.VisualParentProperty Visual.ZIndexProperty Visual.GetFlowDirection(Visual) Visual.SetFlowDirection(Visual, FlowDirection) Visual.InvalidateVisual() Visual.Render(DrawingContext) Visual.AffectsRender<T>(params AvaloniaProperty[]) Visual.LogicalChildrenCollectionChanged(object, NotifyCollectionChangedEventArgs) Visual.OnAttachedToVisualTree(VisualTreeAttachmentEventArgs) Visual.OnDetachedFromVisualTree(VisualTreeAttachmentEventArgs) Visual.InvalidateMirrorTransform() Visual.Bounds Visual.ClipToBounds Visual.Clip Visual.IsEffectivelyVisible Visual.IsVisible Visual.Opacity Visual.OpacityMask Visual.Effect Visual.HasMirrorTransform Visual.RenderTransform Visual.RenderTransformOrigin Visual.FlowDirection Visual.ZIndex Visual.VisualChildren Visual.VisualRoot Visual.BypassFlowDirectionPolicies Visual.AttachedToVisualTree Visual.DetachedFromVisualTree StyledElement.DataContextProperty StyledElement.NameProperty StyledElement.ParentProperty StyledElement.TemplatedParentProperty StyledElement.ThemeProperty StyledElement.BeginInit() StyledElement.EndInit() StyledElement.ApplyStyling() StyledElement.InitializeIfNeeded() StyledElement.TryGetResource(object, ThemeVariant, out object) StyledElement.OnDataContextChanged(EventArgs) StyledElement.OnDataContextBeginUpdate() StyledElement.OnDataContextEndUpdate() StyledElement.OnInitialized() StyledElement.Name StyledElement.Classes StyledElement.DataContext StyledElement.IsInitialized StyledElement.Styles StyledElement.StyleKey StyledElement.Resources StyledElement.TemplatedParent StyledElement.Theme StyledElement.LogicalChildren StyledElement.PseudoClasses StyledElement.StyleKeyOverride StyledElement.Parent StyledElement.ActualThemeVariant StyledElement.AttachedToLogicalTree StyledElement.DetachedFromLogicalTree StyledElement.DataContextChanged StyledElement.Initialized StyledElement.ResourcesChanged StyledElement.ActualThemeVariantChanged Animatable.TransitionsProperty Animatable.OnPropertyChangedCore(AvaloniaPropertyChangedEventArgs) Animatable.Transitions AvaloniaObject.CheckAccess() AvaloniaObject.VerifyAccess() AvaloniaObject.ClearValue(AvaloniaProperty) AvaloniaObject.ClearValue<T>(AvaloniaProperty<T>) AvaloniaObject.ClearValue<T>(StyledProperty<T>) AvaloniaObject.ClearValue<T>(DirectPropertyBase<T>) AvaloniaObject.Equals(object) AvaloniaObject.GetHashCode() AvaloniaObject.GetValue(AvaloniaProperty) AvaloniaObject.GetValue<T>(StyledProperty<T>) AvaloniaObject.GetValue<T>(DirectPropertyBase<T>) AvaloniaObject.GetBaseValue<T>(StyledProperty<T>) AvaloniaObject.IsAnimating(AvaloniaProperty) AvaloniaObject.IsSet(AvaloniaProperty) AvaloniaObject.SetValue(AvaloniaProperty, object, BindingPriority) AvaloniaObject.SetValue<T>(StyledProperty<T>, T, BindingPriority) AvaloniaObject.SetValue<T>(DirectPropertyBase<T>, T) AvaloniaObject.SetCurrentValue(AvaloniaProperty, object) AvaloniaObject.SetCurrentValue<T>(StyledProperty<T>, T) AvaloniaObject.Bind(AvaloniaProperty, IBinding) AvaloniaObject.Bind(AvaloniaProperty, IObservable<object>, BindingPriority) AvaloniaObject.Bind<T>(StyledProperty<T>, IObservable<object>, BindingPriority) AvaloniaObject.Bind<T>(StyledProperty<T>, IObservable<T>, BindingPriority) AvaloniaObject.Bind<T>(StyledProperty<T>, IObservable<BindingValue<T>>, BindingPriority) AvaloniaObject.Bind<T>(DirectPropertyBase<T>, IObservable<object>) AvaloniaObject.Bind<T>(DirectPropertyBase<T>, IObservable<T>) AvaloniaObject.Bind<T>(DirectPropertyBase<T>, IObservable<BindingValue<T>>) AvaloniaObject.CoerceValue(AvaloniaProperty) AvaloniaObject.UpdateDataValidation(AvaloniaProperty, BindingValueType, Exception) AvaloniaObject.RaisePropertyChanged<T>(DirectPropertyBase<T>, T, T) AvaloniaObject.SetAndRaise<T>(DirectPropertyBase<T>, ref T, T) AvaloniaObject.InheritanceParent AvaloniaObject.this[AvaloniaProperty] AvaloniaObject.this[IndexerDescriptor] AvaloniaObject.PropertyChanged object.Equals(object, object) object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors HomePage() public HomePage() Methods InitializeComponent(bool) Wires up the controls and optionally loads XAML markup and attaches dev tools (if Avalonia.Diagnostics package is referenced). public void InitializeComponent(bool loadXaml = true) Parameters loadXaml bool Should the XAML be loaded into the component."
  },
  "api/PersonalBudgeting.Views.Pages.IncomePage.html": {
    "href": "api/PersonalBudgeting.Views.Pages.IncomePage.html",
    "title": "Class IncomePage | PersonalBudgeting_BackendDocs",
    "summary": "Class IncomePage Namespace PersonalBudgeting.Views.Pages Assembly PersonalBudgeting.dll public class IncomePage : UserControl, INotifyPropertyChanged, IDataContextProvider, ILogical, IThemeVariantHost, IResourceHost, IResourceNode, IStyleHost, ISetLogicalParent, ISetInheritanceParent, ISupportInitialize, IStyleable, INamed, IInputElement, IDataTemplateHost, ISetterValue Inheritance object AvaloniaObject Animatable StyledElement Visual Layoutable Interactive InputElement Control TemplatedControl ContentControl UserControl IncomePage Implements INotifyPropertyChanged IDataContextProvider ILogical IThemeVariantHost IResourceHost IResourceNode IStyleHost ISetLogicalParent ISetInheritanceParent ISupportInitialize IStyleable INamed IInputElement IDataTemplateHost ISetterValue Inherited Members ContentControl.ContentProperty ContentControl.ContentTemplateProperty ContentControl.HorizontalContentAlignmentProperty ContentControl.VerticalContentAlignmentProperty ContentControl.OnPropertyChanged(AvaloniaPropertyChangedEventArgs) ContentControl.RegisterContentPresenter(ContentPresenter) ContentControl.Content ContentControl.ContentTemplate ContentControl.Presenter ContentControl.HorizontalContentAlignment ContentControl.VerticalContentAlignment TemplatedControl.BackgroundProperty TemplatedControl.BackgroundSizingProperty TemplatedControl.BorderBrushProperty TemplatedControl.BorderThicknessProperty TemplatedControl.CornerRadiusProperty TemplatedControl.FontFamilyProperty TemplatedControl.FontFeaturesProperty TemplatedControl.FontSizeProperty TemplatedControl.FontStyleProperty TemplatedControl.FontWeightProperty TemplatedControl.FontStretchProperty TemplatedControl.ForegroundProperty TemplatedControl.PaddingProperty TemplatedControl.TemplateProperty TemplatedControl.IsTemplateFocusTargetProperty TemplatedControl.TemplateAppliedEvent TemplatedControl.GetIsTemplateFocusTarget(Control) TemplatedControl.SetIsTemplateFocusTarget(Control, bool) TemplatedControl.ApplyTemplate() TemplatedControl.GetTemplateFocusTarget() TemplatedControl.OnAttachedToLogicalTree(LogicalTreeAttachmentEventArgs) TemplatedControl.OnDetachedFromLogicalTree(LogicalTreeAttachmentEventArgs) TemplatedControl.OnApplyTemplate(TemplateAppliedEventArgs) TemplatedControl.OnTemplateChanged(AvaloniaPropertyChangedEventArgs) TemplatedControl.Background TemplatedControl.BackgroundSizing TemplatedControl.BorderBrush TemplatedControl.BorderThickness TemplatedControl.CornerRadius TemplatedControl.FontFamily TemplatedControl.FontFeatures TemplatedControl.FontSize TemplatedControl.FontStyle TemplatedControl.FontWeight TemplatedControl.FontStretch TemplatedControl.Foreground TemplatedControl.Padding TemplatedControl.Template TemplatedControl.TemplateApplied Control.FocusAdornerProperty Control.TagProperty Control.ContextMenuProperty Control.ContextFlyoutProperty Control.RequestBringIntoViewEvent Control.ContextRequestedEvent Control.LoadedEvent Control.UnloadedEvent Control.SizeChangedEvent Control.OnLoaded(RoutedEventArgs) Control.OnUnloaded(RoutedEventArgs) Control.OnSizeChanged(SizeChangedEventArgs) Control.OnAttachedToVisualTreeCore(VisualTreeAttachmentEventArgs) Control.OnDetachedFromVisualTreeCore(VisualTreeAttachmentEventArgs) Control.OnGotFocus(GotFocusEventArgs) Control.OnLostFocus(RoutedEventArgs) Control.OnCreateAutomationPeer() Control.OnPointerReleased(PointerReleasedEventArgs) Control.OnKeyUp(KeyEventArgs) Control.FocusAdorner Control.DataTemplates Control.ContextMenu Control.ContextFlyout Control.IsLoaded Control.Tag Control.ContextRequested Control.Loaded Control.Unloaded Control.SizeChanged InputElement.FocusableProperty InputElement.IsEnabledProperty InputElement.IsEffectivelyEnabledProperty InputElement.CursorProperty InputElement.IsKeyboardFocusWithinProperty InputElement.IsFocusedProperty InputElement.IsHitTestVisibleProperty InputElement.IsPointerOverProperty InputElement.IsTabStopProperty InputElement.GotFocusEvent InputElement.LostFocusEvent InputElement.KeyDownEvent InputElement.KeyUpEvent InputElement.TabIndexProperty InputElement.TextInputEvent InputElement.TextInputMethodClientRequestedEvent InputElement.PointerEnteredEvent InputElement.PointerExitedEvent InputElement.PointerMovedEvent InputElement.PointerPressedEvent InputElement.PointerReleasedEvent InputElement.PointerCaptureLostEvent InputElement.PointerWheelChangedEvent InputElement.TappedEvent InputElement.HoldingEvent InputElement.DoubleTappedEvent InputElement.Focus(NavigationMethod, KeyModifiers) InputElement.OnKeyDown(KeyEventArgs) InputElement.OnTextInput(TextInputEventArgs) InputElement.OnPointerEntered(PointerEventArgs) InputElement.OnPointerExited(PointerEventArgs) InputElement.OnPointerMoved(PointerEventArgs) InputElement.OnPointerPressed(PointerPressedEventArgs) InputElement.OnPointerCaptureLost(PointerCaptureLostEventArgs) InputElement.OnPointerWheelChanged(PointerWheelEventArgs) InputElement.UpdateIsEffectivelyEnabled() InputElement.Focusable InputElement.IsEnabled InputElement.Cursor InputElement.IsKeyboardFocusWithin InputElement.IsFocused InputElement.IsHitTestVisible InputElement.IsPointerOver InputElement.IsTabStop InputElement.IsEffectivelyEnabled InputElement.TabIndex InputElement.KeyBindings InputElement.IsEnabledCore InputElement.GestureRecognizers InputElement.GotFocus InputElement.LostFocus InputElement.KeyDown InputElement.KeyUp InputElement.TextInput InputElement.TextInputMethodClientRequested InputElement.PointerEntered InputElement.PointerExited InputElement.PointerMoved InputElement.PointerPressed InputElement.PointerReleased InputElement.PointerCaptureLost InputElement.PointerWheelChanged InputElement.Tapped InputElement.Holding InputElement.DoubleTapped Interactive.AddHandler(RoutedEvent, Delegate, RoutingStrategies, bool) Interactive.AddHandler<TEventArgs>(RoutedEvent<TEventArgs>, EventHandler<TEventArgs>, RoutingStrategies, bool) Interactive.RemoveHandler(RoutedEvent, Delegate) Interactive.RemoveHandler<TEventArgs>(RoutedEvent<TEventArgs>, EventHandler<TEventArgs>) Interactive.RaiseEvent(RoutedEventArgs) Interactive.BuildEventRoute(RoutedEvent) Layoutable.DesiredSizeProperty Layoutable.WidthProperty Layoutable.HeightProperty Layoutable.MinWidthProperty Layoutable.MaxWidthProperty Layoutable.MinHeightProperty Layoutable.MaxHeightProperty Layoutable.MarginProperty Layoutable.HorizontalAlignmentProperty Layoutable.VerticalAlignmentProperty Layoutable.UseLayoutRoundingProperty Layoutable.UpdateLayout() Layoutable.Measure(Size) Layoutable.Arrange(Rect) Layoutable.InvalidateMeasure() Layoutable.InvalidateArrange() Layoutable.AffectsMeasure<T>(params AvaloniaProperty[]) Layoutable.AffectsArrange<T>(params AvaloniaProperty[]) Layoutable.MeasureCore(Size) Layoutable.MeasureOverride(Size) Layoutable.ArrangeCore(Rect) Layoutable.ArrangeOverride(Size) Layoutable.OnMeasureInvalidated() Layoutable.OnVisualParentChanged(Visual, Visual) Layoutable.Width Layoutable.Height Layoutable.MinWidth Layoutable.MaxWidth Layoutable.MinHeight Layoutable.MaxHeight Layoutable.Margin Layoutable.HorizontalAlignment Layoutable.VerticalAlignment Layoutable.DesiredSize Layoutable.IsMeasureValid Layoutable.IsArrangeValid Layoutable.UseLayoutRounding Layoutable.EffectiveViewportChanged Layoutable.LayoutUpdated Visual.BoundsProperty Visual.ClipToBoundsProperty Visual.ClipProperty Visual.IsVisibleProperty Visual.OpacityProperty Visual.OpacityMaskProperty Visual.EffectProperty Visual.HasMirrorTransformProperty Visual.RenderTransformProperty Visual.RenderTransformOriginProperty Visual.FlowDirectionProperty Visual.VisualParentProperty Visual.ZIndexProperty Visual.GetFlowDirection(Visual) Visual.SetFlowDirection(Visual, FlowDirection) Visual.InvalidateVisual() Visual.Render(DrawingContext) Visual.AffectsRender<T>(params AvaloniaProperty[]) Visual.LogicalChildrenCollectionChanged(object, NotifyCollectionChangedEventArgs) Visual.OnAttachedToVisualTree(VisualTreeAttachmentEventArgs) Visual.OnDetachedFromVisualTree(VisualTreeAttachmentEventArgs) Visual.InvalidateMirrorTransform() Visual.Bounds Visual.ClipToBounds Visual.Clip Visual.IsEffectivelyVisible Visual.IsVisible Visual.Opacity Visual.OpacityMask Visual.Effect Visual.HasMirrorTransform Visual.RenderTransform Visual.RenderTransformOrigin Visual.FlowDirection Visual.ZIndex Visual.VisualChildren Visual.VisualRoot Visual.BypassFlowDirectionPolicies Visual.AttachedToVisualTree Visual.DetachedFromVisualTree StyledElement.DataContextProperty StyledElement.NameProperty StyledElement.ParentProperty StyledElement.TemplatedParentProperty StyledElement.ThemeProperty StyledElement.BeginInit() StyledElement.EndInit() StyledElement.ApplyStyling() StyledElement.InitializeIfNeeded() StyledElement.TryGetResource(object, ThemeVariant, out object) StyledElement.OnDataContextChanged(EventArgs) StyledElement.OnDataContextBeginUpdate() StyledElement.OnDataContextEndUpdate() StyledElement.OnInitialized() StyledElement.Name StyledElement.Classes StyledElement.DataContext StyledElement.IsInitialized StyledElement.Styles StyledElement.StyleKey StyledElement.Resources StyledElement.TemplatedParent StyledElement.Theme StyledElement.LogicalChildren StyledElement.PseudoClasses StyledElement.StyleKeyOverride StyledElement.Parent StyledElement.ActualThemeVariant StyledElement.AttachedToLogicalTree StyledElement.DetachedFromLogicalTree StyledElement.DataContextChanged StyledElement.Initialized StyledElement.ResourcesChanged StyledElement.ActualThemeVariantChanged Animatable.TransitionsProperty Animatable.OnPropertyChangedCore(AvaloniaPropertyChangedEventArgs) Animatable.Transitions AvaloniaObject.CheckAccess() AvaloniaObject.VerifyAccess() AvaloniaObject.ClearValue(AvaloniaProperty) AvaloniaObject.ClearValue<T>(AvaloniaProperty<T>) AvaloniaObject.ClearValue<T>(StyledProperty<T>) AvaloniaObject.ClearValue<T>(DirectPropertyBase<T>) AvaloniaObject.Equals(object) AvaloniaObject.GetHashCode() AvaloniaObject.GetValue(AvaloniaProperty) AvaloniaObject.GetValue<T>(StyledProperty<T>) AvaloniaObject.GetValue<T>(DirectPropertyBase<T>) AvaloniaObject.GetBaseValue<T>(StyledProperty<T>) AvaloniaObject.IsAnimating(AvaloniaProperty) AvaloniaObject.IsSet(AvaloniaProperty) AvaloniaObject.SetValue(AvaloniaProperty, object, BindingPriority) AvaloniaObject.SetValue<T>(StyledProperty<T>, T, BindingPriority) AvaloniaObject.SetValue<T>(DirectPropertyBase<T>, T) AvaloniaObject.SetCurrentValue(AvaloniaProperty, object) AvaloniaObject.SetCurrentValue<T>(StyledProperty<T>, T) AvaloniaObject.Bind(AvaloniaProperty, IBinding) AvaloniaObject.Bind(AvaloniaProperty, IObservable<object>, BindingPriority) AvaloniaObject.Bind<T>(StyledProperty<T>, IObservable<object>, BindingPriority) AvaloniaObject.Bind<T>(StyledProperty<T>, IObservable<T>, BindingPriority) AvaloniaObject.Bind<T>(StyledProperty<T>, IObservable<BindingValue<T>>, BindingPriority) AvaloniaObject.Bind<T>(DirectPropertyBase<T>, IObservable<object>) AvaloniaObject.Bind<T>(DirectPropertyBase<T>, IObservable<T>) AvaloniaObject.Bind<T>(DirectPropertyBase<T>, IObservable<BindingValue<T>>) AvaloniaObject.CoerceValue(AvaloniaProperty) AvaloniaObject.UpdateDataValidation(AvaloniaProperty, BindingValueType, Exception) AvaloniaObject.RaisePropertyChanged<T>(DirectPropertyBase<T>, T, T) AvaloniaObject.SetAndRaise<T>(DirectPropertyBase<T>, ref T, T) AvaloniaObject.InheritanceParent AvaloniaObject.this[AvaloniaProperty] AvaloniaObject.this[IndexerDescriptor] AvaloniaObject.PropertyChanged object.Equals(object, object) object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors IncomePage() public IncomePage() Methods InitializeComponent(bool) Wires up the controls and optionally loads XAML markup and attaches dev tools (if Avalonia.Diagnostics package is referenced). public void InitializeComponent(bool loadXaml = true) Parameters loadXaml bool Should the XAML be loaded into the component."
  },
  "api/PersonalBudgeting.Views.Pages.LoginPage.html": {
    "href": "api/PersonalBudgeting.Views.Pages.LoginPage.html",
    "title": "Class LoginPage | PersonalBudgeting_BackendDocs",
    "summary": "Class LoginPage Namespace PersonalBudgeting.Views.Pages Assembly PersonalBudgeting.dll public class LoginPage : UserControl, INotifyPropertyChanged, IDataContextProvider, ILogical, IThemeVariantHost, IResourceHost, IResourceNode, IStyleHost, ISetLogicalParent, ISetInheritanceParent, ISupportInitialize, IStyleable, INamed, IInputElement, IDataTemplateHost, ISetterValue Inheritance object AvaloniaObject Animatable StyledElement Visual Layoutable Interactive InputElement Control TemplatedControl ContentControl UserControl LoginPage Implements INotifyPropertyChanged IDataContextProvider ILogical IThemeVariantHost IResourceHost IResourceNode IStyleHost ISetLogicalParent ISetInheritanceParent ISupportInitialize IStyleable INamed IInputElement IDataTemplateHost ISetterValue Inherited Members ContentControl.ContentProperty ContentControl.ContentTemplateProperty ContentControl.HorizontalContentAlignmentProperty ContentControl.VerticalContentAlignmentProperty ContentControl.OnPropertyChanged(AvaloniaPropertyChangedEventArgs) ContentControl.RegisterContentPresenter(ContentPresenter) ContentControl.Content ContentControl.ContentTemplate ContentControl.Presenter ContentControl.HorizontalContentAlignment ContentControl.VerticalContentAlignment TemplatedControl.BackgroundProperty TemplatedControl.BackgroundSizingProperty TemplatedControl.BorderBrushProperty TemplatedControl.BorderThicknessProperty TemplatedControl.CornerRadiusProperty TemplatedControl.FontFamilyProperty TemplatedControl.FontFeaturesProperty TemplatedControl.FontSizeProperty TemplatedControl.FontStyleProperty TemplatedControl.FontWeightProperty TemplatedControl.FontStretchProperty TemplatedControl.ForegroundProperty TemplatedControl.PaddingProperty TemplatedControl.TemplateProperty TemplatedControl.IsTemplateFocusTargetProperty TemplatedControl.TemplateAppliedEvent TemplatedControl.GetIsTemplateFocusTarget(Control) TemplatedControl.SetIsTemplateFocusTarget(Control, bool) TemplatedControl.ApplyTemplate() TemplatedControl.GetTemplateFocusTarget() TemplatedControl.OnAttachedToLogicalTree(LogicalTreeAttachmentEventArgs) TemplatedControl.OnDetachedFromLogicalTree(LogicalTreeAttachmentEventArgs) TemplatedControl.OnApplyTemplate(TemplateAppliedEventArgs) TemplatedControl.OnTemplateChanged(AvaloniaPropertyChangedEventArgs) TemplatedControl.Background TemplatedControl.BackgroundSizing TemplatedControl.BorderBrush TemplatedControl.BorderThickness TemplatedControl.CornerRadius TemplatedControl.FontFamily TemplatedControl.FontFeatures TemplatedControl.FontSize TemplatedControl.FontStyle TemplatedControl.FontWeight TemplatedControl.FontStretch TemplatedControl.Foreground TemplatedControl.Padding TemplatedControl.Template TemplatedControl.TemplateApplied Control.FocusAdornerProperty Control.TagProperty Control.ContextMenuProperty Control.ContextFlyoutProperty Control.RequestBringIntoViewEvent Control.ContextRequestedEvent Control.LoadedEvent Control.UnloadedEvent Control.SizeChangedEvent Control.OnLoaded(RoutedEventArgs) Control.OnUnloaded(RoutedEventArgs) Control.OnSizeChanged(SizeChangedEventArgs) Control.OnAttachedToVisualTreeCore(VisualTreeAttachmentEventArgs) Control.OnDetachedFromVisualTreeCore(VisualTreeAttachmentEventArgs) Control.OnGotFocus(GotFocusEventArgs) Control.OnLostFocus(RoutedEventArgs) Control.OnCreateAutomationPeer() Control.OnPointerReleased(PointerReleasedEventArgs) Control.OnKeyUp(KeyEventArgs) Control.FocusAdorner Control.DataTemplates Control.ContextMenu Control.ContextFlyout Control.IsLoaded Control.Tag Control.ContextRequested Control.Loaded Control.Unloaded Control.SizeChanged InputElement.FocusableProperty InputElement.IsEnabledProperty InputElement.IsEffectivelyEnabledProperty InputElement.CursorProperty InputElement.IsKeyboardFocusWithinProperty InputElement.IsFocusedProperty InputElement.IsHitTestVisibleProperty InputElement.IsPointerOverProperty InputElement.IsTabStopProperty InputElement.GotFocusEvent InputElement.LostFocusEvent InputElement.KeyDownEvent InputElement.KeyUpEvent InputElement.TabIndexProperty InputElement.TextInputEvent InputElement.TextInputMethodClientRequestedEvent InputElement.PointerEnteredEvent InputElement.PointerExitedEvent InputElement.PointerMovedEvent InputElement.PointerPressedEvent InputElement.PointerReleasedEvent InputElement.PointerCaptureLostEvent InputElement.PointerWheelChangedEvent InputElement.TappedEvent InputElement.HoldingEvent InputElement.DoubleTappedEvent InputElement.Focus(NavigationMethod, KeyModifiers) InputElement.OnKeyDown(KeyEventArgs) InputElement.OnTextInput(TextInputEventArgs) InputElement.OnPointerEntered(PointerEventArgs) InputElement.OnPointerExited(PointerEventArgs) InputElement.OnPointerMoved(PointerEventArgs) InputElement.OnPointerPressed(PointerPressedEventArgs) InputElement.OnPointerCaptureLost(PointerCaptureLostEventArgs) InputElement.OnPointerWheelChanged(PointerWheelEventArgs) InputElement.UpdateIsEffectivelyEnabled() InputElement.Focusable InputElement.IsEnabled InputElement.Cursor InputElement.IsKeyboardFocusWithin InputElement.IsFocused InputElement.IsHitTestVisible InputElement.IsPointerOver InputElement.IsTabStop InputElement.IsEffectivelyEnabled InputElement.TabIndex InputElement.KeyBindings InputElement.IsEnabledCore InputElement.GestureRecognizers InputElement.GotFocus InputElement.LostFocus InputElement.KeyDown InputElement.KeyUp InputElement.TextInput InputElement.TextInputMethodClientRequested InputElement.PointerEntered InputElement.PointerExited InputElement.PointerMoved InputElement.PointerPressed InputElement.PointerReleased InputElement.PointerCaptureLost InputElement.PointerWheelChanged InputElement.Tapped InputElement.Holding InputElement.DoubleTapped Interactive.AddHandler(RoutedEvent, Delegate, RoutingStrategies, bool) Interactive.AddHandler<TEventArgs>(RoutedEvent<TEventArgs>, EventHandler<TEventArgs>, RoutingStrategies, bool) Interactive.RemoveHandler(RoutedEvent, Delegate) Interactive.RemoveHandler<TEventArgs>(RoutedEvent<TEventArgs>, EventHandler<TEventArgs>) Interactive.RaiseEvent(RoutedEventArgs) Interactive.BuildEventRoute(RoutedEvent) Layoutable.DesiredSizeProperty Layoutable.WidthProperty Layoutable.HeightProperty Layoutable.MinWidthProperty Layoutable.MaxWidthProperty Layoutable.MinHeightProperty Layoutable.MaxHeightProperty Layoutable.MarginProperty Layoutable.HorizontalAlignmentProperty Layoutable.VerticalAlignmentProperty Layoutable.UseLayoutRoundingProperty Layoutable.UpdateLayout() Layoutable.Measure(Size) Layoutable.Arrange(Rect) Layoutable.InvalidateMeasure() Layoutable.InvalidateArrange() Layoutable.AffectsMeasure<T>(params AvaloniaProperty[]) Layoutable.AffectsArrange<T>(params AvaloniaProperty[]) Layoutable.MeasureCore(Size) Layoutable.MeasureOverride(Size) Layoutable.ArrangeCore(Rect) Layoutable.ArrangeOverride(Size) Layoutable.OnMeasureInvalidated() Layoutable.OnVisualParentChanged(Visual, Visual) Layoutable.Width Layoutable.Height Layoutable.MinWidth Layoutable.MaxWidth Layoutable.MinHeight Layoutable.MaxHeight Layoutable.Margin Layoutable.HorizontalAlignment Layoutable.VerticalAlignment Layoutable.DesiredSize Layoutable.IsMeasureValid Layoutable.IsArrangeValid Layoutable.UseLayoutRounding Layoutable.EffectiveViewportChanged Layoutable.LayoutUpdated Visual.BoundsProperty Visual.ClipToBoundsProperty Visual.ClipProperty Visual.IsVisibleProperty Visual.OpacityProperty Visual.OpacityMaskProperty Visual.EffectProperty Visual.HasMirrorTransformProperty Visual.RenderTransformProperty Visual.RenderTransformOriginProperty Visual.FlowDirectionProperty Visual.VisualParentProperty Visual.ZIndexProperty Visual.GetFlowDirection(Visual) Visual.SetFlowDirection(Visual, FlowDirection) Visual.InvalidateVisual() Visual.Render(DrawingContext) Visual.AffectsRender<T>(params AvaloniaProperty[]) Visual.LogicalChildrenCollectionChanged(object, NotifyCollectionChangedEventArgs) Visual.OnAttachedToVisualTree(VisualTreeAttachmentEventArgs) Visual.OnDetachedFromVisualTree(VisualTreeAttachmentEventArgs) Visual.InvalidateMirrorTransform() Visual.Bounds Visual.ClipToBounds Visual.Clip Visual.IsEffectivelyVisible Visual.IsVisible Visual.Opacity Visual.OpacityMask Visual.Effect Visual.HasMirrorTransform Visual.RenderTransform Visual.RenderTransformOrigin Visual.FlowDirection Visual.ZIndex Visual.VisualChildren Visual.VisualRoot Visual.BypassFlowDirectionPolicies Visual.AttachedToVisualTree Visual.DetachedFromVisualTree StyledElement.DataContextProperty StyledElement.NameProperty StyledElement.ParentProperty StyledElement.TemplatedParentProperty StyledElement.ThemeProperty StyledElement.BeginInit() StyledElement.EndInit() StyledElement.ApplyStyling() StyledElement.InitializeIfNeeded() StyledElement.TryGetResource(object, ThemeVariant, out object) StyledElement.OnDataContextChanged(EventArgs) StyledElement.OnDataContextBeginUpdate() StyledElement.OnDataContextEndUpdate() StyledElement.OnInitialized() StyledElement.Name StyledElement.Classes StyledElement.DataContext StyledElement.IsInitialized StyledElement.Styles StyledElement.StyleKey StyledElement.Resources StyledElement.TemplatedParent StyledElement.Theme StyledElement.LogicalChildren StyledElement.PseudoClasses StyledElement.StyleKeyOverride StyledElement.Parent StyledElement.ActualThemeVariant StyledElement.AttachedToLogicalTree StyledElement.DetachedFromLogicalTree StyledElement.DataContextChanged StyledElement.Initialized StyledElement.ResourcesChanged StyledElement.ActualThemeVariantChanged Animatable.TransitionsProperty Animatable.OnPropertyChangedCore(AvaloniaPropertyChangedEventArgs) Animatable.Transitions AvaloniaObject.CheckAccess() AvaloniaObject.VerifyAccess() AvaloniaObject.ClearValue(AvaloniaProperty) AvaloniaObject.ClearValue<T>(AvaloniaProperty<T>) AvaloniaObject.ClearValue<T>(StyledProperty<T>) AvaloniaObject.ClearValue<T>(DirectPropertyBase<T>) AvaloniaObject.Equals(object) AvaloniaObject.GetHashCode() AvaloniaObject.GetValue(AvaloniaProperty) AvaloniaObject.GetValue<T>(StyledProperty<T>) AvaloniaObject.GetValue<T>(DirectPropertyBase<T>) AvaloniaObject.GetBaseValue<T>(StyledProperty<T>) AvaloniaObject.IsAnimating(AvaloniaProperty) AvaloniaObject.IsSet(AvaloniaProperty) AvaloniaObject.SetValue(AvaloniaProperty, object, BindingPriority) AvaloniaObject.SetValue<T>(StyledProperty<T>, T, BindingPriority) AvaloniaObject.SetValue<T>(DirectPropertyBase<T>, T) AvaloniaObject.SetCurrentValue(AvaloniaProperty, object) AvaloniaObject.SetCurrentValue<T>(StyledProperty<T>, T) AvaloniaObject.Bind(AvaloniaProperty, IBinding) AvaloniaObject.Bind(AvaloniaProperty, IObservable<object>, BindingPriority) AvaloniaObject.Bind<T>(StyledProperty<T>, IObservable<object>, BindingPriority) AvaloniaObject.Bind<T>(StyledProperty<T>, IObservable<T>, BindingPriority) AvaloniaObject.Bind<T>(StyledProperty<T>, IObservable<BindingValue<T>>, BindingPriority) AvaloniaObject.Bind<T>(DirectPropertyBase<T>, IObservable<object>) AvaloniaObject.Bind<T>(DirectPropertyBase<T>, IObservable<T>) AvaloniaObject.Bind<T>(DirectPropertyBase<T>, IObservable<BindingValue<T>>) AvaloniaObject.CoerceValue(AvaloniaProperty) AvaloniaObject.UpdateDataValidation(AvaloniaProperty, BindingValueType, Exception) AvaloniaObject.RaisePropertyChanged<T>(DirectPropertyBase<T>, T, T) AvaloniaObject.SetAndRaise<T>(DirectPropertyBase<T>, ref T, T) AvaloniaObject.InheritanceParent AvaloniaObject.this[AvaloniaProperty] AvaloniaObject.this[IndexerDescriptor] AvaloniaObject.PropertyChanged object.Equals(object, object) object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors LoginPage() public LoginPage() Methods InitializeComponent(bool) Wires up the controls and optionally loads XAML markup and attaches dev tools (if Avalonia.Diagnostics package is referenced). public void InitializeComponent(bool loadXaml = true) Parameters loadXaml bool Should the XAML be loaded into the component."
  },
  "api/PersonalBudgeting.Views.Pages.ProfilePage.html": {
    "href": "api/PersonalBudgeting.Views.Pages.ProfilePage.html",
    "title": "Class ProfilePage | PersonalBudgeting_BackendDocs",
    "summary": "Class ProfilePage Namespace PersonalBudgeting.Views.Pages Assembly PersonalBudgeting.dll public class ProfilePage : UserControl, INotifyPropertyChanged, IDataContextProvider, ILogical, IThemeVariantHost, IResourceHost, IResourceNode, IStyleHost, ISetLogicalParent, ISetInheritanceParent, ISupportInitialize, IStyleable, INamed, IInputElement, IDataTemplateHost, ISetterValue Inheritance object AvaloniaObject Animatable StyledElement Visual Layoutable Interactive InputElement Control TemplatedControl ContentControl UserControl ProfilePage Implements INotifyPropertyChanged IDataContextProvider ILogical IThemeVariantHost IResourceHost IResourceNode IStyleHost ISetLogicalParent ISetInheritanceParent ISupportInitialize IStyleable INamed IInputElement IDataTemplateHost ISetterValue Inherited Members ContentControl.ContentProperty ContentControl.ContentTemplateProperty ContentControl.HorizontalContentAlignmentProperty ContentControl.VerticalContentAlignmentProperty ContentControl.OnPropertyChanged(AvaloniaPropertyChangedEventArgs) ContentControl.RegisterContentPresenter(ContentPresenter) ContentControl.Content ContentControl.ContentTemplate ContentControl.Presenter ContentControl.HorizontalContentAlignment ContentControl.VerticalContentAlignment TemplatedControl.BackgroundProperty TemplatedControl.BackgroundSizingProperty TemplatedControl.BorderBrushProperty TemplatedControl.BorderThicknessProperty TemplatedControl.CornerRadiusProperty TemplatedControl.FontFamilyProperty TemplatedControl.FontFeaturesProperty TemplatedControl.FontSizeProperty TemplatedControl.FontStyleProperty TemplatedControl.FontWeightProperty TemplatedControl.FontStretchProperty TemplatedControl.ForegroundProperty TemplatedControl.PaddingProperty TemplatedControl.TemplateProperty TemplatedControl.IsTemplateFocusTargetProperty TemplatedControl.TemplateAppliedEvent TemplatedControl.GetIsTemplateFocusTarget(Control) TemplatedControl.SetIsTemplateFocusTarget(Control, bool) TemplatedControl.ApplyTemplate() TemplatedControl.GetTemplateFocusTarget() TemplatedControl.OnAttachedToLogicalTree(LogicalTreeAttachmentEventArgs) TemplatedControl.OnDetachedFromLogicalTree(LogicalTreeAttachmentEventArgs) TemplatedControl.OnApplyTemplate(TemplateAppliedEventArgs) TemplatedControl.OnTemplateChanged(AvaloniaPropertyChangedEventArgs) TemplatedControl.Background TemplatedControl.BackgroundSizing TemplatedControl.BorderBrush TemplatedControl.BorderThickness TemplatedControl.CornerRadius TemplatedControl.FontFamily TemplatedControl.FontFeatures TemplatedControl.FontSize TemplatedControl.FontStyle TemplatedControl.FontWeight TemplatedControl.FontStretch TemplatedControl.Foreground TemplatedControl.Padding TemplatedControl.Template TemplatedControl.TemplateApplied Control.FocusAdornerProperty Control.TagProperty Control.ContextMenuProperty Control.ContextFlyoutProperty Control.RequestBringIntoViewEvent Control.ContextRequestedEvent Control.LoadedEvent Control.UnloadedEvent Control.SizeChangedEvent Control.OnLoaded(RoutedEventArgs) Control.OnUnloaded(RoutedEventArgs) Control.OnSizeChanged(SizeChangedEventArgs) Control.OnAttachedToVisualTreeCore(VisualTreeAttachmentEventArgs) Control.OnDetachedFromVisualTreeCore(VisualTreeAttachmentEventArgs) Control.OnGotFocus(GotFocusEventArgs) Control.OnLostFocus(RoutedEventArgs) Control.OnCreateAutomationPeer() Control.OnPointerReleased(PointerReleasedEventArgs) Control.OnKeyUp(KeyEventArgs) Control.FocusAdorner Control.DataTemplates Control.ContextMenu Control.ContextFlyout Control.IsLoaded Control.Tag Control.ContextRequested Control.Loaded Control.Unloaded Control.SizeChanged InputElement.FocusableProperty InputElement.IsEnabledProperty InputElement.IsEffectivelyEnabledProperty InputElement.CursorProperty InputElement.IsKeyboardFocusWithinProperty InputElement.IsFocusedProperty InputElement.IsHitTestVisibleProperty InputElement.IsPointerOverProperty InputElement.IsTabStopProperty InputElement.GotFocusEvent InputElement.LostFocusEvent InputElement.KeyDownEvent InputElement.KeyUpEvent InputElement.TabIndexProperty InputElement.TextInputEvent InputElement.TextInputMethodClientRequestedEvent InputElement.PointerEnteredEvent InputElement.PointerExitedEvent InputElement.PointerMovedEvent InputElement.PointerPressedEvent InputElement.PointerReleasedEvent InputElement.PointerCaptureLostEvent InputElement.PointerWheelChangedEvent InputElement.TappedEvent InputElement.HoldingEvent InputElement.DoubleTappedEvent InputElement.Focus(NavigationMethod, KeyModifiers) InputElement.OnKeyDown(KeyEventArgs) InputElement.OnTextInput(TextInputEventArgs) InputElement.OnPointerEntered(PointerEventArgs) InputElement.OnPointerExited(PointerEventArgs) InputElement.OnPointerMoved(PointerEventArgs) InputElement.OnPointerPressed(PointerPressedEventArgs) InputElement.OnPointerCaptureLost(PointerCaptureLostEventArgs) InputElement.OnPointerWheelChanged(PointerWheelEventArgs) InputElement.UpdateIsEffectivelyEnabled() InputElement.Focusable InputElement.IsEnabled InputElement.Cursor InputElement.IsKeyboardFocusWithin InputElement.IsFocused InputElement.IsHitTestVisible InputElement.IsPointerOver InputElement.IsTabStop InputElement.IsEffectivelyEnabled InputElement.TabIndex InputElement.KeyBindings InputElement.IsEnabledCore InputElement.GestureRecognizers InputElement.GotFocus InputElement.LostFocus InputElement.KeyDown InputElement.KeyUp InputElement.TextInput InputElement.TextInputMethodClientRequested InputElement.PointerEntered InputElement.PointerExited InputElement.PointerMoved InputElement.PointerPressed InputElement.PointerReleased InputElement.PointerCaptureLost InputElement.PointerWheelChanged InputElement.Tapped InputElement.Holding InputElement.DoubleTapped Interactive.AddHandler(RoutedEvent, Delegate, RoutingStrategies, bool) Interactive.AddHandler<TEventArgs>(RoutedEvent<TEventArgs>, EventHandler<TEventArgs>, RoutingStrategies, bool) Interactive.RemoveHandler(RoutedEvent, Delegate) Interactive.RemoveHandler<TEventArgs>(RoutedEvent<TEventArgs>, EventHandler<TEventArgs>) Interactive.RaiseEvent(RoutedEventArgs) Interactive.BuildEventRoute(RoutedEvent) Layoutable.DesiredSizeProperty Layoutable.WidthProperty Layoutable.HeightProperty Layoutable.MinWidthProperty Layoutable.MaxWidthProperty Layoutable.MinHeightProperty Layoutable.MaxHeightProperty Layoutable.MarginProperty Layoutable.HorizontalAlignmentProperty Layoutable.VerticalAlignmentProperty Layoutable.UseLayoutRoundingProperty Layoutable.UpdateLayout() Layoutable.Measure(Size) Layoutable.Arrange(Rect) Layoutable.InvalidateMeasure() Layoutable.InvalidateArrange() Layoutable.AffectsMeasure<T>(params AvaloniaProperty[]) Layoutable.AffectsArrange<T>(params AvaloniaProperty[]) Layoutable.MeasureCore(Size) Layoutable.MeasureOverride(Size) Layoutable.ArrangeCore(Rect) Layoutable.ArrangeOverride(Size) Layoutable.OnMeasureInvalidated() Layoutable.OnVisualParentChanged(Visual, Visual) Layoutable.Width Layoutable.Height Layoutable.MinWidth Layoutable.MaxWidth Layoutable.MinHeight Layoutable.MaxHeight Layoutable.Margin Layoutable.HorizontalAlignment Layoutable.VerticalAlignment Layoutable.DesiredSize Layoutable.IsMeasureValid Layoutable.IsArrangeValid Layoutable.UseLayoutRounding Layoutable.EffectiveViewportChanged Layoutable.LayoutUpdated Visual.BoundsProperty Visual.ClipToBoundsProperty Visual.ClipProperty Visual.IsVisibleProperty Visual.OpacityProperty Visual.OpacityMaskProperty Visual.EffectProperty Visual.HasMirrorTransformProperty Visual.RenderTransformProperty Visual.RenderTransformOriginProperty Visual.FlowDirectionProperty Visual.VisualParentProperty Visual.ZIndexProperty Visual.GetFlowDirection(Visual) Visual.SetFlowDirection(Visual, FlowDirection) Visual.InvalidateVisual() Visual.Render(DrawingContext) Visual.AffectsRender<T>(params AvaloniaProperty[]) Visual.LogicalChildrenCollectionChanged(object, NotifyCollectionChangedEventArgs) Visual.OnAttachedToVisualTree(VisualTreeAttachmentEventArgs) Visual.OnDetachedFromVisualTree(VisualTreeAttachmentEventArgs) Visual.InvalidateMirrorTransform() Visual.Bounds Visual.ClipToBounds Visual.Clip Visual.IsEffectivelyVisible Visual.IsVisible Visual.Opacity Visual.OpacityMask Visual.Effect Visual.HasMirrorTransform Visual.RenderTransform Visual.RenderTransformOrigin Visual.FlowDirection Visual.ZIndex Visual.VisualChildren Visual.VisualRoot Visual.BypassFlowDirectionPolicies Visual.AttachedToVisualTree Visual.DetachedFromVisualTree StyledElement.DataContextProperty StyledElement.NameProperty StyledElement.ParentProperty StyledElement.TemplatedParentProperty StyledElement.ThemeProperty StyledElement.BeginInit() StyledElement.EndInit() StyledElement.ApplyStyling() StyledElement.InitializeIfNeeded() StyledElement.TryGetResource(object, ThemeVariant, out object) StyledElement.OnDataContextChanged(EventArgs) StyledElement.OnDataContextBeginUpdate() StyledElement.OnDataContextEndUpdate() StyledElement.OnInitialized() StyledElement.Name StyledElement.Classes StyledElement.DataContext StyledElement.IsInitialized StyledElement.Styles StyledElement.StyleKey StyledElement.Resources StyledElement.TemplatedParent StyledElement.Theme StyledElement.LogicalChildren StyledElement.PseudoClasses StyledElement.StyleKeyOverride StyledElement.Parent StyledElement.ActualThemeVariant StyledElement.AttachedToLogicalTree StyledElement.DetachedFromLogicalTree StyledElement.DataContextChanged StyledElement.Initialized StyledElement.ResourcesChanged StyledElement.ActualThemeVariantChanged Animatable.TransitionsProperty Animatable.OnPropertyChangedCore(AvaloniaPropertyChangedEventArgs) Animatable.Transitions AvaloniaObject.CheckAccess() AvaloniaObject.VerifyAccess() AvaloniaObject.ClearValue(AvaloniaProperty) AvaloniaObject.ClearValue<T>(AvaloniaProperty<T>) AvaloniaObject.ClearValue<T>(StyledProperty<T>) AvaloniaObject.ClearValue<T>(DirectPropertyBase<T>) AvaloniaObject.Equals(object) AvaloniaObject.GetHashCode() AvaloniaObject.GetValue(AvaloniaProperty) AvaloniaObject.GetValue<T>(StyledProperty<T>) AvaloniaObject.GetValue<T>(DirectPropertyBase<T>) AvaloniaObject.GetBaseValue<T>(StyledProperty<T>) AvaloniaObject.IsAnimating(AvaloniaProperty) AvaloniaObject.IsSet(AvaloniaProperty) AvaloniaObject.SetValue(AvaloniaProperty, object, BindingPriority) AvaloniaObject.SetValue<T>(StyledProperty<T>, T, BindingPriority) AvaloniaObject.SetValue<T>(DirectPropertyBase<T>, T) AvaloniaObject.SetCurrentValue(AvaloniaProperty, object) AvaloniaObject.SetCurrentValue<T>(StyledProperty<T>, T) AvaloniaObject.Bind(AvaloniaProperty, IBinding) AvaloniaObject.Bind(AvaloniaProperty, IObservable<object>, BindingPriority) AvaloniaObject.Bind<T>(StyledProperty<T>, IObservable<object>, BindingPriority) AvaloniaObject.Bind<T>(StyledProperty<T>, IObservable<T>, BindingPriority) AvaloniaObject.Bind<T>(StyledProperty<T>, IObservable<BindingValue<T>>, BindingPriority) AvaloniaObject.Bind<T>(DirectPropertyBase<T>, IObservable<object>) AvaloniaObject.Bind<T>(DirectPropertyBase<T>, IObservable<T>) AvaloniaObject.Bind<T>(DirectPropertyBase<T>, IObservable<BindingValue<T>>) AvaloniaObject.CoerceValue(AvaloniaProperty) AvaloniaObject.UpdateDataValidation(AvaloniaProperty, BindingValueType, Exception) AvaloniaObject.RaisePropertyChanged<T>(DirectPropertyBase<T>, T, T) AvaloniaObject.SetAndRaise<T>(DirectPropertyBase<T>, ref T, T) AvaloniaObject.InheritanceParent AvaloniaObject.this[AvaloniaProperty] AvaloniaObject.this[IndexerDescriptor] AvaloniaObject.PropertyChanged object.Equals(object, object) object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors ProfilePage() public ProfilePage() Methods InitializeComponent(bool) Wires up the controls and optionally loads XAML markup and attaches dev tools (if Avalonia.Diagnostics package is referenced). public void InitializeComponent(bool loadXaml = true) Parameters loadXaml bool Should the XAML be loaded into the component."
  },
  "api/PersonalBudgeting.Views.Pages.RemindersPage.html": {
    "href": "api/PersonalBudgeting.Views.Pages.RemindersPage.html",
    "title": "Class RemindersPage | PersonalBudgeting_BackendDocs",
    "summary": "Class RemindersPage Namespace PersonalBudgeting.Views.Pages Assembly PersonalBudgeting.dll public class RemindersPage : UserControl, INotifyPropertyChanged, IDataContextProvider, ILogical, IThemeVariantHost, IResourceHost, IResourceNode, IStyleHost, ISetLogicalParent, ISetInheritanceParent, ISupportInitialize, IStyleable, INamed, IInputElement, IDataTemplateHost, ISetterValue Inheritance object AvaloniaObject Animatable StyledElement Visual Layoutable Interactive InputElement Control TemplatedControl ContentControl UserControl RemindersPage Implements INotifyPropertyChanged IDataContextProvider ILogical IThemeVariantHost IResourceHost IResourceNode IStyleHost ISetLogicalParent ISetInheritanceParent ISupportInitialize IStyleable INamed IInputElement IDataTemplateHost ISetterValue Inherited Members ContentControl.ContentProperty ContentControl.ContentTemplateProperty ContentControl.HorizontalContentAlignmentProperty ContentControl.VerticalContentAlignmentProperty ContentControl.OnPropertyChanged(AvaloniaPropertyChangedEventArgs) ContentControl.RegisterContentPresenter(ContentPresenter) ContentControl.Content ContentControl.ContentTemplate ContentControl.Presenter ContentControl.HorizontalContentAlignment ContentControl.VerticalContentAlignment TemplatedControl.BackgroundProperty TemplatedControl.BackgroundSizingProperty TemplatedControl.BorderBrushProperty TemplatedControl.BorderThicknessProperty TemplatedControl.CornerRadiusProperty TemplatedControl.FontFamilyProperty TemplatedControl.FontFeaturesProperty TemplatedControl.FontSizeProperty TemplatedControl.FontStyleProperty TemplatedControl.FontWeightProperty TemplatedControl.FontStretchProperty TemplatedControl.ForegroundProperty TemplatedControl.PaddingProperty TemplatedControl.TemplateProperty TemplatedControl.IsTemplateFocusTargetProperty TemplatedControl.TemplateAppliedEvent TemplatedControl.GetIsTemplateFocusTarget(Control) TemplatedControl.SetIsTemplateFocusTarget(Control, bool) TemplatedControl.ApplyTemplate() TemplatedControl.GetTemplateFocusTarget() TemplatedControl.OnAttachedToLogicalTree(LogicalTreeAttachmentEventArgs) TemplatedControl.OnDetachedFromLogicalTree(LogicalTreeAttachmentEventArgs) TemplatedControl.OnApplyTemplate(TemplateAppliedEventArgs) TemplatedControl.OnTemplateChanged(AvaloniaPropertyChangedEventArgs) TemplatedControl.Background TemplatedControl.BackgroundSizing TemplatedControl.BorderBrush TemplatedControl.BorderThickness TemplatedControl.CornerRadius TemplatedControl.FontFamily TemplatedControl.FontFeatures TemplatedControl.FontSize TemplatedControl.FontStyle TemplatedControl.FontWeight TemplatedControl.FontStretch TemplatedControl.Foreground TemplatedControl.Padding TemplatedControl.Template TemplatedControl.TemplateApplied Control.FocusAdornerProperty Control.TagProperty Control.ContextMenuProperty Control.ContextFlyoutProperty Control.RequestBringIntoViewEvent Control.ContextRequestedEvent Control.LoadedEvent Control.UnloadedEvent Control.SizeChangedEvent Control.OnLoaded(RoutedEventArgs) Control.OnUnloaded(RoutedEventArgs) Control.OnSizeChanged(SizeChangedEventArgs) Control.OnAttachedToVisualTreeCore(VisualTreeAttachmentEventArgs) Control.OnDetachedFromVisualTreeCore(VisualTreeAttachmentEventArgs) Control.OnGotFocus(GotFocusEventArgs) Control.OnLostFocus(RoutedEventArgs) Control.OnCreateAutomationPeer() Control.OnPointerReleased(PointerReleasedEventArgs) Control.OnKeyUp(KeyEventArgs) Control.FocusAdorner Control.DataTemplates Control.ContextMenu Control.ContextFlyout Control.IsLoaded Control.Tag Control.ContextRequested Control.Loaded Control.Unloaded Control.SizeChanged InputElement.FocusableProperty InputElement.IsEnabledProperty InputElement.IsEffectivelyEnabledProperty InputElement.CursorProperty InputElement.IsKeyboardFocusWithinProperty InputElement.IsFocusedProperty InputElement.IsHitTestVisibleProperty InputElement.IsPointerOverProperty InputElement.IsTabStopProperty InputElement.GotFocusEvent InputElement.LostFocusEvent InputElement.KeyDownEvent InputElement.KeyUpEvent InputElement.TabIndexProperty InputElement.TextInputEvent InputElement.TextInputMethodClientRequestedEvent InputElement.PointerEnteredEvent InputElement.PointerExitedEvent InputElement.PointerMovedEvent InputElement.PointerPressedEvent InputElement.PointerReleasedEvent InputElement.PointerCaptureLostEvent InputElement.PointerWheelChangedEvent InputElement.TappedEvent InputElement.HoldingEvent InputElement.DoubleTappedEvent InputElement.Focus(NavigationMethod, KeyModifiers) InputElement.OnKeyDown(KeyEventArgs) InputElement.OnTextInput(TextInputEventArgs) InputElement.OnPointerEntered(PointerEventArgs) InputElement.OnPointerExited(PointerEventArgs) InputElement.OnPointerMoved(PointerEventArgs) InputElement.OnPointerPressed(PointerPressedEventArgs) InputElement.OnPointerCaptureLost(PointerCaptureLostEventArgs) InputElement.OnPointerWheelChanged(PointerWheelEventArgs) InputElement.UpdateIsEffectivelyEnabled() InputElement.Focusable InputElement.IsEnabled InputElement.Cursor InputElement.IsKeyboardFocusWithin InputElement.IsFocused InputElement.IsHitTestVisible InputElement.IsPointerOver InputElement.IsTabStop InputElement.IsEffectivelyEnabled InputElement.TabIndex InputElement.KeyBindings InputElement.IsEnabledCore InputElement.GestureRecognizers InputElement.GotFocus InputElement.LostFocus InputElement.KeyDown InputElement.KeyUp InputElement.TextInput InputElement.TextInputMethodClientRequested InputElement.PointerEntered InputElement.PointerExited InputElement.PointerMoved InputElement.PointerPressed InputElement.PointerReleased InputElement.PointerCaptureLost InputElement.PointerWheelChanged InputElement.Tapped InputElement.Holding InputElement.DoubleTapped Interactive.AddHandler(RoutedEvent, Delegate, RoutingStrategies, bool) Interactive.AddHandler<TEventArgs>(RoutedEvent<TEventArgs>, EventHandler<TEventArgs>, RoutingStrategies, bool) Interactive.RemoveHandler(RoutedEvent, Delegate) Interactive.RemoveHandler<TEventArgs>(RoutedEvent<TEventArgs>, EventHandler<TEventArgs>) Interactive.RaiseEvent(RoutedEventArgs) Interactive.BuildEventRoute(RoutedEvent) Layoutable.DesiredSizeProperty Layoutable.WidthProperty Layoutable.HeightProperty Layoutable.MinWidthProperty Layoutable.MaxWidthProperty Layoutable.MinHeightProperty Layoutable.MaxHeightProperty Layoutable.MarginProperty Layoutable.HorizontalAlignmentProperty Layoutable.VerticalAlignmentProperty Layoutable.UseLayoutRoundingProperty Layoutable.UpdateLayout() Layoutable.Measure(Size) Layoutable.Arrange(Rect) Layoutable.InvalidateMeasure() Layoutable.InvalidateArrange() Layoutable.AffectsMeasure<T>(params AvaloniaProperty[]) Layoutable.AffectsArrange<T>(params AvaloniaProperty[]) Layoutable.MeasureCore(Size) Layoutable.MeasureOverride(Size) Layoutable.ArrangeCore(Rect) Layoutable.ArrangeOverride(Size) Layoutable.OnMeasureInvalidated() Layoutable.OnVisualParentChanged(Visual, Visual) Layoutable.Width Layoutable.Height Layoutable.MinWidth Layoutable.MaxWidth Layoutable.MinHeight Layoutable.MaxHeight Layoutable.Margin Layoutable.HorizontalAlignment Layoutable.VerticalAlignment Layoutable.DesiredSize Layoutable.IsMeasureValid Layoutable.IsArrangeValid Layoutable.UseLayoutRounding Layoutable.EffectiveViewportChanged Layoutable.LayoutUpdated Visual.BoundsProperty Visual.ClipToBoundsProperty Visual.ClipProperty Visual.IsVisibleProperty Visual.OpacityProperty Visual.OpacityMaskProperty Visual.EffectProperty Visual.HasMirrorTransformProperty Visual.RenderTransformProperty Visual.RenderTransformOriginProperty Visual.FlowDirectionProperty Visual.VisualParentProperty Visual.ZIndexProperty Visual.GetFlowDirection(Visual) Visual.SetFlowDirection(Visual, FlowDirection) Visual.InvalidateVisual() Visual.Render(DrawingContext) Visual.AffectsRender<T>(params AvaloniaProperty[]) Visual.LogicalChildrenCollectionChanged(object, NotifyCollectionChangedEventArgs) Visual.OnAttachedToVisualTree(VisualTreeAttachmentEventArgs) Visual.OnDetachedFromVisualTree(VisualTreeAttachmentEventArgs) Visual.InvalidateMirrorTransform() Visual.Bounds Visual.ClipToBounds Visual.Clip Visual.IsEffectivelyVisible Visual.IsVisible Visual.Opacity Visual.OpacityMask Visual.Effect Visual.HasMirrorTransform Visual.RenderTransform Visual.RenderTransformOrigin Visual.FlowDirection Visual.ZIndex Visual.VisualChildren Visual.VisualRoot Visual.BypassFlowDirectionPolicies Visual.AttachedToVisualTree Visual.DetachedFromVisualTree StyledElement.DataContextProperty StyledElement.NameProperty StyledElement.ParentProperty StyledElement.TemplatedParentProperty StyledElement.ThemeProperty StyledElement.BeginInit() StyledElement.EndInit() StyledElement.ApplyStyling() StyledElement.InitializeIfNeeded() StyledElement.TryGetResource(object, ThemeVariant, out object) StyledElement.OnDataContextChanged(EventArgs) StyledElement.OnDataContextBeginUpdate() StyledElement.OnDataContextEndUpdate() StyledElement.OnInitialized() StyledElement.Name StyledElement.Classes StyledElement.DataContext StyledElement.IsInitialized StyledElement.Styles StyledElement.StyleKey StyledElement.Resources StyledElement.TemplatedParent StyledElement.Theme StyledElement.LogicalChildren StyledElement.PseudoClasses StyledElement.StyleKeyOverride StyledElement.Parent StyledElement.ActualThemeVariant StyledElement.AttachedToLogicalTree StyledElement.DetachedFromLogicalTree StyledElement.DataContextChanged StyledElement.Initialized StyledElement.ResourcesChanged StyledElement.ActualThemeVariantChanged Animatable.TransitionsProperty Animatable.OnPropertyChangedCore(AvaloniaPropertyChangedEventArgs) Animatable.Transitions AvaloniaObject.CheckAccess() AvaloniaObject.VerifyAccess() AvaloniaObject.ClearValue(AvaloniaProperty) AvaloniaObject.ClearValue<T>(AvaloniaProperty<T>) AvaloniaObject.ClearValue<T>(StyledProperty<T>) AvaloniaObject.ClearValue<T>(DirectPropertyBase<T>) AvaloniaObject.Equals(object) AvaloniaObject.GetHashCode() AvaloniaObject.GetValue(AvaloniaProperty) AvaloniaObject.GetValue<T>(StyledProperty<T>) AvaloniaObject.GetValue<T>(DirectPropertyBase<T>) AvaloniaObject.GetBaseValue<T>(StyledProperty<T>) AvaloniaObject.IsAnimating(AvaloniaProperty) AvaloniaObject.IsSet(AvaloniaProperty) AvaloniaObject.SetValue(AvaloniaProperty, object, BindingPriority) AvaloniaObject.SetValue<T>(StyledProperty<T>, T, BindingPriority) AvaloniaObject.SetValue<T>(DirectPropertyBase<T>, T) AvaloniaObject.SetCurrentValue(AvaloniaProperty, object) AvaloniaObject.SetCurrentValue<T>(StyledProperty<T>, T) AvaloniaObject.Bind(AvaloniaProperty, IBinding) AvaloniaObject.Bind(AvaloniaProperty, IObservable<object>, BindingPriority) AvaloniaObject.Bind<T>(StyledProperty<T>, IObservable<object>, BindingPriority) AvaloniaObject.Bind<T>(StyledProperty<T>, IObservable<T>, BindingPriority) AvaloniaObject.Bind<T>(StyledProperty<T>, IObservable<BindingValue<T>>, BindingPriority) AvaloniaObject.Bind<T>(DirectPropertyBase<T>, IObservable<object>) AvaloniaObject.Bind<T>(DirectPropertyBase<T>, IObservable<T>) AvaloniaObject.Bind<T>(DirectPropertyBase<T>, IObservable<BindingValue<T>>) AvaloniaObject.CoerceValue(AvaloniaProperty) AvaloniaObject.UpdateDataValidation(AvaloniaProperty, BindingValueType, Exception) AvaloniaObject.RaisePropertyChanged<T>(DirectPropertyBase<T>, T, T) AvaloniaObject.SetAndRaise<T>(DirectPropertyBase<T>, ref T, T) AvaloniaObject.InheritanceParent AvaloniaObject.this[AvaloniaProperty] AvaloniaObject.this[IndexerDescriptor] AvaloniaObject.PropertyChanged object.Equals(object, object) object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors RemindersPage() public RemindersPage() Methods InitializeComponent(bool) Wires up the controls and optionally loads XAML markup and attaches dev tools (if Avalonia.Diagnostics package is referenced). public void InitializeComponent(bool loadXaml = true) Parameters loadXaml bool Should the XAML be loaded into the component."
  },
  "api/PersonalBudgeting.Views.Pages.SettingsPage.html": {
    "href": "api/PersonalBudgeting.Views.Pages.SettingsPage.html",
    "title": "Class SettingsPage | PersonalBudgeting_BackendDocs",
    "summary": "Class SettingsPage Namespace PersonalBudgeting.Views.Pages Assembly PersonalBudgeting.dll public class SettingsPage : UserControl, INotifyPropertyChanged, IDataContextProvider, ILogical, IThemeVariantHost, IResourceHost, IResourceNode, IStyleHost, ISetLogicalParent, ISetInheritanceParent, ISupportInitialize, IStyleable, INamed, IInputElement, IDataTemplateHost, ISetterValue Inheritance object AvaloniaObject Animatable StyledElement Visual Layoutable Interactive InputElement Control TemplatedControl ContentControl UserControl SettingsPage Implements INotifyPropertyChanged IDataContextProvider ILogical IThemeVariantHost IResourceHost IResourceNode IStyleHost ISetLogicalParent ISetInheritanceParent ISupportInitialize IStyleable INamed IInputElement IDataTemplateHost ISetterValue Inherited Members ContentControl.ContentProperty ContentControl.ContentTemplateProperty ContentControl.HorizontalContentAlignmentProperty ContentControl.VerticalContentAlignmentProperty ContentControl.OnPropertyChanged(AvaloniaPropertyChangedEventArgs) ContentControl.RegisterContentPresenter(ContentPresenter) ContentControl.Content ContentControl.ContentTemplate ContentControl.Presenter ContentControl.HorizontalContentAlignment ContentControl.VerticalContentAlignment TemplatedControl.BackgroundProperty TemplatedControl.BackgroundSizingProperty TemplatedControl.BorderBrushProperty TemplatedControl.BorderThicknessProperty TemplatedControl.CornerRadiusProperty TemplatedControl.FontFamilyProperty TemplatedControl.FontFeaturesProperty TemplatedControl.FontSizeProperty TemplatedControl.FontStyleProperty TemplatedControl.FontWeightProperty TemplatedControl.FontStretchProperty TemplatedControl.ForegroundProperty TemplatedControl.PaddingProperty TemplatedControl.TemplateProperty TemplatedControl.IsTemplateFocusTargetProperty TemplatedControl.TemplateAppliedEvent TemplatedControl.GetIsTemplateFocusTarget(Control) TemplatedControl.SetIsTemplateFocusTarget(Control, bool) TemplatedControl.ApplyTemplate() TemplatedControl.GetTemplateFocusTarget() TemplatedControl.OnAttachedToLogicalTree(LogicalTreeAttachmentEventArgs) TemplatedControl.OnDetachedFromLogicalTree(LogicalTreeAttachmentEventArgs) TemplatedControl.OnApplyTemplate(TemplateAppliedEventArgs) TemplatedControl.OnTemplateChanged(AvaloniaPropertyChangedEventArgs) TemplatedControl.Background TemplatedControl.BackgroundSizing TemplatedControl.BorderBrush TemplatedControl.BorderThickness TemplatedControl.CornerRadius TemplatedControl.FontFamily TemplatedControl.FontFeatures TemplatedControl.FontSize TemplatedControl.FontStyle TemplatedControl.FontWeight TemplatedControl.FontStretch TemplatedControl.Foreground TemplatedControl.Padding TemplatedControl.Template TemplatedControl.TemplateApplied Control.FocusAdornerProperty Control.TagProperty Control.ContextMenuProperty Control.ContextFlyoutProperty Control.RequestBringIntoViewEvent Control.ContextRequestedEvent Control.LoadedEvent Control.UnloadedEvent Control.SizeChangedEvent Control.OnLoaded(RoutedEventArgs) Control.OnUnloaded(RoutedEventArgs) Control.OnSizeChanged(SizeChangedEventArgs) Control.OnAttachedToVisualTreeCore(VisualTreeAttachmentEventArgs) Control.OnDetachedFromVisualTreeCore(VisualTreeAttachmentEventArgs) Control.OnGotFocus(GotFocusEventArgs) Control.OnLostFocus(RoutedEventArgs) Control.OnCreateAutomationPeer() Control.OnPointerReleased(PointerReleasedEventArgs) Control.OnKeyUp(KeyEventArgs) Control.FocusAdorner Control.DataTemplates Control.ContextMenu Control.ContextFlyout Control.IsLoaded Control.Tag Control.ContextRequested Control.Loaded Control.Unloaded Control.SizeChanged InputElement.FocusableProperty InputElement.IsEnabledProperty InputElement.IsEffectivelyEnabledProperty InputElement.CursorProperty InputElement.IsKeyboardFocusWithinProperty InputElement.IsFocusedProperty InputElement.IsHitTestVisibleProperty InputElement.IsPointerOverProperty InputElement.IsTabStopProperty InputElement.GotFocusEvent InputElement.LostFocusEvent InputElement.KeyDownEvent InputElement.KeyUpEvent InputElement.TabIndexProperty InputElement.TextInputEvent InputElement.TextInputMethodClientRequestedEvent InputElement.PointerEnteredEvent InputElement.PointerExitedEvent InputElement.PointerMovedEvent InputElement.PointerPressedEvent InputElement.PointerReleasedEvent InputElement.PointerCaptureLostEvent InputElement.PointerWheelChangedEvent InputElement.TappedEvent InputElement.HoldingEvent InputElement.DoubleTappedEvent InputElement.Focus(NavigationMethod, KeyModifiers) InputElement.OnKeyDown(KeyEventArgs) InputElement.OnTextInput(TextInputEventArgs) InputElement.OnPointerEntered(PointerEventArgs) InputElement.OnPointerExited(PointerEventArgs) InputElement.OnPointerMoved(PointerEventArgs) InputElement.OnPointerPressed(PointerPressedEventArgs) InputElement.OnPointerCaptureLost(PointerCaptureLostEventArgs) InputElement.OnPointerWheelChanged(PointerWheelEventArgs) InputElement.UpdateIsEffectivelyEnabled() InputElement.Focusable InputElement.IsEnabled InputElement.Cursor InputElement.IsKeyboardFocusWithin InputElement.IsFocused InputElement.IsHitTestVisible InputElement.IsPointerOver InputElement.IsTabStop InputElement.IsEffectivelyEnabled InputElement.TabIndex InputElement.KeyBindings InputElement.IsEnabledCore InputElement.GestureRecognizers InputElement.GotFocus InputElement.LostFocus InputElement.KeyDown InputElement.KeyUp InputElement.TextInput InputElement.TextInputMethodClientRequested InputElement.PointerEntered InputElement.PointerExited InputElement.PointerMoved InputElement.PointerPressed InputElement.PointerReleased InputElement.PointerCaptureLost InputElement.PointerWheelChanged InputElement.Tapped InputElement.Holding InputElement.DoubleTapped Interactive.AddHandler(RoutedEvent, Delegate, RoutingStrategies, bool) Interactive.AddHandler<TEventArgs>(RoutedEvent<TEventArgs>, EventHandler<TEventArgs>, RoutingStrategies, bool) Interactive.RemoveHandler(RoutedEvent, Delegate) Interactive.RemoveHandler<TEventArgs>(RoutedEvent<TEventArgs>, EventHandler<TEventArgs>) Interactive.RaiseEvent(RoutedEventArgs) Interactive.BuildEventRoute(RoutedEvent) Layoutable.DesiredSizeProperty Layoutable.WidthProperty Layoutable.HeightProperty Layoutable.MinWidthProperty Layoutable.MaxWidthProperty Layoutable.MinHeightProperty Layoutable.MaxHeightProperty Layoutable.MarginProperty Layoutable.HorizontalAlignmentProperty Layoutable.VerticalAlignmentProperty Layoutable.UseLayoutRoundingProperty Layoutable.UpdateLayout() Layoutable.Measure(Size) Layoutable.Arrange(Rect) Layoutable.InvalidateMeasure() Layoutable.InvalidateArrange() Layoutable.AffectsMeasure<T>(params AvaloniaProperty[]) Layoutable.AffectsArrange<T>(params AvaloniaProperty[]) Layoutable.MeasureCore(Size) Layoutable.MeasureOverride(Size) Layoutable.ArrangeCore(Rect) Layoutable.ArrangeOverride(Size) Layoutable.OnMeasureInvalidated() Layoutable.OnVisualParentChanged(Visual, Visual) Layoutable.Width Layoutable.Height Layoutable.MinWidth Layoutable.MaxWidth Layoutable.MinHeight Layoutable.MaxHeight Layoutable.Margin Layoutable.HorizontalAlignment Layoutable.VerticalAlignment Layoutable.DesiredSize Layoutable.IsMeasureValid Layoutable.IsArrangeValid Layoutable.UseLayoutRounding Layoutable.EffectiveViewportChanged Layoutable.LayoutUpdated Visual.BoundsProperty Visual.ClipToBoundsProperty Visual.ClipProperty Visual.IsVisibleProperty Visual.OpacityProperty Visual.OpacityMaskProperty Visual.EffectProperty Visual.HasMirrorTransformProperty Visual.RenderTransformProperty Visual.RenderTransformOriginProperty Visual.FlowDirectionProperty Visual.VisualParentProperty Visual.ZIndexProperty Visual.GetFlowDirection(Visual) Visual.SetFlowDirection(Visual, FlowDirection) Visual.InvalidateVisual() Visual.Render(DrawingContext) Visual.AffectsRender<T>(params AvaloniaProperty[]) Visual.LogicalChildrenCollectionChanged(object, NotifyCollectionChangedEventArgs) Visual.OnAttachedToVisualTree(VisualTreeAttachmentEventArgs) Visual.OnDetachedFromVisualTree(VisualTreeAttachmentEventArgs) Visual.InvalidateMirrorTransform() Visual.Bounds Visual.ClipToBounds Visual.Clip Visual.IsEffectivelyVisible Visual.IsVisible Visual.Opacity Visual.OpacityMask Visual.Effect Visual.HasMirrorTransform Visual.RenderTransform Visual.RenderTransformOrigin Visual.FlowDirection Visual.ZIndex Visual.VisualChildren Visual.VisualRoot Visual.BypassFlowDirectionPolicies Visual.AttachedToVisualTree Visual.DetachedFromVisualTree StyledElement.DataContextProperty StyledElement.NameProperty StyledElement.ParentProperty StyledElement.TemplatedParentProperty StyledElement.ThemeProperty StyledElement.BeginInit() StyledElement.EndInit() StyledElement.ApplyStyling() StyledElement.InitializeIfNeeded() StyledElement.TryGetResource(object, ThemeVariant, out object) StyledElement.OnDataContextChanged(EventArgs) StyledElement.OnDataContextBeginUpdate() StyledElement.OnDataContextEndUpdate() StyledElement.OnInitialized() StyledElement.Name StyledElement.Classes StyledElement.DataContext StyledElement.IsInitialized StyledElement.Styles StyledElement.StyleKey StyledElement.Resources StyledElement.TemplatedParent StyledElement.Theme StyledElement.LogicalChildren StyledElement.PseudoClasses StyledElement.StyleKeyOverride StyledElement.Parent StyledElement.ActualThemeVariant StyledElement.AttachedToLogicalTree StyledElement.DetachedFromLogicalTree StyledElement.DataContextChanged StyledElement.Initialized StyledElement.ResourcesChanged StyledElement.ActualThemeVariantChanged Animatable.TransitionsProperty Animatable.OnPropertyChangedCore(AvaloniaPropertyChangedEventArgs) Animatable.Transitions AvaloniaObject.CheckAccess() AvaloniaObject.VerifyAccess() AvaloniaObject.ClearValue(AvaloniaProperty) AvaloniaObject.ClearValue<T>(AvaloniaProperty<T>) AvaloniaObject.ClearValue<T>(StyledProperty<T>) AvaloniaObject.ClearValue<T>(DirectPropertyBase<T>) AvaloniaObject.Equals(object) AvaloniaObject.GetHashCode() AvaloniaObject.GetValue(AvaloniaProperty) AvaloniaObject.GetValue<T>(StyledProperty<T>) AvaloniaObject.GetValue<T>(DirectPropertyBase<T>) AvaloniaObject.GetBaseValue<T>(StyledProperty<T>) AvaloniaObject.IsAnimating(AvaloniaProperty) AvaloniaObject.IsSet(AvaloniaProperty) AvaloniaObject.SetValue(AvaloniaProperty, object, BindingPriority) AvaloniaObject.SetValue<T>(StyledProperty<T>, T, BindingPriority) AvaloniaObject.SetValue<T>(DirectPropertyBase<T>, T) AvaloniaObject.SetCurrentValue(AvaloniaProperty, object) AvaloniaObject.SetCurrentValue<T>(StyledProperty<T>, T) AvaloniaObject.Bind(AvaloniaProperty, IBinding) AvaloniaObject.Bind(AvaloniaProperty, IObservable<object>, BindingPriority) AvaloniaObject.Bind<T>(StyledProperty<T>, IObservable<object>, BindingPriority) AvaloniaObject.Bind<T>(StyledProperty<T>, IObservable<T>, BindingPriority) AvaloniaObject.Bind<T>(StyledProperty<T>, IObservable<BindingValue<T>>, BindingPriority) AvaloniaObject.Bind<T>(DirectPropertyBase<T>, IObservable<object>) AvaloniaObject.Bind<T>(DirectPropertyBase<T>, IObservable<T>) AvaloniaObject.Bind<T>(DirectPropertyBase<T>, IObservable<BindingValue<T>>) AvaloniaObject.CoerceValue(AvaloniaProperty) AvaloniaObject.UpdateDataValidation(AvaloniaProperty, BindingValueType, Exception) AvaloniaObject.RaisePropertyChanged<T>(DirectPropertyBase<T>, T, T) AvaloniaObject.SetAndRaise<T>(DirectPropertyBase<T>, ref T, T) AvaloniaObject.InheritanceParent AvaloniaObject.this[AvaloniaProperty] AvaloniaObject.this[IndexerDescriptor] AvaloniaObject.PropertyChanged object.Equals(object, object) object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors SettingsPage() public SettingsPage() Methods InitializeComponent(bool) Wires up the controls and optionally loads XAML markup and attaches dev tools (if Avalonia.Diagnostics package is referenced). public void InitializeComponent(bool loadXaml = true) Parameters loadXaml bool Should the XAML be loaded into the component."
  },
  "api/PersonalBudgeting.Views.Pages.html": {
    "href": "api/PersonalBudgeting.Views.Pages.html",
    "title": "Namespace PersonalBudgeting.Views.Pages | PersonalBudgeting_BackendDocs",
    "summary": "Namespace PersonalBudgeting.Views.Pages Classes BudgetPage ExpensesPage HomePage IncomePage LoginPage ProfilePage RemindersPage SettingsPage"
  },
  "api/PersonalBudgeting.Views.html": {
    "href": "api/PersonalBudgeting.Views.html",
    "title": "Namespace PersonalBudgeting.Views | PersonalBudgeting_BackendDocs",
    "summary": "Namespace PersonalBudgeting.Views Classes MainWindow"
  },
  "api/PersonalBudgeting.html": {
    "href": "api/PersonalBudgeting.html",
    "title": "Namespace PersonalBudgeting | PersonalBudgeting_BackendDocs",
    "summary": "Namespace PersonalBudgeting Classes App ViewLocator"
  },
  "api/View.IView.html": {
    "href": "api/View.IView.html",
    "title": "Interface IView | PersonalBudgeting_BackendDocs",
    "summary": "Interface IView Namespace View Assembly View.dll public interface IView Methods Initialize(User) Task Initialize(User obj) Parameters obj User Returns Task Show() Task Show() Returns Task"
  },
  "api/View.Views.BudgetView.html": {
    "href": "api/View.Views.BudgetView.html",
    "title": "Class BudgetView | PersonalBudgeting_BackendDocs",
    "summary": "Class BudgetView Namespace View.Views Assembly View.dll public class BudgetView : IView Inheritance object BudgetView Implements IView Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods Initialize(User) public Task Initialize(User obj) Parameters obj User Returns Task Show() public Task Show() Returns Task"
  },
  "api/View.Views.DashBoard.html": {
    "href": "api/View.Views.DashBoard.html",
    "title": "Class DashBoard | PersonalBudgeting_BackendDocs",
    "summary": "Class DashBoard Namespace View.Views Assembly View.dll public class DashBoard : IView Inheritance object DashBoard Implements IView Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods Initialize(User) public Task Initialize(User obj) Parameters obj User Returns Task Show() public Task Show() Returns Task ShowSummary() public Task ShowSummary() Returns Task"
  },
  "api/View.Views.EditDetailsView.html": {
    "href": "api/View.Views.EditDetailsView.html",
    "title": "Class EditDetailsView | PersonalBudgeting_BackendDocs",
    "summary": "Class EditDetailsView Namespace View.Views Assembly View.dll public class EditDetailsView : IView Inheritance object EditDetailsView Implements IView Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods Initialize(User) public Task Initialize(User user) Parameters user User Returns Task Show() public Task Show() Returns Task"
  },
  "api/View.Views.ExpenseView.html": {
    "href": "api/View.Views.ExpenseView.html",
    "title": "Class ExpenseView | PersonalBudgeting_BackendDocs",
    "summary": "Class ExpenseView Namespace View.Views Assembly View.dll public class ExpenseView : IView Inheritance object ExpenseView Implements IView Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods Initialize(User) public Task Initialize(User obj) Parameters obj User Returns Task Show() public Task Show() Returns Task"
  },
  "api/View.Views.IncomeView.html": {
    "href": "api/View.Views.IncomeView.html",
    "title": "Class IncomeView | PersonalBudgeting_BackendDocs",
    "summary": "Class IncomeView Namespace View.Views Assembly View.dll public class IncomeView : IView Inheritance object IncomeView Implements IView Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods Initialize(User) public Task Initialize(User obj) Parameters obj User Returns Task Show() public Task Show() Returns Task"
  },
  "api/View.Views.html": {
    "href": "api/View.Views.html",
    "title": "Namespace View.Views | PersonalBudgeting_BackendDocs",
    "summary": "Namespace View.Views Classes BudgetView DashBoard EditDetailsView ExpenseView IncomeView"
  },
  "api/View.html": {
    "href": "api/View.html",
    "title": "Namespace View | PersonalBudgeting_BackendDocs",
    "summary": "Namespace View Interfaces IView"
  },
  "docs/getting-started.html": {
    "href": "docs/getting-started.html",
    "title": "Getting Started | PersonalBudgeting_BackendDocs",
    "summary": "Getting Started"
  },
  "docs/introduction.html": {
    "href": "docs/introduction.html",
    "title": "Introduction | PersonalBudgeting_BackendDocs",
    "summary": "Introduction"
  },
  "index.html": {
    "href": "index.html",
    "title": "This is the HOMEPAGE. | PersonalBudgeting_BackendDocs",
    "summary": "This is the HOMEPAGE. Refer to Markdown for how to write markdown files. Quick Start Notes: Add images to the images folder if the file is referencing an image."
  }
}